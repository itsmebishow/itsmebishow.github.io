{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<ul> <li> <p> Git</p> </li> <li> <p> Career</p> </li> <li> <p> tmux</p> </li> <li> <p> Video</p> </li> <li> <p> Research</p> </li> </ul> <p>Skills vs Knowledge</p> <p>Knowledge</p> <p>An effective way to think about knowledge is that it is a collection of memories that are disconnected from each other.</p> <p>Skills</p> <p>Have you ever heard the popular saying that goes like this:</p> <p>once you learn how to ride a bicycle, you never forget? This is because riding a bicycle is not knowledge; it\u2019s a skill. An effective way to think about skills is that they are collections of memories that are connected to each other.</p> <p>The most important thing about skills for you to keep in mind is that although you can acquire knowledge by reading or listening, you can only develop skills by doing.</p>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2024/04/29/blog-api/","title":"Blog API","text":""},{"location":"blog/2024/04/29/blog-api/#blog-api","title":"Blog API","text":"<p>For the API app to have its own urls.py to contain the paths for the API end points, we add the below to <code>todobackend/backend/urls.py</code>:</p> <p>urls.py</p> <pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n]\n</code></pre> <p>This will forward all API related paths e.g. <code>localhost:8000/api/*</code> to the API app.</p>"},{"location":"blog/2024/04/29/blog-api/#reference","title":"Reference","text":""},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/","title":"A Guide to Secure Your Commits with GPG Keys","text":"","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#a-guide-to-secure-your-commits-with-gpg-keys","title":"A Guide to Secure Your Commits with GPG Keys","text":"<p>In the fast-paced world of software development, maintaining the integrity of your code is paramount. One powerful tool that helps ensure the authenticity of your commits is the GNU Privacy Guard (GPG). In this guide, we'll walk through the process of generating and using GPG keys to sign your commits, providing an extra layer of security for your projects.</p>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#what-is-gpg","title":"What is GPG?","text":"<p>GPG, or GNU Privacy Guard, is a free and open-source software that implements the OpenPGP standard for encrypting and signing data. In the context of version control systems like Git, GPG keys are used to sign commits, verifying that the person making the commit is who they claim to be.</p>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#step-1-generating-a-gpg-key","title":"Step 1: Generating a GPG Key","text":"<p>The first step is to generate your GPG key. Open a terminal on your local machine and use the following command:</p> bash<pre><code>gpg --full-generate-key\n</code></pre> <p>Follow the prompts to set up your key, providing your name, email address, and a strong passphrase. This passphrase is crucial, as it adds an additional layer of protection to your private key.</p>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#step-2-adding-your-gpg-key-to-github","title":"Step 2: Adding Your GPG Key to GitHub","text":"<p>Once your GPG key is generated, you need to associate it with your GitHub account. Follow these steps:</p> <ol> <li> <p>Copy your GPG key ID using the command:</p> bash<pre><code>gpg --list-secret-keys --keyid-format LONG\n</code></pre> <p>Terminology</p> <pre><code>$ gpg --list-keys\n\nsec (Secret Key):\nssb (Secret Subkey):\nuid (User ID):\n</code></pre> </li> <li> <p>To display the ASCII-armored version of your public key, use the following command:</p> bash<pre><code>gpg --armor --export &lt;YourKeyID&gt;\n</code></pre> <p>Replace <code>&lt;YourKeyID&gt;</code> with your actual GPG key ID.</p> </li> <li> <p>Go to your GitHub account settings, navigate to \"SSH and GPG keys,\" and click on \"New GPG key.\"</p> </li> <li> <p>Paste your GPG key ID and save it.</p> </li> </ol>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#step-3-configuring-git","title":"Step 3: Configuring Git","text":"<p>Configure Git to use your GPG key by running:</p> bash<pre><code>git config --global user.signingkey &lt;GPG_KEY_ID&gt;\n</code></pre> <p>Replace <code>&lt;GPG_KEY_ID&gt;</code> with your actual GPG key ID. Additionally, set Git to sign all of your commits by default:</p> bash<pre><code>git config --global commit.gpgSign true\n</code></pre>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#step-4-signing-commits","title":"Step 4: Signing Commits","text":"<p>From now on, every commit you make will be signed with your GPG key. You can sign a commit explicitly using:</p> bash<pre><code>git commit -S -m \"Your commit message\"\n</code></pre>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#verification-and-visual-confirmation","title":"Verification and Visual Confirmation","text":"<p>GitHub will display a \"<code>Verified</code>\" badge next to signed commits on the web interface, providing a visual confirmation of the commit's authenticity. You can also verify commits locally using:</p> bash<pre><code>git verify-commit &lt;commit-SHA&gt;\n</code></pre> <p>Replace <code>&lt;commit-SHA&gt;</code> with the actual SHA hash of the commit you want to verify.</p> <p>By following these steps, you've empowered your version control workflow with an added layer of security. GPG keys not only help in ensuring the trustworthiness of your commits but also contribute to a more secure and transparent collaboration environment in the world of software development.</p> <p>Notes</p> <p>When you run the <code>gpg --list-keys</code> command, you'll typically see output that looks like this:</p> <pre><code>pub   4096R/&lt;YourKeyID&gt;  YYYY-MM-DD [expires: YYYY-MM-DD]\nuid                  Your Name &lt;your.email@example.com&gt;\nsub   4096R/&lt;SubKeyID&gt;  YYYY-MM-DD [expires: YYYY-MM-DD]\n</code></pre> <ul> <li><code>pub</code>: Public key information.</li> <li><code>uid</code>: User ID (your identity associated with the key).</li> <li><code>sub</code>: Subkey information.</li> </ul> <p>The \"<code>R</code>\" in \"<code>4096R</code>\" denotes the key's algorithm (RSA in this case), and the key IDs (\"<code>&lt;YourKeyID&gt;</code>\" and \"<code>&lt;SubKeyID&gt;</code>\") are unique identifiers for the keys.</p> <p>When you export the public key, you are essentially exporting the public part of the key pair, which includes the user ID information and the associated public subkey(s). The public key is what you can share with others, allowing them to encrypt messages or verify your digital signatures.</p>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#reference","title":"Reference","text":"<ul> <li>Verified Commits on GitHub from Windows PC ( GPG Keys ) : youtube</li> </ul>","tags":["Programming"]},{"location":"blog/2024/05/02/css-media-queries/","title":"CSS Media Queries","text":"","tags":["css","html"]},{"location":"blog/2024/05/02/css-media-queries/#css-media-queries","title":"CSS Media Queries","text":"<p>CSS media queries are a powerful tool for creating responsive web designs. They allow you to apply different styles based on the characteristics of the device viewing the content, such as the <code>screen size</code>, <code>resolution</code>, <code>orientation</code>, and more. This way, you can ensure that your website looks good and functions well on a wide range of devices, from desktop monitors to smartphones.</p>","tags":["css","html"]},{"location":"blog/2024/05/02/css-media-queries/#media-queries","title":"Media Queries","text":"<p>The @media rule, introduced in <code>CSS2</code>, made it possible to define different style rules for different media types.</p> <p>Media queries in <code>CSS3</code> extended the <code>CSS2</code> media types idea: Instead of looking for a type of device, they look at the capability of the device.</p> <p>Media queries can be used to check many things, such as:</p> <ul> <li>width and height of the viewport</li> <li>orientation of the viewport (<code>landscape</code> or <code>portrait</code>)</li> <li>resolution</li> </ul> <p>Using media queries are a popular technique for delivering a tailored style sheet to desktops, laptops, tablets, and mobile phones (such as iPhone and Android phones).</p> <p>Syntax</p> <p>A media query consists of a media type and can contain one or more media features, which resolve to either <code>true</code> or <code>false</code>.</p> CSS<pre><code>@media not|only mediatype and (media feature) and (media feature) {\n    ...\n    /* CSS-Code; */\n    ...\n}\n</code></pre> <p>The mediatype is optional (if omitted, it will be set to all). However, if you use not or only, you must also specify a mediatype.</p>","tags":["css","html"]},{"location":"blog/2024/05/02/css-media-queries/#example","title":"Example","text":"<p>Example</p> <pre><code>/* On screens that are 992px or less, set the background color to blue */\n@media screen and (max-width: 992px) {\n    body {\n        background-color: blue;\n    }\n}\n\n/* If screen size is more than 992px wide, set the font-size of &lt;div&gt; to 80px */\n@media screen and (min-width: 992px) {\n    div.example {\n        font-size: 80px;\n    }\n}\n\n/* Orientation: Portrait / Landscape */\n@media only screen and (orientation: landscape) {\n    body {\n        background-color: lightblue;\n    }\n}\n\n/* Min Width to Max Width:  */\n/* For example, when the browser's width is between 600 and 900px, change the appearance of a &lt;div&gt; element: */\n@media screen and (max-width: 900px) and (min-width: 600px) {\n    div.example {\n        font-size: 50px;\n        padding: 50px;\n        border: 8px solid black;\n        background: yellow;\n    }\n}\n\n\n/* When the width is between 600px and 900px or above 1100px - change the appearance of &lt;div&gt; */\n@media screen and (max-width: 900px) and (min-width: 600px), (min-width: 1100px) {\n    div.example {\n        font-size: 50px;\n        padding: 50px;\n        border: 8px solid black;\n        background: yellow;\n    }\n}\n</code></pre> <p>Note</p> <p>Meaning of the not, only, and and keywords:</p> <ul> <li><code>not</code>: This keyword inverts the meaning of an entire media query.</li> <li><code>only</code>: This keyword prevents older browsers that do not support media queries from applying the specified styles. It has no effect on modern browsers.</li> <li><code>and</code>: This keyword combines a media type and one or more media features.</li> </ul> <p>You can also link to different stylesheets for different media and different widths of the browser window (viewport):</p> html<pre><code>&lt;link rel=\"stylesheet\" media=\"print\" href=\"print.css\"&gt;\n&lt;link rel=\"stylesheet\" media=\"screen\" href=\"screen.css\"&gt;\n&lt;link rel=\"stylesheet\" media=\"screen and (min-width: 480px)\" href=\"example1.css\"&gt;\n&lt;link rel=\"stylesheet\" media=\"screen and (min-width: 701px) and (max-width: 900px)\" href=\"example2.css\"&gt;\n</code></pre>","tags":["css","html"]},{"location":"blog/2024/05/02/css-media-queries/#css-media-types","title":"CSS Media Types","text":"Value Description <code>all</code> Used for all media type devices <code>print</code> Used for print preview mode <code>screen</code> Used for computer screens, tablets, smart-phones etc.","tags":["css","html"]},{"location":"blog/2024/05/02/css-media-queries/#css-common-media-features","title":"CSS Common Media Features","text":"<p>Here are some commonly used media features:</p> Value Description <code>orientation</code> Orientation of the viewport. Landscape or portrait <code>max-height</code> Maximum height of the viewport <code>min-height</code> Minimum height of the viewport <code>height</code> Height of the viewport (including scrollbar) <code>max-width</code> Maximum width of the viewport <code>min-width</code> Minimum width of the viewport <code>width</code> Width of the viewport (including scrollbar)","tags":["css","html"]},{"location":"blog/2024/05/02/css-media-queries/#reference","title":"Reference","text":"<ul> <li>CSS Media Queries: w3schools</li> <li>Responsive Web Design - Media Queries: w3schools</li> <li>Using media queries: developer.mozilla.org</li> <li>CSS3 mediaqueries</li> <li>CSS RWD Mediaqueries: w3schools</li> </ul>","tags":["css","html"]},{"location":"blog/2024/05/04/encoding-and-decoding/","title":"Encoding and Decoding","text":"","tags":["react","base64"]},{"location":"blog/2024/05/04/encoding-and-decoding/#encoding-and-decoding","title":"Encoding and Decoding","text":"<p>Base64 encoding converts binary data into a text-based format using a set of 64 characters (A-Z, a-z, 0-9, +, /) to ensure safe transmission over text-based protocols like HTTP. It is commonly used for embedding binary data into text formats, such as JSON, XML, or HTML, where binary data cannot be directly transmitted.</p> <p>Tip</p> <p>Example: Encoding a binary image data into Base64:</p> <p>Original binary image data:</p> <pre><code>01101000 01110100 01110100 01110000 00111010 00101111 00101111 01100101 01111000 01100001 01101101 01110000 01101100 01100101 00101110 01100011 01101111 01101101 00101111 01101001 01101101 01100001 01100111 01100101 01110011 00101110 01110000 01101110 01100111\n</code></pre> <p>Base64 encoded representation:</p> <pre><code>aHR0cDovL2V4YW1wbGUuY29tL2ltYWdlcy5wbmc=\n</code></pre> bas64 TheoryBackendFrontend <p>Using Base64 encoding is a common method to safely transfer binary data, such as files, over text-based protocols like HTTP. Here are the key reasons why Base64 is often used and how it works in simple terms:</p> <p>Why Base64?</p> <ul> <li> <p>Text-Based Transfer: HTTP and many other protocols are designed to handle text data efficiently. Binary data, such as images, PDFs, or other files, can include byte sequences that are not safe for text-based protocols. Base64 converts binary data into a text string composed of ASCII characters, making it safe to transmit over text-based protocols.</p> </li> <li> <p>Consistency: When sending data in text form, you avoid issues with character encoding that might corrupt the data. Base64 ensures that the data remains intact during transmission.</p> </li> <li> <p>Compatibility: Many systems and APIs expect data to be in a text format, especially when sending it in JSON objects. Base64 allows you to embed binary data within JSON objects easily.</p> </li> </ul> <p>How Base64 Works</p> <ul> <li> <p>Encoding: The binary data (such as the contents of a file) is divided into chunks of 3 bytes (24 bits). Each chunk is then split into four groups of 6 bits each. These 6-bit groups are then mapped to a set of 64 characters (A-Z, a-z, 0-9, +, /).</p> </li> <li> <p>Padding: If the total number of bytes isn't divisible by 3, the encoder adds padding (usually \"=\") to make it up to a multiple of 4 characters.</p> </li> <li> <p>Decoding: The receiver reverses the process by converting the Base64 text back into the original binary data.</p> </li> </ul> <p>Backend: Encode and Send File Data</p> <p>Here's a simplified example in Node.js using Express:</p> <pre><code>const express = require('express');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst port = 3000;\n\napp.get('/download', (req, res) =&gt; {\n    const filePath = path.join(__dirname, 'files', 'image.png'); // Path to your file\n    const fileName = 'image.png'; // File name to be sent\n\n    // Read the file and encode it to base64\n    fs.readFile(filePath, (err, data) =&gt; {\n        if (err) {\n            return res.status(500).json({ error: 'Failed to read file', details: err.message });\n        }\n\n        const base64data = data.toString('base64');\n        res.json({ fileName, fileType: 'image/png', fileData: base64data });\n    });\n});\n\napp.listen(port, () =&gt; {\n    console.log(`Server running at http://localhost:${port}`);\n});\n</code></pre> <p>Frontend: Decode and Save File Data</p> <p>Here's a React component to fetch the file data, decode it, and save it:</p> <pre><code>import React, { useState } from 'react';\n\nconst FileDownload = () =&gt; {\n    const [file, setFile] = useState(null);\n\n    const handleFileDownload = () =&gt; {\n        fetch('http://localhost:3000/download')\n            .then(response =&gt; response.json())\n            .then(data =&gt; {\n                const { fileName, fileType, fileData } = data;\n\n                // Decode base64 string to binary data\n                const binaryString = atob(fileData);\n                const len = binaryString.length;\n                const bytes = new Uint8Array(len);\n                for (let i = 0; i &lt; len; i++) {\n                    bytes[i] = binaryString.charCodeAt(i);\n                }\n\n                // Create a blob from the binary data\n                const blob = new Blob([bytes], { type: fileType });\n\n                // Create a link element to download the file\n                const link = document.createElement('a');\n                link.href = URL.createObjectURL(blob);\n                link.download = fileName;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n\n                setFile({ fileName, fileType, fileData });\n            })\n            .catch(error =&gt; {\n                console.error('Error downloading file:', error);\n            });\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;button onClick={handleFileDownload}&gt;Download File&lt;/button&gt;\n            {file &amp;&amp; &lt;p&gt;File downloaded: {file.fileName}&lt;/p&gt;}\n        &lt;/div&gt;\n    );\n};\n\nexport default FileDownload;\n</code></pre> <p>Summary</p> <ul> <li>Base64 Encoding: Converts binary data to a safe text format for transmission.</li> <li>Backend: Reads the file, encodes it to Base64, and sends it in a JSON response.</li> <li>Frontend: Fetches the Base64 data, decodes it, creates a Blob, and triggers a file download.</li> </ul> <p>This method ensures that you can safely send and receive file data without worrying about binary data corruption or compatibility issues with text-based protocols.</p> <p>Tip</p> <ul> <li>Binary Encoding: Represents data directly as bits without additional encoding, suitable for raw data storage and transmission.</li> <li>Base64 Encoding: Converts binary data into a text-based format using a set of 64 characters, commonly used for embedding binary data in text-based protocols.</li> <li>Binary Formats: Structured data serialization formats (e.g., Protocol Buffers, MessagePack) that encode data into efficient binary representations for performance and size benefits.</li> <li>Gzip Compression: Reduces the size of data by finding repeated patterns and replacing them with references, optimizing data transmission over networks.</li> </ul> Tip <p>The \"best\" method for sending data in an API response depends heavily on the specific requirements and constraints of your application. Here are a few considerations and methods commonly used in API design:</p> <ol> <li> <p>Direct Binary Transfer (Preferred for Large Files):</p> <ul> <li>Method: Instead of encoding binary data (like images, documents) into Base64 and embedding it within JSON/XML, you can directly transfer the binary data.</li> <li>Advantages: Reduces payload size since Base64 encoding increases data size by about 33%. Improves performance and reduces complexity on both server and client sides.</li> <li>Implementation: Use HTTP content types (multipart/form-data for form-based uploads or application/octet-stream for raw binary) to handle file uploads efficiently.</li> </ul> </li> <li> <p>Base64 Encoding (Preferred for Small Binary Data within JSON/XML):</p> <ul> <li>Method: Encode binary data (e.g., images) into Base64 and embed it as a string within JSON or XML.</li> <li>Advantages: Ensures compatibility with text-based protocols. Allows transmission of binary data where direct binary transfer isn't feasible (e.g., in some JSON APIs). Considerations: Increased payload size and additional processing overhead for encoding and decoding Base64 data.</li> </ul> </li> <li> <p>URLs for Large Files (Optional):</p> <ul> <li>Method: Instead of embedding large files in API responses, return URLs where the files can be accessed or downloaded.</li> <li>Advantages: Reduces API response size. Allows efficient handling of large files by offloading storage and bandwidth requirements to a dedicated file server or CDN. Implementation: Ensure URLs are secure (e.g., using tokens or permissions) and accessible by API consumers.</li> </ul> </li> </ol> <p>Choosing the Best Method:</p> <ul> <li> <p>Payload Size: Consider the size of the data being transmitted. For small files or binary data snippets, Base64 might be acceptable. For larger files, direct binary transfer or URLs are typically more efficient.</p> </li> <li> <p>Performance: Evaluate the impact on network bandwidth, server load, and client-side processing. Direct binary transfer generally offers better performance compared to Base64 encoding, especially for large files.</p> </li> <li> <p>Compatibility: Ensure the chosen method is compatible with your client applications and any constraints they might have (e.g., browser support for file uploads or handling Base64).</p> </li> <li> <p>Security: Always prioritize security when transmitting sensitive data. Use HTTPS for secure communication and consider access controls for URLs or direct binary transfers.</p> </li> </ul> <p>In conclusion, the \"best\" method often involves a trade-off between payload size, performance, compatibility, and security considerations. Direct binary transfer is generally preferred for large files, while Base64 encoding within JSON/XML can be suitable for smaller binary data. Choose the method that best fits your specific use case and requirements.</p>","tags":["react","base64"]},{"location":"blog/2024/05/04/encoding-and-decoding/#sending-data-as-base64-in-an-api-response","title":"Sending data as Base64 in an API response","text":"<p>Sending data as Base64 in an API response can have both advantages and disadvantages depending on the context. Here are some considerations:</p>","tags":["react","base64"]},{"location":"blog/2024/05/04/encoding-and-decoding/#advantages","title":"Advantages:","text":"<ul> <li> <p>Binary Data Handling: Base64 encoding allows you to safely transmit binary data (like images, documents) over text-based protocols (like JSON or XML) without risking data corruption due to special characters or encoding issues.</p> </li> <li> <p>Compatibility: Some platforms or systems might have restrictions on the characters they can handle in JSON or XML. Base64 encoding ensures compatibility across different systems and languages.</p> </li> <li> <p>Security: While Base64 is not encryption, it can obscure data from casual inspection since it transforms binary data into a text format. This can be beneficial for transmitting sensitive information.</p> </li> </ul>","tags":["react","base64"]},{"location":"blog/2024/05/04/encoding-and-decoding/#disadvantages","title":"Disadvantages:","text":"<ul> <li> <p>Increased Payload Size: Base64 encoding increases the size of the data by approximately 33%. This can impact network bandwidth and API performance, especially when transferring large amounts of data.</p> </li> <li> <p>Complexity: Handling Base64 data requires additional processing on both the server and client sides to decode and encode the data, which adds complexity to the implementation.</p> </li> <li> <p>Debugging: Debugging encoded Base64 data is more difficult compared to debugging plain text or JSON/XML data. It requires extra steps to decode the Base64 string to examine the original data.</p> </li> </ul>","tags":["react","base64"]},{"location":"blog/2024/05/04/encoding-and-decoding/#use-cases","title":"Use Cases:","text":"<ul> <li> <p>Small Binary Data: For small files or images embedded within JSON responses, Base64 encoding is often used and practical.</p> </li> <li> <p>API Design: If your API consumers are comfortable with handling Base64 data and understand its implications, it might be a suitable choice.</p> </li> <li> <p>Compatibility Requirements: When interoperability across different platforms and systems is crucial, Base64 ensures that binary data can be safely transmitted.</p> </li> </ul>","tags":["react","base64"]},{"location":"blog/2024/05/04/encoding-and-decoding/#conclusion","title":"Conclusion:","text":"<p>Whether it's good to send data as Base64 in an API response depends on your specific requirements and trade-offs between simplicity, performance, and compatibility. For small amounts of binary data or when compatibility across diverse systems is necessary, Base64 can be a pragmatic solution. However, for large data payloads or when optimizing for performance is critical, alternatives such as direct file uploads with appropriate content-type headers might be more suitable.</p>","tags":["react","base64"]},{"location":"blog/2024/05/04/encoding-and-decoding/#types-of-http-post-requests-for-file-uploads","title":"Types of HTTP POST Requests for File Uploads.","text":"<p>In the context of file uploads using HTTP POST requests, there are a few common types:</p> <ul> <li> <p>Multipart Form Data: This is the most common type for file uploads. It allows you to send both text and binary data as a series of parts in a single HTTP request. Each part has its own Content-Type and can contain different types of files (e.g., <code>images</code>, <code>documents</code>).</p> </li> <li> <p>Binary File Upload: This involves sending binary data directly in the body of the POST request. It's suitable for uploading files where the entire content is binary (e.g., images, PDFs).</p> </li> <li> <p>Base64 Encoded File Upload: Files can also be encoded as <code>Base64</code> strings and sent in the body of a POST request. This approach is less efficient than binary uploads but can be useful in certain situations where encoding is required.</p> </li> </ul> <p>These types are often implemented depending on the server-side requirements and the capabilities of the client making the request.</p>","tags":["react","base64"]},{"location":"blog/2024/04/19/env-variable-in-ubuntu/","title":"Env variable in ubuntu","text":"<p>Understanding and manipulating environment variables is crucial for configuring your Ubuntu system to suit your needs. Environment variables are dynamic values that affect the behavior of processes running in your Linux environment. In this short guide, we'll explore how to <code>view</code>, <code>set</code>, and <code>manage</code> environment variables in Ubuntu.</p>","tags":["Python","Ubuntu"]},{"location":"blog/2024/04/19/env-variable-in-ubuntu/#viewing-environment-variables","title":"Viewing Environment Variables:","text":"<p>To see the environment variables currently set in your Ubuntu system, you can use the printenv command in the terminal. This command displays a list of all environment variables and their values.</p> <p>bash</p> <pre><code>printenv\n\nprintenv VARIABLE_NAME\n\nprintenv PATH\n</code></pre>","tags":["Python","Ubuntu"]},{"location":"blog/2024/04/19/env-variable-in-ubuntu/#setting-environment-variables","title":"Setting Environment Variables:","text":"<p>Setting environment variables is done using the export command followed by the variable name and its value. For instance, export MY_VAR=hello sets the variable <code>MY_VAR</code> to the value hello. This change applies only to the current terminal session.</p> <p>bash</p> <pre><code># syntax\nexport VARIABLE_NAME=value\n\n# example\nexport MY_VAR=hello\n</code></pre>","tags":["Python","Ubuntu"]},{"location":"blog/2024/04/19/env-variable-in-ubuntu/#persisting-environment-variables","title":"Persisting Environment Variables:","text":"<p>To make environment variables persistent across terminal sessions, you can add the export command to your shell configuration file (e.g., .bashrc or .profile). Editing this file allows you to set environment variables that will be loaded every time you start a new terminal session, ensuring consistency in your environment.</p> <p>bash</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>Then add the line:</p> <p>bash</p> <pre><code>export MY_VAR=hello\n</code></pre> <p>Save the file and exit the editor. Now, the <code>MY_VAR</code> variable will be set to <code>hello</code> every time you open a new terminal session.</p> difference between bashrc &amp; profile <p>The main difference between .bashrc and .profile is the timing of when they are executed:\"</p> .bashrc.profile <ul> <li>Executes each time a new interactive Bash shell is started.</li> <li>Typically used for configuring the Bash shell environment for interactive use, such as setting aliases, defining shell functions, and customizing the prompt.</li> </ul> <ul> <li>Executes once when a user logs in to their session.</li> <li>Used for setting environment variables and executing commands that should apply to the entire session, including both interactive and non-interactive shells.</li> </ul> <p>In summary, <code>.bashrc</code> is specific to the Bash shell and runs each time a new shell is opened, while <code>.profile</code> is more general and executes once per login session, affecting all processes started during that session.</p> <p>In Bash, when you use the export command to set an environment variable, you can either enclose the value in double quotes (\") or omit the quotes entirely, as long as the value itself does not contain any special characters or spaces.</p> <p>So both of these are valid:</p> <pre><code>export FAVORITE_COLOR=\"blue\"\n</code></pre> <pre><code>export FAVORITE_COLOR=blue\n</code></pre> <p>Both commands will set the FAVORITE_COLOR environment variable to the string \"blue\". However, using double quotes allows you to include special characters or spaces in the value, while omitting quotes is simpler and works fine for simple values like \"blue\".</p>","tags":["Python","Ubuntu"]},{"location":"blog/2024/04/19/env-variable-in-ubuntu/#conclusion","title":"Conclusion:","text":"<p>Mastering environment variables in Ubuntu empowers you to customize your system according to your preferences and requirements. Whether you're configuring paths, defining default settings, or integrating software components, understanding how to <code>view</code>, <code>set</code>, and <code>persist</code> environment variables is an essential skill for efficient Linux administration and development. With these simple commands, you can take full control of your Ubuntu environment, tailoring it to suit your needs effortlessly.</p>","tags":["Python","Ubuntu"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/","title":"Mastering Collaboration: A Guide to Git Branching Strategies","text":"","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#mastering-collaboration-a-guide-to-git-branching-strategies","title":"Mastering Collaboration: A Guide to Git Branching Strategies","text":"<p>Git, a powerful version control system, provides a variety of branching strategies to help development teams manage codebase changes, collaborate efficiently, and streamline the release process. Choosing the right branching strategy is crucial for maintaining code stability and facilitating collaboration within a team. In this blog post, we'll explore some common Git branching strategies and discuss their use cases.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#what-are-git-branching-strategies","title":"What are GIT branching strategies?","text":"<p>GIT branching strategies are patterns or approaches that tech teams use to organize &amp; manage their code through different branches in a GIT system.</p> <p>Each strategy defines the rules &amp; guidelines for the creation, naming &amp; merging the branches for facilitating collaboration, stability, &amp; release management.</p> <p></p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#1-feature-branching","title":"1. Feature Branching","text":"<p>Overview:</p> <p>Feature branching is a straightforward strategy where each new feature or user story is developed in its own branch. This approach isolates changes related to a specific feature, making it easier to manage and integrate.</p> <p></p> <p>Workflow:</p> <ol> <li>Developers create a new branch for each feature (<code>feature/feature-name</code>).</li> <li>Work is done exclusively in the feature branch.</li> <li>Once the feature is complete and tested, it's merged into the main development branch (<code>develop</code> or <code>main</code>).</li> </ol> <p>Feature branching promotes parallel development and allows teams to work on multiple features simultaneously without interfering with each other.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#2-gitflow","title":"2. Gitflow","text":"<p>Overview:</p> <p>Gitflow is a branching model that defines specific branches for different purposes, emphasizing a structured and organized workflow.</p> <p></p> <p>Branches:</p> <ul> <li><code>main</code>: Represents the production-ready code.</li> <li><code>develop</code>: Integration branch for ongoing development.</li> <li><code>feature/*</code>: Feature branches for new features.</li> <li><code>release/*</code>: Branches for preparing releases.</li> <li><code>hotfix/*</code>: Branches for fixing critical issues in production.</li> </ul> <p>Workflow:</p> <ol> <li>Developers work on feature branches.</li> <li>Features are merged into <code>develop</code> when complete.</li> <li>Releases are prepared in <code>release</code> branches.</li> <li>Hotfixes are handled in <code>hotfix</code> branches.</li> </ol> <p>Gitflow provides a clear separation of feature development, release preparation, and hotfixes, making it suitable for projects with scheduled releases.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#3-github-flow","title":"3. GitHub Flow","text":"<p>Overview:</p> <p>GitHub Flow is a lightweight, continuous delivery-oriented branching strategy, emphasizing simplicity and continuous integration.</p> <p></p> <p>Workflow:</p> <ol> <li><code>main</code> is always deployable.</li> <li>Developers create a feature branch for each task.</li> <li>Feature branches are merged into <code>main</code> via pull requests.</li> <li>Continuous integration (CI) ensures the stability of the <code>main</code> branch.</li> </ol> <p>GitHub Flow focuses on small, frequent releases and encourages continuous delivery practices.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#4-release-branching","title":"4. Release Branching","text":"<p>Overview:</p> <p>Release branching involves creating branches specifically for releases, providing a controlled environment for final testing.</p> <p>Workflow:</p> <ol> <li>Develop new features in feature branches.</li> <li>Create a release branch when preparing for a release.</li> <li>Perform final testing on the release branch.</li> <li>Merge the release branch into <code>main</code> and tag the release.</li> </ol> <p>Release branching ensures that the <code>main</code> branch always contains stable code, and releases can be thoroughly tested before deployment.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#5-trunk-based-development","title":"5. Trunk-Based Development","text":"<p>Overview:</p> <p>Trunk-Based Development promotes development directly on the main branch, emphasizing small, frequent integrations.</p> <p></p> <p>Workflow:</p> <ol> <li>Developers commit changes directly to the <code>main</code> branch.</li> <li>Small batches of changes are continuously integrated.</li> <li>Feature toggles or feature flags are used to hide incomplete features.</li> </ol> <p>Trunk-Based Development encourages developers to work on short-lived branches or directly on the main branch, enabling rapid releases and quick feedback loops.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#conclusion","title":"Conclusion","text":"<p>Choosing the right Git branching strategy is a critical decision that depends on factors such as team size, project complexity, release frequency, and collaboration needs. The strategies discussed here are just a starting point, and teams often adapt or combine them based on their unique requirements.</p> <p>Effective collaboration and version control are at the heart of successful software development. By mastering Git branching strategies, teams can navigate complex development workflows with confidence, ensuring a smooth and efficient collaborative coding experience. Whether it's feature branching, Gitflow, GitHub Flow, release branching, or trunk-based development, the key is to align the chosen strategy with the team's goals and project characteristics, ultimately leading to a more streamlined and effective development process.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#reference","title":"Reference","text":"<ul> <li>git branching strategies</li> <li>What Are Different Git Branching Strategies</li> <li>Most Popular Branching Strategies in Git</li> </ul>","tags":["Programming"]},{"location":"blog/2024/01/15/how-to-pull-all-branches-from-a-remote-repository-in-github-/","title":"How to pull all branches from a remote repository in GitHub ?","text":"","tags":["Programming"]},{"location":"blog/2024/01/15/how-to-pull-all-branches-from-a-remote-repository-in-github-/#how-to-pull-all-branches-from-a-remote-repository-in-github","title":"How to pull all branches from a remote repository in GitHub ?","text":"<p><code>git fetch --all</code> command fetches all branches from the remote repository without merging them into your local branches.</p> <p>To pull all branches from a remote repository in GitHub, you can follow these steps:</p> <ol> <li> <p>Clone the Repository:</p> <p>If you haven't already cloned the repository, start by cloning it using the following command:</p> bash<pre><code>git clone &lt;repository_url&gt;\n</code></pre> <p>Replace <code>&lt;repository_url&gt;</code> with the actual URL of the GitHub repository.</p> </li> <li> <p>Navigate to the Repository Directory:</p> <p>Change into the repository directory:</p> bash<pre><code>cd &lt;repository_directory&gt;\n</code></pre> <p>Replace <code>&lt;repository_directory&gt;</code> with the name of the local directory where the repository was cloned.</p> </li> <li> <p>Fetch All Branches:</p> <p>Use the following command to fetch all branches from the remote repository:</p> bash<pre><code>git fetch --all\n</code></pre> <p>This command fetches all branches from the remote repository without merging them into your local branches.</p> </li> <li> <p>Checkout Each Branch:</p> <p>To have a local copy of all branches, you need to check out each branch. You can iterate through all remote branches and create local tracking branches for them:</p> bash<pre><code>git branch -a | grep remotes/origin | grep -v HEAD | sed 's#^.*remotes/origin/##' | xargs -I {} git checkout -b {}\n</code></pre> <p>This command lists all remote branches, filters out the HEAD branch, and creates a local branch for each remote branch.</p> </li> </ol> <p>Now, your local repository should have all branches from the remote GitHub repository. Keep in mind that this approach creates local branches that track the remote branches, so you can easily switch between them using <code>git checkout</code>.</p>","tags":["Programming"]},{"location":"blog/2024/01/15/mastering-git-understanding---track-and---set-upstream/","title":"Mastering Git: Understanding --track and --set-upstream","text":"","tags":["Programming"]},{"location":"blog/2024/01/15/mastering-git-understanding---track-and---set-upstream/#mastering-git-understanding-track-and-set-upstream","title":"Mastering Git: Understanding <code>--track</code> and <code>--set-upstream</code>","text":"<p>Git is a powerful version control system that allows developers to manage their source code efficiently. Whether you're a seasoned developer or just getting started, understanding Git commands is crucial for effective collaboration and version control. In this blog post, we'll explore two Git commands: <code>--track</code> and <code>--set-upstream</code> (or its shorthand <code>-u</code>) that are used for setting up tracking relationships between local and remote branches.</p>","tags":["Programming"]},{"location":"blog/2024/01/15/mastering-git-understanding---track-and---set-upstream/#-track-creating-local-branches-with-tracking","title":"<code>--track</code>: Creating Local Branches with Tracking","text":"<p>The <code>--track</code> option is commonly used with the <code>git checkout</code> command to create a new local branch and set up tracking information in a single step. This is particularly useful when you want to work on a feature or bug fix that corresponds to a remote branch. Let's dive into a scenario:</p> <p>Scenario: Creating a New Local Branch and Tracking a Remote Branch</p> bash<pre><code>git checkout --track origin/feature-branch\n</code></pre> <p>In this scenario, we are creating a new local branch named feature-branch and want it to track the corresponding remote branch <code>origin/feature-branch</code>. The <code>--track</code> option ensures that the local branch is set up to track changes in the remote branch.</p>","tags":["Programming"]},{"location":"blog/2024/01/15/mastering-git-understanding---track-and---set-upstream/#-set-upstream-or-u-establishing-upstream-relationships","title":"<code>--set-upstream</code> (or <code>-u</code>): Establishing Upstream Relationships","text":"<p>The <code>--set-upstream</code> (or its shorthand <code>-u</code>) option is often used with the git push command to set or change the upstream branch for an existing local branch. This establishes a tracking relationship between the local and remote branches, allowing for seamless collaboration. Let's explore some scenarios:</p> <p>Scenario 1: Setting Upstream for an Existing Local Branch</p> bash<pre><code>git push -u origin develop\n</code></pre> <p>In this scenario, we have an existing local branch named develop, and we want to set its upstream branch to <code>origin/develop</code> for future <code>git pull</code> and <code>git push</code> operations. The <code>-u</code> option sets up the tracking relationship.</p> <p>Scenario 2: Updating the Upstream Branch for an Existing Local Branch</p> bash<pre><code>git branch --set-upstream-to=origin/feature-branch feature-branch\n</code></pre> <p>Here, we want to change the upstream branch for an existing local branch named <code>feature-branch</code> to <code>origin/feature-branch</code>. The <code>--set-upstream-to</code> option updates the upstream branch for the specified local branch.</p> <p>Scenario 3: Pushing Changes and Setting Upstream in One Step</p> bash<pre><code>git push -u origin new-feature-branch\n</code></pre> <p>In this scenario, we're pushing a new local branch named new-feature-branch to the remote repository for the first time and want to set its upstream branch simultaneously. The <code>-u</code> option accomplishes both tasks in a single command.</p>","tags":["Programming"]},{"location":"blog/2024/01/15/mastering-git-understanding---track-and---set-upstream/#conclusion","title":"Conclusion","text":"<p>Understanding the nuances of <code>--track</code> and <code>--set-upstream</code> is essential for streamlining your Git workflow. Whether you're creating new branches or managing existing ones, these commands help establish and maintain tracking relationships, making collaboration with remote repositories more efficient.</p> <p>Notes</p> <p>The choice between them often comes down to personal preference and the desire for brevity in commands</p>","tags":["Programming"]},{"location":"blog/2024/05/01/gthumb-lightweight-image-editor-in-ubuntu/","title":"gThumb lightweight image editor in ubuntu","text":"","tags":["Linux"]},{"location":"blog/2024/05/01/gthumb-lightweight-image-editor-in-ubuntu/#gthumb-lightweight-image-editor-in-ubuntu","title":"gThumb lightweight image editor in ubuntu","text":"<p>gThumb is a popular image viewer and organizer for the GNOME desktop environment on Linux systems, including Ubuntu. It provides various features for viewing, organizing, and editing images.</p> <p></p> <p>To install gThumb on Ubuntu, you can use the following steps:</p>","tags":["Linux"]},{"location":"blog/2024/05/01/gthumb-lightweight-image-editor-in-ubuntu/#1-using-ubuntu-software-center","title":"1. Using Ubuntu Software Center:","text":"<ul> <li>Open Ubuntu Software Center from the Applications menu.</li> <li>Use the search bar to search for \"gThumb\".</li> <li>Click on the gThumb icon in the search results.</li> <li>Click the \"Install\" button to install it.</li> </ul>","tags":["Linux"]},{"location":"blog/2024/05/01/gthumb-lightweight-image-editor-in-ubuntu/#2-using-terminal","title":"2. Using Terminal:","text":"<ul> <li>Open a terminal window by pressing Ctrl + Alt + T.</li> <li> <p>Type the following command:</p> bash<pre><code>sudo apt update\nsudo apt install gthumb\n</code></pre> </li> <li> <p>Enter your password when prompted, and gThumb will be installed.</p> </li> </ul> <p>Once installed, you can launch gThumb from the Applications menu or by searching for it in the Activities Overview (press the Windows key and type \"gThumb\").</p> <p>With gThumb, you can browse through your image collection, organize them into albums, perform basic editing tasks like cropping and resizing, and even share images directly from the application. It's a versatile tool for managing your image library on Ubuntu.</p>","tags":["Linux"]},{"location":"blog/2024/05/01/gthumb-lightweight-image-editor-in-ubuntu/#reference","title":"Reference","text":"<ul> <li>Is there a lightweight tool to crop images quickly?</li> </ul>","tags":["Linux"]},{"location":"blog/2024/05/05/mkdoc/","title":"Mkdoc","text":"","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#mkdoc","title":"Mkdoc","text":"","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#core","title":"Core","text":"<p>For full documentation visit mkdocs.org.</p>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#deploying-your-docs","title":"Deploying your docs","text":"<p>Deploying</p> <pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\n$ cd ../orgname.github.io/\n$ mkdocs gh-deploy --config-file ../&lt;your-repo&gt;/mkdocs.yml --remote-branch &lt;master&gt;\n</code></pre>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#plugins-used","title":"Plugins Used","text":"<ol> <li>MkDocs</li> <li>Material for MkDocs</li> <li>MkDocs GLightbox</li> <li>MkDocs Video</li> </ol>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#suggestion","title":"Suggestion","text":"<ul> <li>best MkDocs plugins</li> <li> <p>Uick Guide: setup essentials</p> </li> <li> <p>Admonition</p> </li> <li>Admonitions</li> <li>Admonitions 2</li> </ul>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#basic","title":"Basic","text":"","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#installation","title":"Installation","text":"<pre><code>$ pip install mkdocs\n$ mkdocs new my-project\n$ cd my-project\n$ mkdocs serve\n</code></pre>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#theming-our-documentation","title":"Theming our documentation","text":"<pre><code>site_name: MkLorum\nsite_url: https://example.com/\nnav:\n  - Home: index.md\n  - About: about.md\ntheme: readthedocs\n</code></pre>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#building-the-site","title":"Building the site","text":"<pre><code>$ mkdocs build\n</code></pre>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#deploying-your-docs_1","title":"Deploying your docs","text":"<pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\n$ cd ../orgname.github.io/\n$ mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master\n</code></pre>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#material-theme","title":"Material theme","text":"<pre><code># Installing theme only\n$ pip install mkdocs-material\n\n# Next, install the theme and its dependencies with:\n$ pip install -e mkdocs-material\n\n# mkdocs.yml\ntheme:\n  name: material\n\n# glightbox\n$ pip install mkdocs-glightbox\n\n# Add plugin in your mkdocs.yml\nplugins:\n   - glightbox\n</code></pre>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#advanced-mkdocs","title":"Advanced Mkdocs","text":"","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#configure-pages-and-navigation","title":"Configure Pages and Navigation","text":"<pre><code>// A minimal navigation configuration could look like this:\n\nnav:\n  - 'index.md'\n  - 'about.md'\n</code></pre> <pre><code>// override the title in the nav setting add a title right before the filename\n\nnav:\n  - Home: 'index.md'\n  - About: 'about.md'\n</code></pre> <pre><code>// Navigation sub-sections can be created by listing related pages together under a section title\n\nnav:\n  - Home: 'index.md'\n  - 'User Guide':\n    - 'Writing your docs': 'writing-your-docs.md'\n    - 'Styling your docs': 'styling-your-docs.md'\n  - About:\n    - 'License': 'license.md'\n    - 'Release Notes': 'release-notes.md'\n</code></pre>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#formatting","title":"Formatting","text":"<p>Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code># Configuration\n\nmarkdown_extensions:\n  - pymdownx.critic\n  - pymdownx.caret\n  - pymdownx.keys\n  - pymdownx.mark\n  - pymdownx.tilde\n</code></pre>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#highlighting-text","title":"Highlighting Text","text":"<p>When Critic is enabled, Critic Markup can be used, which adds the ability to highlight suggested changes, as well as add inline comments to a document:</p> <pre><code># Text with highlighting\n- ==This was marked==\n- ^^This was inserted^^\n- ~~This was deleted~~\n\n#  Long Highlight \n\n# Sub- and superscripts\n- H~2~O\n- A^T^A\n\n# Keyboard keys\n++ctrl+alt+del++\n</code></pre>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#lists","title":"Lists","text":"<pre><code># Configuration\n\nmarkdown_extensions:\n  - def_list\n  - pymdownx.tasklist:\n      custom_checkbox: true\n</code></pre> <p>When Tasklist is enabled, unordered list items can be prefixed with <code>[ ]</code> to render an unchecked checkbox or <code>[x]</code> to render a checked checkbox, allowing for the definition of task lists:</p> <pre><code># Definition list\n`Lorem ipsum dolor sit amet`\n\n:   Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus\n    tellus non sem sollicitudin, quis rutrum leo facilisis.\n\n# TaskList\n- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre>","tags":["mkdocs","doc"]},{"location":"blog/2024/05/05/mkdoc/#reference","title":"Reference","text":"<ul> <li>mkdocs official site</li> <li>mkdocs material theme</li> <li> <p>mkdocs-glightbox</p> </li> <li> <p>mkdocs navigation configuration</p> </li> <li>mkdocs-glightbox</li> <li>mkdocs-pdf</li> </ul>","tags":["mkdocs","doc"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/","title":"Managing Multiple SSH Keys for Secure and Efficient Remote Access","text":"","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#managing-multiple-ssh-keys-for-secure-and-efficient-remote-access","title":"Managing Multiple SSH Keys for Secure and Efficient Remote Access","text":"<p>In the world of secure remote access, SSH (Secure Shell) plays a pivotal role in connecting to servers and managing systems. As developers and system administrators, it's common to have multiple SSH keys for different projects or environments. In this blog post, we will explore strategies for effectively managing and using multiple SSH keys to enhance security and streamline workflows.</p>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#why-multiple-ssh-keys","title":"Why Multiple SSH Keys?","text":"<p>Before diving into the how-tos, let's briefly discuss why you might need multiple SSH keys. Different projects, clients, or services may require separate authentication credentials for security and access control. Having distinct SSH keys allows you to compartmentalize access and mitigate potential security risks.</p>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#method-1-using-the-i-option","title":"Method 1: Using the -i Option","text":"<p>The simplest and most direct method is to use the -i option with the ssh command. This option specifies the path to the private key you want to use for authentication. Here's an example:</p> <pre><code>ssh -i /path/to/your/private/key/file user@hostname\n</code></pre> <p>Replace <code>/path/to/your/private/key/file</code> with the actual path to your private key and <code>user@hostname</code> with the target server details.</p> <p>This method is effective for one-off connections, but it may become cumbersome when dealing with multiple connections or if you frequently switch between keys.</p>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#method-2-ssh-configuration-file","title":"Method 2: SSH Configuration File","text":"<p>A more elegant and scalable approach is to leverage the SSH configuration file (<code>~/.ssh/config</code>). This file allows you to define host-specific configurations, including the private key to be used for authentication.</p> <ol> <li> <p>Open or create the <code>~/.ssh/config</code> file using a text editor of your choice:</p> <pre><code>nano ~/.ssh/config\n</code></pre> </li> <li> <p>Add an entry for each host or domain along with the <code>IdentityFile</code> option specifying the path to the corresponding private key:</p> <pre><code>Host example.com\n    IdentityFile ~/.ssh/id_rsa_example\n    User your_username\n</code></pre> <p>Replace <code>example.com</code> with the actual hostname, <code>~/.ssh/id_rsa_example</code> with the path to your private key, and <code>your_username</code> with your actual username.</p> </li> <li> <p>Save and exit the editor.</p> </li> <li> <p>Now, you can connect to the specified host using:</p> <pre><code>ssh example.com\n</code></pre> <p>This method offers a clean and organized way to manage multiple SSH keys, especially when dealing with numerous projects or servers.</p> </li> </ol> <p>Notes</p>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#configure-ssh-config-file","title":"Configure SSH config file:","text":"<p>Create or edit the SSH config file at <code>~/.ssh/config</code> using a text editor like <code>nano</code> or <code>vim</code>.</p> <pre><code>nano ~/.ssh/config\n</code></pre> <p>Add the following configuration for each GitHub account:</p> bash<pre><code># Personal account\nHost github.com\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_personal\n\n# Work account\nHost github-work\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_work\n</code></pre> <p>Configuration</p> <ol> <li> <p>Host: </p> <p>This is a custom name you choose to represent the remote server or service. It's like an alias for the actual host you're connecting to. You can name it anything you want, but it's typically chosen to be something memorable or descriptive.</p> </li> <li> <p>HostName: </p> <p>This specifies the <code>actual hostname</code> or <code>IP address</code> of the remote server. For GitHub, the hostname is typically <code>github.com</code>. You can use any hostname that suits your needs, but it should resolve to the correct server.</p> </li> <li> <p>User: </p> <p>This specifies the <code>username</code> you'll use when connecting to the remote server. For GitHub, the username is usually <code>git</code>. This is because when you use SSH to connect to GitHub, you authenticate as the <code>git</code> user. You can't change this unless GitHub allows you to connect with a different username, which is not the case for GitHub.</p> </li> </ol>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#test-your-connections","title":"Test your connections:","text":"<p>Test your connections by running the following commands:</p> <pre><code>ssh -T git@github.com\nssh -T git@github-work\n</code></pre> <p>or, you can only <code>&lt;HOST&gt;</code></p> <pre><code>ssh -T github-work\n</code></pre> <p>You should see messages indicating successful authentication.</p> <p>Now, you should be able to clone, push, and pull repositories from both GitHub accounts using the configured SSH keys. When you clone a repository, use the appropriate hostname defined in your SSH config file, such as <code>github-work</code> for the work account. For example:</p> bash<pre><code>git clone git@github-work:username/repo.git\n</code></pre>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#conclusion","title":"Conclusion","text":"<p>Effectively managing multiple SSH keys is crucial for maintaining a secure and efficient workflow. Whether you choose the straightforward <code>-i</code> option or the more sophisticated SSH configuration file, the key is to organize your keys logically and avoid potential authentication mishaps. By implementing these strategies, you can enhance your remote access security and streamline your daily operations.</p> <p>Remember, security is a priority, and adopting best practices in managing SSH keys contributes significantly to a robust and reliable system.</p>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/05/05/postmen-advanced-topics/","title":"Postmen Advanced Topics","text":"","tags":["postment","api"]},{"location":"blog/2024/05/05/postmen-advanced-topics/#postmen-advanced-topics","title":"Postmen Advanced Topics","text":"<p>In Postman, <code>pm</code> is a global object that provides various functions and methods to interact with the Postman sandbox environment. This object allows you to write scripts to manipulate the request and response, set and get variables, and perform assertions. The pm object is available in both Pre-request Scripts and Test Scripts.</p> <p>Here are some advanced topics in Postman to help you level up your API testing and automation:</p> <ol> <li> <p>Advanced Scripting</p> <ul> <li>Pre-request Scripts: Write JavaScript code to execute before making a request. Useful for setting <code>dynamic parameters</code>, <code>generating tokens</code>, etc.</li> <li>Tests Scripts: Write JavaScript code to validate the response. You can perform assertions, set variables, and chain requests.</li> </ul> </li> <li> <p>Environment and Global Variables</p> <ul> <li>Environment Variables: Define variables specific to an environment (e.g., <code>development</code>, <code>staging</code>, <code>production</code>) to easily switch contexts.</li> <li>Global Variables: Variables accessible in all environments and collections. Useful for storing data that is constant across environments.</li> </ul> </li> <li> <p>Collection Runner and Automation</p> <ul> <li>Collection Runner: Run a collection of requests in a specific order. Useful for running test suites and workflows.</li> <li>Newman: A command-line tool to run Postman collections. It integrates with CI/CD pipelines, allowing automated testing.</li> </ul> </li> <li> <p>Data-Driven Testing</p> <ul> <li>Using CSV/JSON Files: Import CSV or JSON files in the Collection Runner to execute the same requests with different sets of data.</li> <li>Dynamic Variables: Use dynamic variables (like <code>{{$randomInt}}</code>, <code>{{$randomUUID}}</code>) to generate random data for tests.</li> </ul> </li> <li> <p>Chaining Requests</p> <ul> <li>Setting Variables: Capture data from one request and use it in subsequent requests by setting and using variables.</li> <li>Post-Request Scripts: Use test scripts to parse response data and set it as variables for the next request.</li> </ul> </li> <li> <p>Mock Servers</p> <ul> <li>Creating Mocks: Simulate endpoints to test your application without hitting the actual API. Useful for frontend-backend decoupled development.</li> <li>Custom Responses: Define custom responses for different scenarios (e.g., success, error, timeout).</li> </ul> </li> <li> <p>API Documentation</p> <ul> <li>Generating Documentation: Automatically generate and publish documentation for your APIs. Postman can generate markdown or HTML documentation based on your collections.</li> <li>API Versioning: Manage different versions of your API documentation.</li> </ul> </li> <li> <p>Integration with Version Control Systems</p> <ul> <li>Version Control: Use Postman\u2019s integration with Git to version control your collections. Helps maintain history and collaboration on API definitions.</li> </ul> </li> <li> <p>Security Testing</p> <ul> <li>OWASP Testing: Implement tests to check for common vulnerabilities like SQL Injection, XSS, etc.</li> <li>Authorization Testing: Test different authorization mechanisms like <code>OAuth</code>, <code>JWT</code>, <code>API Keys</code>.</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>Uptime Monitoring: Schedule and run collections periodically to ensure your APIs are up and running.</li> <li>Performance Monitoring: Measure response times and other performance metrics over time.</li> </ul> </li> <li> <p>Advanced Assertions</p> <ul> <li>Chai Assertions: Use the Chai assertion library (integrated with Postman) for more complex assertions.</li> <li>Custom Functions: Write custom JavaScript functions for reusable validation logic.</li> </ul> </li> <li> <p>Visualizing Response Data</p> <ul> <li>Postman Visualizer: Create custom visualizations of response data using HTML and JavaScript. Useful for interpreting and presenting data.</li> </ul> </li> <li> <p>GraphQL Support</p> <ul> <li>Query Execution: Support for making GraphQL queries and mutations.</li> <li>GraphQL Variables: Use variables in GraphQL queries for dynamic data.</li> </ul> </li> <li> <p>Postman Flows</p> <ul> <li>Building Workflows: Use the Postman Flows feature to create and automate workflows visually, connecting requests and logic blocks.</li> </ul> </li> <li> <p>Integrations</p> <ul> <li>Third-party Integrations: Integrate Postman with tools like <code>Jenkins</code>, <code>Slack</code>, <code>Datadog</code>, and more for enhanced functionality.</li> </ul> </li> </ol> <p>These advanced features of Postman help you perform more thorough and efficient API testing and automation, improving your overall development and testing workflows.</p> pm Methods and Attributes <p>The pm object in Postman provides a comprehensive set of methods and attributes to interact with the Postman runtime environment. Here is a detailed list of the main methods and attributes available within the pm object:</p> VariablesEnvironmentRequest and ResponseAssertions and TestsSending Requests <p>pm.variables: Methods to interact with the variable scope (local, environment, global, data).</p> <ul> <li><code>pm.variables.get(variableName)</code>: Get the value of a variable from the current scope.</li> <li><code>pm.variables.set(variableName, variableValue)</code>: Set the value of a variable in the current scope.</li> </ul> <p>pm.environment: Methods to interact with environment variables.</p> <ul> <li><code>pm.environment.get(variableName)</code>: Get the value of an environment variable.</li> <li><code>pm.environment.set(variableName, variableValue)</code>: Set the value of an environment variable.</li> <li><code>pm.environment.unset(variableName)</code>: Remove an environment variable.</li> <li><code>pm.environment.clear()</code>: Clear all environment variables.</li> </ul> <p>Methods to manage environment variables.</p> <ul> <li><code>pm.environment.set(variableName, variableValue)</code>: Set an environment variable.</li> <li><code>pm.environment.get(variableName)</code>: Get an environment variable.</li> <li><code>pm.environment.unset(variableName)</code>: Unset an environment variable.</li> </ul> <p>pm.request: Methods to interact with the request object.</p> <ul> <li><code>pm.request.url</code>: Get or set the request URL.</li> <li> <p><code>pm.request.headers</code>: Access the request headers.</p> <ul> <li><code>pm.request.headers.add(headerObject)</code>: Add a header to the request.</li> <li><code>pm.request.headers.remove(headerName)</code>: Remove a header from the request.</li> </ul> </li> </ul> <p>pm.response: Methods to interact with the response object.</p> <ul> <li><code>pm.response.json()</code>: Parse the response as JSON.</li> <li><code>pm.response.text()</code>: Get the response body as plain text.</li> <li><code>pm.response.code</code>: Get the response status code.</li> <li><code>pm.response.headers</code>: Access the response headers.</li> <li><code>pm.response.time()</code>: Get the response time.</li> </ul>","tags":["postment","api"]},{"location":"blog/2024/05/05/postmen-advanced-topics/#reference","title":"Reference","text":"<ul> <li>postman docs</li> <li>postman tutorial: javatpoint</li> <li>post mock server: geeksforgeeks</li> <li>postman :tutorialspoint</li> </ul>","tags":["postment","api"]},{"location":"blog/2024/01/04/automatically-set-bearer-token-in-global-variable-postman-after-login-api/","title":"Automatically set Bearer Token in global variable postman after Login api","text":"","tags":["Postman"]},{"location":"blog/2024/01/04/automatically-set-bearer-token-in-global-variable-postman-after-login-api/#automatically-set-bearer-token-in-global-variable-postman-after-login-api","title":"Automatically set Bearer Token in global variable postman after Login api","text":"<p>In Postman, <code>pm</code> is a built-in JavaScript object that provides access to the Postman API. It allows you to interact with and manipulate the data and features within the Postman environment during the execution of pre-request scripts and tests.</p> <p>ALL YOU NEED 2 lines of code</p> <pre><code>// Stores the access token in an environment or global variable\nvar accessToken = pm.response.json().access;\n\n// It set in the global enviroment variable named `accessToken`\npm.globals.set(\"accessToken\", accessToken);\n\n// if you want to set in local enviroment variable named `TOKEN`\npm.environment.set(\"TOKEN\", token);\n</code></pre> <p>Here are some common uses of <code>pm</code> in Postman:</p> <ul> <li> <p><code>pm.environment</code>: This property allows you to access and manipulate environment variables. For example, you can use pm.environment.get(\"variableName\") to retrieve the value of an environment variable.</p> </li> <li> <p><code>pm.globals</code>: This property is similar to pm.environment, but it deals with global variables.</p> </li> <li> <p><code>pm.request</code>: This property provides information about the current request being sent, allowing you to modify request details dynamically.</p> </li> <li> <p><code>pm.response</code>: This property provides information about the response received after sending a request, allowing you to extract data or perform tests on the response.</p> </li> <li> <p><code>pm.sendRequest</code>: This method allows you to send additional HTTP requests from within your scripts.</p> </li> </ul> <p>Here's a simple example using pm.environment:</p> <pre><code>// Get the value of the \"TOKEN\" variable in the current environment\nvar token = pm.environment.get(\"TOKEN\");\n\n// Log the token to the console\nconsole.log(\"Token:\", token);\n</code></pre> <p>In this example, <code>pm.environment.get(\"TOKEN\")</code> is used to retrieve the value of the \"TOKEN\" variable in the current environment. The retrieved value is then logged to the console using <code>console.log</code>.</p> <p>Testing in Postman</p> <p>The Tests tab allows for any post-processing after a request is sent and includes the ability to write tests for assessing response data. The Test tab sandbox has the Chai.js library built in, so you can use Chai's behavior-driven development (BDD) syntax to create readable test assertions.</p> <pre><code>pm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"Response has access and refresh properties\", function () {\n  var res = pm.response.json();\n  pm.expect(res).to.have.property(\"access\");\n  pm.expect(res).to.have.property(\"refresh\");\n});\n\npm.test(\"Access property has a length greater than 0\", function () {\n  var res = pm.response.json();\n  pm.expect(res.access).to.have.lengthOf.above(0);\n});\n</code></pre>","tags":["Postman"]},{"location":"blog/2024/01/04/automatically-set-bearer-token-in-global-variable-postman-after-login-api/#reference","title":"Reference","text":"<ul> <li>Set Bearer Token as Environment Variable in Postman for All APIs</li> <li>How do i set up a bearer token in postman from an environment variable?</li> <li> <p>How to automatically set a Bearer Token for your Postman requests?</p> </li> <li> <p>Write API test scripts in Postman</p> </li> <li>Postman Test script examples</li> <li>Api Testing in postmen </li> </ul>","tags":["Postman"]},{"location":"blog/2024/05/03/removing-tracked-files-and-directories-in-git/","title":"Removing Tracked Files and Directories in Git","text":"","tags":["git","tracking"]},{"location":"blog/2024/05/03/removing-tracked-files-and-directories-in-git/#removing-tracked-files-and-directories-in-git","title":"Removing Tracked Files and Directories in Git","text":"<p>In the world of software development, effective use of version control is crucial. Git, with its powerful features, helps teams manage code changes seamlessly. However, scenarios arise where files or directories mistakenly added to Git need to be removed from tracking without deleting them locally. Let's delve into how to manage this situation effectively.</p>","tags":["git","tracking"]},{"location":"blog/2024/05/03/removing-tracked-files-and-directories-in-git/#understanding-git-tracking","title":"Understanding Git Tracking","text":"<p>Git tracks changes to files and directories once they are committed. Sometimes, sensitive files like configuration files or temporary directories (e.g., venv for Python virtual environments) are inadvertently added. To prevent these from being tracked further while keeping them in your local environment, specific steps are required.</p>","tags":["git","tracking"]},{"location":"blog/2024/05/03/removing-tracked-files-and-directories-in-git/#steps-to-remove-tracked-files-or-directories","title":"Steps to Remove Tracked Files or Directories","text":"<ol> <li> <p>Update <code>.gitignore</code>:</p> <p>Start by updating the .gitignore file to prevent the file or directory from being tracked in future commits. This step ensures that Git ignores any changes made to these entries.</p> <p>Tip</p> <pre><code># Add entry to .gitignore\nvenv/\n</code></pre> </li> <li> <p>Remove from Git Cache:</p> <p>Use the <code>git rm command</code> with the <code>--cached</code> option to remove the file or directory from Git's index without deleting it from your local system. If removing a directory and its contents, ensure to use the <code>-r</code> (recursive) flag.</p> <p>Tip</p> <pre><code>git rm --cached venv              # For a file\ngit rm -r --cached venv/          # For a directory and its contents\n</code></pre> </li> <li> <p>Commit the Changes:</p> <p>Once removed from the index, commit the changes to your repository. This step records the removal of the file or directory from Git tracking.</p> <p>Tip</p> <pre><code>git commit -m \"Removed venv directory from tracking\"\n</code></pre> </li> <li> <p>Push to Remote Repository (if applicable):</p> <p>If your repository is remote (e.g., GitHub), push the committed changes to update the remote repository.</p> <p>Tip</p> <pre><code>git push origin main             # Replace 'main' with your branch name\n</code></pre> </li> </ol>","tags":["git","tracking"]},{"location":"blog/2024/05/03/removing-tracked-files-and-directories-in-git/#conclusion","title":"Conclusion","text":"<p>By following these steps, you can effectively manage and remove files or directories from Git tracking while preserving them in your local environment. This approach ensures a clean and organized version control system, improving collaboration and maintaining code integrity across projects. Remember, Git's flexibility empowers developers to maintain control over their codebase efficiently.</p>","tags":["git","tracking"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/","title":"How to Add SSH Keys to Your GitHub Account","text":"","tags":["Programming"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/#how-to-add-ssh-keys-to-your-github-account","title":"How to Add SSH Keys to Your GitHub Account","text":"<p>SSH, which stands for Secure Shell, is a cryptographic network protocol used to securely access and manage network devices and servers over a potentially unsecured network. It provides a secure way to log into and communicate with a remote machine, allowing users to execute commands on the remote machine and transfer files between the local and remote machines.</p> <p>Key-based Authentication:</p> <p>Using SSH keys is a more secure and convenient way to authenticate without entering a password every time.</p> BeginnerMultiple Accounts (Advanced) <p>Generating SSH Keys</p> <ol> <li> <p>Generate SSH Keys for Each GitHub Account:</p> <ul> <li>Open a Git Bash terminal on your Windows machine.</li> <li>Generate a new SSH key for each GitHub account:</li> </ul> bash<pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre> <p>Provide a unique name for each key pair, for example, <code>id_rsa_personal</code> and <code>id_rsa_work</code>.</p> </li> <li> <p>Add SSH Keys to the SSH Agent:</p> <ul> <li>Start the SSH agent:</li> </ul> bash<pre><code>eval $(ssh-agent -s)\n</code></pre> <ul> <li>Add your private keys to the SSH agent:</li> </ul> bash<pre><code>ssh-add ~/.ssh/id_rsa_personal\nssh-add ~/.ssh/id_rsa_work\n</code></pre> </li> <li> <p>Configure SSH Config File:</p> <ul> <li>Create or edit the ~/.ssh/config file using a text editor:</li> </ul> bash<pre><code>nano ~/.ssh/config\n</code></pre> <ul> <li>Add the following configuration to associate each SSH key with the respective GitHub account:</li> </ul> plaintext<pre><code># Personal GitHub account\nHost github.com\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_personal\n\n# Work GitHub account\nHost github-work\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_work\n</code></pre> <p>Make sure to replace <code>id_rsa_personal</code> and <code>id_rsa_work</code> with your actual key filenames.</p> </li> <li> <p>Update Git Config:</p> <ul> <li>Configure your global Git settings to use the specified hosts:</li> </ul> bash<pre><code>git config --global user.name \"Your Personal Name\"\ngit config --global user.email \"your_email@example.com\"\n</code></pre> <p>Repeat the above command with the appropriate values for your work account.</p> </li> <li> <p>Test SSH Connection:</p> <p>Test the SSH connection to GitHub:</p> bash<pre><code>ssh -T git@github.com\n</code></pre> </li> </ol> <p>Adding SSH in Github</p> <ol> <li> <p>Copy the SSH Public Key:</p> <p>Copy the contents of your SSH public key for each account. You can use the following command to print the public key to the terminal:</p> bash<pre><code>cat ~/.ssh/id_rsa_personal.pub\n</code></pre> bash<pre><code>cat ~/.ssh/id_rsa_work.pub\n</code></pre> </li> <li> <p>Add SSH Key to GitHub:</p> <ul> <li>Log in to your GitHub account.</li> <li>Navigate to \"Settings\" &gt; \"SSH and GPG keys.\"</li> <li>Click on \"New SSH key\" or \"Add SSH key.\"</li> <li>Provide a title (e.g., \"Personal SSH Key\" or \"Work SSH Key\").</li> <li>Paste the copied public key into the \"Key\" field.</li> <li>Click \"Add SSH Key\" or \"Save SSH Key.\"</li> <li>Repeat the process for both your personal and work GitHub accounts.</li> </ul> </li> </ol> <p>Now, when you interact with GitHub using Git commands over SSH, GitHub will recognize your SSH keys and authenticate your access.</p> <p>Git Config</p> <ol> <li> <p>Set Up Global Git Config:</p> bash<pre><code>git config --global user.name \"Your Personal Name\"\ngit config --global user.email \"personal@gmail.com\"\n</code></pre> </li> <li> <p>Set Up Local Git Config for Work Repositories:</p> bash<pre><code>cd /path/to/work/repo\ngit config user.name \"Your Work Name\"\ngit config user.email \"work@gmail.com\"\n</code></pre> </li> </ol> <p>Notes</p> bash<pre><code>git config --global --get user.name\ngit config --global --get user.email\n</code></pre>","tags":["Programming"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/#step-1-generate-ssh-key","title":"Step 1: Generate SSH Key","text":"<ol> <li> <p>Open a terminal on your local machine.</p> </li> <li> <p>Run the following command to generate a new SSH key. Replace \"your_email@example.com\" with your actual GitHub email address.</p> bash<pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre> <p>Press Enter to accept the default file location (<code>~/.ssh/id_rsa</code>) and optionally set a passphrase for additional security.</p> </li> </ol>","tags":["Programming"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/#step-2-add-ssh-key-to-ssh-agent","title":"Step 2: Add SSH Key to SSH Agent","text":"<ol> <li> <p>Start the SSH agent:</p> bash<pre><code>eval $(ssh-agent -s)\n</code></pre> </li> <li> <p>Add your SSH private key to the SSH agent:</p> bash<pre><code>ssh-add ~/.ssh/id_rsa\n</code></pre> </li> </ol>","tags":["Programming"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/#step-3-add-ssh-key-to-github","title":"Step 3: Add SSH Key to GitHub","text":"<ol> <li> <p>Display the contents of your public key:</p> bash<pre><code>cat ~/.ssh/id_rsa.pub\n</code></pre> <p>Copy the entire key that is displayed in the terminal.</p> </li> <li> <p>Open your GitHub account in a web browser.</p> </li> <li>Go to \"Settings\" &gt; \"SSH and GPG keys\" &gt; \"New SSH key.\"</li> <li>Paste your SSH key into the \"Key\" field, give it a title (for example, \"My SSH Key\"), and click \"Add SSH Key.\"</li> </ol>","tags":["Programming"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/#step-4-test-ssh-connection","title":"Step 4: Test SSH Connection","text":"<p>To verify that everything is set up correctly, you can test the SSH connection to GitHub:</p> bash<pre><code>ssh -T git@github.com\n</code></pre> <p>If successful, you will see a message indicating that you've successfully authenticated.</p>","tags":["Programming"]},{"location":"blog/2024/04/26/navigating-tmux-a-quick-guide-to-swapping-windows/","title":"Navigating Tmux: A Quick Guide to Swapping Windows","text":"","tags":["Tmux"]},{"location":"blog/2024/04/26/navigating-tmux-a-quick-guide-to-swapping-windows/#navigating-tmux-a-quick-guide-to-swapping-windows","title":"Navigating Tmux: A Quick Guide to Swapping Windows","text":"<p>In Tmux, swapping windows means switching the positions of two windows within the same session. Here's how you can swap windows:</p> <p>Note</p> <ol> <li> <p>Enter Tmux command mode:</p> <p>Press Ctrl + b (the default prefix) followed by :. You'll see a prompt at the bottom of the screen.</p> </li> <li> <p>Enter the swap-window command:</p> <p>Type swap-window -s <code>&lt;source-index&gt;</code> -t <code>&lt;target-index&gt;</code> and press Enter.</p> <ul> <li><code>&lt;source-index&gt;</code>: The index of the window you want to swap.</li> <li><code>&lt;target-index&gt;</code>: The index of the window you want to swap with.</li> </ul> <p>For example, if you want to swap the window at index <code>1</code> with the window at index <code>3</code>, you would type:</p> bash<pre><code>swap-window -s 1 -t 3\n</code></pre> </li> <li> <p>Verify the swap:</p> <p>After executing the command, the positions of the windows will be swapped.</p> </li> </ol> <p>This command can also be abbreviated as swapw for convenience:</p> bash<pre><code>:swapw -s &lt;source-index&gt; -t &lt;target-index&gt;\n</code></pre>","tags":["Tmux"]},{"location":"blog/2024/04/26/navigating-tmux-a-quick-guide-to-swapping-windows/#reference","title":"Reference","text":"","tags":["Tmux"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/","title":"Understanding the SSH Agent: Why It Matters in Managing SSH Keys","text":"","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys","title":"Understanding the SSH Agent: Why It Matters in Managing SSH Keys","text":"<p>Secure Shell (SSH) is a widely used protocol for secure communication over a computer network. It provides a secure way to access remote servers, transfer files, and execute commands. When working with multiple SSH keys for different purposes or accounts, it becomes essential to use an SSH agent. This blog post explores the significance of the SSH agent and why it is crucial in managing SSH keys.</p>","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#what-is-an-ssh-agent","title":"What is an SSH Agent?","text":"<p>An SSH agent is a background process that manages SSH keys and handles the authentication process. It securely stores private keys and provides a convenient way to use them without repeatedly entering passphrases. The agent acts as a key manager, allowing users to add, remove, and list keys, simplifying the authentication process.</p>","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#why-do-we-need-to-start-the-ssh-agent","title":"Why Do We Need to Start the SSH Agent?","text":"<ol> <li> <p>Password-less Authentication</p> <p>One of the primary reasons to use an SSH agent is to enable password-less authentication. When you generate an SSH key pair, it consists of a public key (which is shared with servers) and a private key (which should be kept secure on your machine). The private key is often encrypted with a passphrase for an additional layer of security.</p> <p>The SSH agent allows you to load your private key into memory, eliminating the need to enter the passphrase each time you connect to a remote server. This enhances security by avoiding the risk of exposing the passphrase while making the authentication process more seamless.</p> </li> <li> <p>Managing Multiple SSH Keys</p> <p>In a professional or personal setting, individuals often work with multiple SSH keys, especially when dealing with various accounts or projects. The SSH agent simplifies the management of these keys by allowing you to add multiple keys and choose which one to use for a particular connection.</p> </li> <li> <p>Avoiding Key Exhaustion</p> <p>SSH clients typically limit the number of authentication attempts in a given time frame. Without an SSH agent, each connection attempt may consume an authentication attempt, leading to temporary lockouts. The agent helps prevent key exhaustion by handling authentication efficiently.</p> </li> </ol>","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#how-to-start-the-ssh-agent","title":"How to Start the SSH Agent","text":"<p>To start the SSH agent, use the following command:</p> bash<pre><code>eval \"$(ssh-agent -s)\"\n</code></pre> <p>This command initializes the agent and prints environment variables to set up the agent's connection to the shell.</p>","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#adding-keys-to-the-ssh-agent","title":"Adding Keys to the SSH Agent","text":"<p>Once the agent is running, you can add your SSH keys using the <code>ssh-add</code> command. For example:</p> bash<pre><code>ssh-add ~/.ssh/id_rsa_personal\nssh-add ~/.ssh/id_rsa_work\n</code></pre> <p>This step ensures that the keys are loaded into the agent and ready for use.</p> <p>Notes</p> <p>Now, you can check the loaded keys using:</p> bash<pre><code>ssh-add -l\n</code></pre> <p>This should display the fingerprints of the SSH keys that are currently added to the agent.</p> <p>After starting the SSH agent and adding the keys, you can proceed to test the SSH connection to GitHub using the <code>ssh -T</code> command.</p> <p>Tips</p> <p>If you're using a shell that supports automatic SSH agent startup (like bash or zsh), you might want to add the following lines to your shell profile file (e.g., <code>~/.bashrc</code>, <code>~/.zshrc</code>) to ensure the agent is automatically started when you open a new terminal session:</p> bash<pre><code>if [ -z \"$SSH_AUTH_SOCK\" ] ; then\n  eval $(ssh-agent -s)\nfi\n</code></pre> <p>After making these changes, restart your terminal or run <code>source ~/.bashrc</code> (or <code>source ~/.zshrc</code> for zsh users) to apply the changes. Then, try running <code>ssh-add -l</code> again to ensure the agent is running and the keys are loaded.</p>","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#conclusion","title":"Conclusion","text":"<p>In conclusion, the SSH agent plays a crucial role in enhancing the security and convenience of SSH key management. By eliminating the need to repeatedly enter passphrases and facilitating the use of multiple keys, the SSH agent streamlines the authentication process for a more efficient and secure workflow.</p> <p>Understanding the importance of the SSH agent is key to optimizing your SSH key management strategy, especially in scenarios involving multiple accounts or projects. By leveraging the capabilities of the SSH agent, you can enjoy a smoother and more secure SSH experience.</p>","tags":["Programming","SSH"]},{"location":"career/formula/","title":"Formula","text":""},{"location":"career/formula/#10000-hours","title":"10,000 hours","text":"<p>To calculate how many days it will take to reach 10,000 hours of coding if you code 8 hours a day, you can use a simple formula:</p> <p>Formula:</p> <p> \\text{Number of Days} = \\frac{\\text{Total Hours}}{Hours Per Day} </p> <p>Example:</p> <p> \\text{Number of Years} = \\frac{\\text{10,000}}{8} = 1,250\u00a0days </p> <p>So, if you spend 8 hours a day coding, it will take you 1,250 days to reach 10,000 hours of coding.</p>"},{"location":"career/formula/#salary-increment-calculations","title":"Salary Increment Calculations","text":""},{"location":"career/formula/#increment-amount","title":"Increment Amount","text":"<p>To calculate the amount of salary increment, use the following formula:</p>  \\text{Increment Amount} = \\text{Current Salary} \\times \\left(\\frac{\\text{Percentage Increase}}{100}\\right)  <p>For example, if your current salary is $50,000 and the percentage increase is 5%, then:</p>  \\text{Increment Amount} = 50{,}000 \\times \\left(\\frac{5}{100}\\right) = 50{,}000 \\times 0.05 = 2{,}500"},{"location":"career/formula/#new-salary","title":"New Salary","text":"<p>To find the new salary after the increment, use:</p>  \\text{New Salary} = \\text{Current Salary} + \\text{Increment Amount}  <p>Using the previous example:</p>  \\text{New Salary} = 50{,}000 + 2{,}500 = 52{,}500"},{"location":"career/formula/#percentage-increase","title":"Percentage Increase","text":"<p>To calculate the percentage increase if you know the increment amount:</p>  \\text{Percentage Increase} = \\left(\\frac{\\text{Increment Amount}}{\\text{Current Salary}}\\right) \\times 100  <p>For example, if the increment amount is $2,500 and the current salary is $50,000:</p>  \\text{Percentage Increase} = \\left(\\frac{2{,}500}{50{,}000}\\right) \\times 100 = 0.05 \\times 100 = 5\\%"},{"location":"career/formula/#theory-behind-increment","title":"Theory behind increment","text":"<p>The relationship between salary and salary increment is not strictly linear but depends on the percentage increase applied. Here\u2019s a breakdown of how salary increments generally work:</p>"},{"location":"career/formula/#1-percentage-based-increment","title":"1. Percentage-Based Increment","text":"<p>Most salary increments are calculated as a percentage of the current salary. This means that:</p> <ul> <li>Higher Salary = Higher Increment Amount: If the percentage increase is the same, a higher salary will result in a higher increment amount because the increment is a percentage of the current salary.</li> </ul> <p>Formula:</p>  \\text{Increment Amount} = \\text{Current Salary} \\times \\left(\\frac{\\text{Percentage Increase}}{100}\\right)  <p>Example:</p> <ul> <li>Current Salary: $50,000</li> <li> <p>Percentage Increase: 5%</p>  \\text{Increment Amount} = \\text{50,000} \\times \\left(\\frac{\\text{5}}{100}\\right)   \\text{Increment Amount} = 50{,}000 \\times 0.05 = 2{,}500  </li> <li> <p>Current Salary: $100,000</p> </li> <li> <p>Percentage Increase: 5%</p>  \\text{Increment Amount} = \\text{100,000} \\times \\left(\\frac{\\text{5}}{100}\\right)   \\text{Increment Amount} = 100{,}000 \\times 0.05 = 5{,}000  </li> </ul>"},{"location":"career/formula/#2-fixed-increment-amount","title":"2. Fixed Increment Amount","text":"<p>In some cases, the increment might be a fixed amount rather than a percentage. For example:</p> <ul> <li>Increment Amount: $3,000 (regardless of current salary)</li> </ul> <p>Example:</p> <ul> <li> <p>Current Salary: $50,000</p> <pre><code>New\u00a0Salary = $50,000 + $3,000 = $53,000\n</code></pre> </li> <li> <p>Current Salary: $100,000</p> <pre><code>New\u00a0Salary = $100,000 + $3,000 = $103,000\n</code></pre> </li> </ul> <p>In this scenario, the increment amount remains the same regardless of the current salary, so the impact on the new salary is proportional to the original salary.</p>"},{"location":"career/formula/#3-increment-based-on-performance-or-role","title":"3. Increment Based on Performance or Role","text":"<p>Sometimes, increments are influenced by factors such as:</p> <ul> <li>Performance: Higher performance or meeting certain targets can result in a higher percentage increase or fixed increment.</li> <li>Role Changes: A promotion or taking on more responsibilities might lead to a higher increment.</li> <li>Market Rates: Increases might be adjusted based on industry standards or cost of living adjustments.</li> </ul>"},{"location":"career/formula/#summary","title":"Summary","text":"<ul> <li> <p>Percentage Increase: The increment amount increases with the salary if the percentage increase is constant. A higher salary means a higher increment amount due to the percentage being applied to a larger base.</p> </li> <li> <p>Fixed Amount: The increment amount is the same regardless of the salary. This approach doesn\u2019t directly relate to the salary size but provides a uniform increase.</p> </li> <li> <p>Performance-Based: Increments can vary based on performance evaluations or role changes, potentially leading to larger increases for higher achievers or those taking on greater responsibilities.</p> </li> </ul> <p>In essence, while a higher salary results in a higher increment amount when the increment is percentage-based, a fixed increment amount does not change with salary size.</p>"},{"location":"career/formula/#question","title":"Question","text":"<p>As a React developer looking to enhance your performance and potentially increase your salary, you can focus on several areas to add value to your role and stand out in your company. Here\u2019s a structured approach to achieving this:</p> <ol> <li> <p>Enhance Your Technical Skills</p> <p>a.  Deepen React Knowledge:</p> <ul> <li>Advanced React Concepts: Master hooks, context API, concurrent mode, and React Suspense.</li> <li>Performance Optimization: Learn about memoization, lazy loading, and optimizing component re-renders.</li> <li>State Management: Get proficient with tools like Redux, MobX, or Zustand.</li> </ul> <p>b. Expand Your JavaScript Skills:</p> <ul> <li>Modern JavaScript: Stay updated with ES6+ features and async/await.</li> <li>TypeScript: Integrate TypeScript for better type safety and maintainability.</li> </ul> <p>c. Backend and Full-Stack Skills:</p> <ul> <li>API Integration: Improve your skills in integrating with RESTful APIs and GraphQL.</li> <li>Server-Side Rendering (SSR): Learn about frameworks like Next.js for better performance and SEO.</li> </ul> <p>d. Testing:</p> <ul> <li>Unit Testing: Master Jest and React Testing Library for reliable tests.</li> <li>End-to-End Testing: Use Cypress or Playwright for comprehensive testing.</li> </ul> </li> <li> <p>Improve Your Workflow</p> <p>a. Code Quality:</p> <ul> <li>Code Reviews: Regularly review your code and others' code to learn best practices and improve quality.</li> <li>Linting and Formatting: Use tools like ESLint and Prettier to maintain consistent code quality.</li> </ul> <p>b. Performance Optimization:</p> <ul> <li>Profiling: Use React DevTools and other profiling tools to identify and fix performance bottlenecks.</li> <li>Efficient Rendering: Optimize component rendering and avoid unnecessary re-renders.</li> </ul> <p>c. Development Practices:</p> <ul> <li>Version Control: Use Git effectively, including branching strategies and pull requests.</li> <li>CI/CD: Understand and contribute to continuous integration and deployment processes.</li> </ul> </li> <li> <p>Contribute to Projects and Team</p> <p>a. Take Ownership:</p> <ul> <li>Lead Features: Volunteer to lead or contribute to major features or critical components.</li> <li>Mentorship: Mentor junior developers or interns, sharing your expertise and helping them grow.</li> </ul> <p>b. Documentation and Knowledge Sharing:</p> <ul> <li>Document: Write and maintain documentation for your code and projects.</li> <li>Share Knowledge: Conduct internal tech talks or workshops to share new technologies and best practices with the team.</li> </ul> <p>c. Improve Processes:</p> <ul> <li>Suggest Improvements: Identify areas for process improvements or new tools that can enhance productivity.</li> </ul> </li> <li> <p>Demonstrate Impact</p> <p>a. Showcase Achievements:</p> <ul> <li>Quantify Success: Highlight how your contributions have positively impacted the project or company (e.g., performance improvements, successful feature launches).</li> <li>Feedback: Gather positive feedback from peers and stakeholders.</li> </ul> <p>b. Personal Development:</p> <ul> <li>Certifications and Courses: Pursue relevant certifications or courses to enhance your skills and credibility.</li> <li>Conferences and Meetups: Attend or speak at industry conferences and meetups to stay current and network with other professionals.</li> </ul> </li> <li> <p>Communicate and Negotiate</p> <p>a. Regular Check-ins:</p> <ul> <li>Performance Reviews: Prepare for performance reviews by documenting your contributions and improvements.</li> <li>Career Goals: Discuss your career goals and progression with your manager.</li> </ul> <p>b. Negotiate Salary:</p> <ul> <li>Market Research: Research market rates for your role and experience level.</li> <li>Prepare a Case: Present your case for a salary increase based on your achievements, contributions, and market research.</li> </ul> </li> </ol> <p>Summary</p> <p>To enhance your performance as a React developer and increase your salary:</p> <ol> <li>Enhance Technical Skills: Master advanced React concepts, modern JavaScript, and testing tools.</li> <li>Improve Workflow: Focus on code quality, performance optimization, and effective development practices.</li> <li>Contribute to Projects and Team: Take ownership, mentor others, and suggest improvements.</li> <li>Demonstrate Impact: Showcase your achievements, gather feedback, and pursue personal development.</li> <li>Communicate and Negotiate: Prepare for performance reviews and negotiate your salary based on your contributions and market research.</li> </ol> <p>By excelling in these areas, you'll not only improve your value to the company but also position yourself for career advancement and salary increases.</p>"},{"location":"career/study-technique/","title":"Study Technique","text":""},{"location":"career/study-technique/#study-technique","title":"Study technique","text":"<ol> <li>Spaced Repetition    Spaced repetition, sometimes called <code>spaced practice</code>, <code>interleaved practice</code>, or <code>spaced retrieval</code>, is a study method that involves separating your study sessions into spaced intervals.</li> </ol> <p>One of the most popular examples of spaced repetition algorithms is <code>Anki</code>, based on another popular algorithm, <code>SuperMemo</code>.</p> <p></p>"},{"location":"career/study-technique/#space-repetition","title":"space-repetition","text":""},{"location":"career/study-technique/#reference","title":"Reference","text":"<ul> <li>The 7 Best Study Methods for All Types of Students</li> </ul>"},{"location":"career/certification/intro/","title":"Intro","text":"<p>fasdf</p>"},{"location":"career/certification/python/","title":"Python","text":"<p>PCEP\u2122 \u2013 Certified Entry-Level Python Programmer</p> <p></p> <p></p>"},{"location":"career/certification/python/#reference","title":"Reference","text":"<ul> <li>python certification: pcep</li> </ul>"},{"location":"career/certification/react/","title":"React","text":"<p>sdf</p>"},{"location":"career/interviewquestion/django/","title":"DJANO Interview Question","text":""},{"location":"career/interviewquestion/javascript/","title":"JavaScript","text":"<p>Core Begineer</p>"},{"location":"career/interviewquestion/javascript/#1-difference-between-defer-and-async-attributes-in-javascript","title":"1. Difference between <code>defer</code> and <code>async</code> attributes in JavaScript?","text":"<p>The main difference between defer and async is the order of execution.</p> <p>Defer attribute</p> <p>A <code>&lt;script&gt;</code> element with a <code>defer</code> attribute, it will continue to load the HTML page and render it while the script is being downloaded. The script is executed after the HTML page has been completely parsed. <code>defer</code> scripts maintain their order in the document.</p> <pre><code>&lt;script defer src=\"script1.js\"&gt;&lt;/script&gt;\n&lt;script defer src=\"script2.js\"&gt;&lt;/script&gt;\n</code></pre> <p>In the example above, <code>script1.js</code> will be executed before <code>script2.js</code>. The browser will download both scripts in parallel, but <code>script1.js</code> will be executed after the HTML page has been parsed and <code>script2.js</code> will be executed after script1.js has been executed.</p> <p>Async attribute</p> <p>On the other hand, A <code>&lt;script&gt;</code> element with an <code>async</code> attribute, it will pause the HTML parser and execute the script immediately after it has been downloaded. The HTML parsing will resume after the script has been executed.</p> <pre><code>&lt;script async src=\"script1.js\"&gt;&lt;/script&gt;\n&lt;script async src=\"script2.js\"&gt;&lt;/script&gt;\n</code></pre> <p>In the example above, the browser will download both scripts in parallel, and execute them as soon as they are downloaded. The order of execution is not guaranteed.</p> <p>To know more you can check this diagram from us that explains the difference between <code>defer</code> and <code>async</code> in a visual way.</p>"},{"location":"career/interviewquestion/javascript/#2-is-it-possible-to-run-javascript-outside-the-browser","title":"2. Is it possible to run JavaScript outside the browser?","text":"<p>Yes, it is possible to run JavaScript outside the browser. There are several ways to run JavaScript outside the browser. You can use Node.js, Deno, Bun, or any other JavaScript runtime environment.</p>"},{"location":"career/interviewquestion/javascript/#3-how-to-parse-json-in-javascript","title":"3. How to parse JSON in JavaScript?","text":"<p>In order to parse JSON, you can use the <code>JSON.parse()</code> method. It parses a JSON string and returns the JavaScript equivalent.</p> <pre><code>const json = '{\"name\":\"JavaScript\",\"year\":1995}';\nconst roadmap = JSON.parse(json);\n\nconsole.log(roadmap.name); // JavaScript\nconsole.log(roadmap.year); // 1995\n</code></pre> <p>Core\u00b7Intermediate*</p>"},{"location":"career/interviewquestion/javascript/#1-what-is-ternary-operator-in-javascript","title":"1. What is ternary operator in JavaScript?","text":"<p>The ternary operator is a conditional operator that takes three operands. It is frequently used as a shortcut for the if statement.</p> <pre><code>console.log(condition ? true : false);\n</code></pre>"},{"location":"career/interviewquestion/javascript/#2-does-map-method-mutate-the-original-array","title":"2. Does <code>map()</code> method mutate the original array?","text":"<p>No, the <code>map() method</code> does not mutate the original array. It returns a new array with the results of calling a provided function on every element in the calling array.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\n\nconst renamedRoadmaps = roadmaps.map((roadmap) =&gt; {\n  return `${roadmap} Roadmap`;\n});\n\nconsole.log(roadmaps); // ['JavaScript', 'React', 'Node.js']\nconsole.log(renamedRoadmaps); // ['JavaScript Roadmap', 'React Roadmap', 'Node.js Roadmap']\n</code></pre>"},{"location":"career/interviewquestion/javascript/#3-what-is-the-difference-between-map-and-foreach-methods","title":"3. What is the difference between <code>map()</code> and <code>forEach()</code> methods?","text":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in the calling array. </p> <p>Whereas, the <code>forEach()</code> method executes a provided function once for each array element.</p>"},{"location":"career/interviewquestion/javascript/#4-does-foreach-method-return-a-new-array","title":"4. Does <code>forEach()</code> method return a new array?","text":"<p>No, the <code>forEach()</code> method does not return a new array. It simply calls a provided function on each element in the array.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\n\nroadmaps.forEach((roadmap) =&gt; {\n  console.log(roadmap);\n});\n</code></pre>"},{"location":"career/interviewquestion/javascript/#5-what-is-the-difference-between-map-and-reduce-methods","title":"5. What is the difference between <code>map()</code> and <code>reduce()</code> methods?","text":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in the calling array. </p> <p>Whereas,  the <code>reduce()</code> method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p>"},{"location":"career/interviewquestion/javascript/#6-how-to-use-reduce-method","title":"6. How to use <code>reduce()</code> method?","text":"<p>You can use the <code>reduce()</code> method to reduce an array to a single value. The <code>reduce()</code> method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p> <p>Syntax</p> <pre><code>array.reduce((accumulator, currentValue) =&gt; {\n  // ...\n}, initialValue);\n</code></pre> <p>Example</p> <p>You can use the <code>reduce()</code> method to sum all the numbers in an array.</p> <pre><code>const numbers = [1, 2, 3, 4, 5, 6];\n\nconst sum = numbers.reduce((accumulator, currentValue) =&gt; {\n  return accumulator + currentValue;\n}, 0);\n\nconsole.log(numbers); // [1, 2, 3, 4, 5, 6]\nconsole.log(sum); // 21\n</code></pre>"},{"location":"career/interviewquestion/javascript/#7-can-you-merge-multiple-arrays-in-javascript","title":"7. Can you merge multiple arrays in JavaScript?","text":"<p>Yes, you can merge multiple arrays into one array using the <code>concat()</code> method, or the spread operator <code>....</code></p> <p>concat()</p> <p>The <code>concat()</code> method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</p> <pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\n\nconst arr3 = arr1.concat(arr2);\nconsole.log(arr3); // [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Spread operator</p> <p>The spread operator <code>...</code> is used to expand an iterable object into the list of arguments.</p> <pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\n\nconst arr3 = [...arr1, ...arr2];\nconsole.log(arr3); // [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"career/interviewquestion/javascript/#8-what-is-the-spread-operator-in-javascript","title":"8. What is the spread operator in JavaScript?","text":"<p>The spread operator in JavaScript is represented by three dots (...). It allows the elements of an array or properties of an object to be expanded or \"spread\" into individual elements or properties. This can be useful in various contexts, such as when passing elements as function arguments, cloning arrays and objects, or merging arrays and objects.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\nconst bestPractices = ['AWS', 'API Security'];\n\nconst resources = [...roadmaps, ...bestPractices];\nconsole.log(resources); \n// ['JavaScript', 'React', 'Node.js', 'AWS', 'API Security']\n</code></pre> <pre><code>const roadmap = {\n  name: 'JavaScript',\n  type: 'dynamic',\n};\n\nconst roadmapClone = { ...roadmap }; // shallow copy\nconsole.log(roadmapClone); // { name: 'JavaScript', type: 'dynamic' }\n</code></pre> <p>Core Advanced</p>"},{"location":"career/interviewquestion/javascript/#1-garbage-collection-in-javascript","title":"1. Garbage collection in JavaScript?","text":"<p>The JavaScript engine uses automatic garbage collection.  JavaScript automatically manages memory by freeing up space used by objects no longer needed.  This algorithm is called Mark and Sweep, which is performed periodically by the JavaScript engine.</p>"},{"location":"career/interviewquestion/javascript/#2-what-are-heap-and-stack-in-javascript","title":"2. What are Heap and Stack in JavaScript?","text":"<p>The Heap and Stack in JavaScript Engine are two different data structures that store data in different ways.</p> <p>Stack</p> <p>The Stack is a small, organized region of memory. It is where primitive values, function calls, and local variables are stored. It follows a \"Last In, First Out\" (LIFO) order, meaning that the last item added to the stack is the first one to be removed. Each function invocation creates a new stack frame, which contains the function's local variables, return address, and other contextual data.</p> <p>Heap</p> <p>The Heap is a large, mostly unstructured region of memory. It is where <code>objects</code>, <code>arrays</code>, and <code>functions</code> are stored. Variables from the Stack (e.g., in functions) point to locations in the Heap for these dynamically allocated structures.</p> <p>When you declare a primitive type (like a number or boolean), it's usually managed in the stack. But when you create an object, array, or function, it's stored in the heap, and the stack will hold a reference to that location in the heap.</p> <p>For example:</p> <pre><code>// Stored on the stack\nconst name = 'JavaScript'; \n\n// `roadmap` reference on the stack, actual object { name: 'JS' } in the heap\nconst roadmap = { name: 'JS' }; \n</code></pre> <p>In the code above, the primitive value <code>JavaScript</code> for variable <code>name</code> is directly stored on the stack. For the object assigned to <code>roadmap</code>, its actual data resides in the heap, and the reference to this data (a memory address pointer) is held on the stack.</p> <p>Function Advanced</p>"},{"location":"career/interviewquestion/javascript/#1-what-is-iife-in-javascript","title":"1. What is IIFE in JavaScript?","text":"<p>The IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.</p> <pre><code>(function () {\n  console.log('Hello Roadmap!');\n})();\n</code></pre> <p>The IIFE is frequently used to create a new scope to avoid variable hoisting from within blocks.</p> <pre><code>(function () {\n  var roadmap = 'JavaScript';\n  console.log(roadmap);\n})();\n\nconsole.log(roadmap); // ReferenceError: name is not defined\n</code></pre> <p>Operator Beginner</p>"},{"location":"career/interviewquestion/javascript/#1-what-is-nullish-coalescing-operator","title":"1. What is Nullish Coalescing Operator?","text":"<p>The Nullish Coalescing Operator (<code>??</code>) returns the right operand if the left one is <code>null</code> or <code>undefined</code>, otherwise, it returns the left operand. It's useful for setting default values without considering falsy values like <code>0</code> or <code>''</code> as absent.</p> <pre><code>console.log(null ?? 'hello'); // hello\nconsole.log(undefined ?? 'hello'); // hello\nconsole.log('' ?? 'hello'); // ''\nconsole.log(0 ?? 'hello'); // \n</code></pre> <p>DOM Beginner</p>"},{"location":"career/interviewquestion/javascript/#1-how-to-measure-dimensions-of-an-element","title":"1. How to measure dimensions of an Element?","text":"<p>You can use <code>getBoundingClientRect</code> method to get the dimensions of an element.</p> <pre><code>const roadmapWrapper = document.querySelector('.roadmap-wrapper');\nconst dimensions = roadmapWrapper.getBoundingClientRect();\n\nconsole.log(dimensions); \n// DOMRect { x: 8, y: 8, width: 784, height: 784, top: 8, right: 792, bottom: 792, left: 8 }\n</code></pre>"},{"location":"career/interviewquestion/javascript/#2-how-to-get-viewport-dimensions-in-javascript","title":"2. How to get viewport dimensions in JavaScript?","text":"<p>You can use <code>window.innerWidth</code> and <code>window.innerHeight</code> to get the viewport dimensions.</p>"},{"location":"career/interviewquestion/javascript/#3-how-to-scroll-to-the-top-of-the-page-using-javascript","title":"3. How to scroll to the top of the page using JavaScript?","text":"<p>In order to scroll to the top of the page, we can use the <code>scrollTo</code> method.</p> <pre><code>window.scrollTo(0, 0);\n</code></pre>"},{"location":"career/interviewquestion/javascript/#reference","title":"Reference","text":"<ul> <li>roadmap.sh/questions/javascript</li> </ul>"},{"location":"career/interviewquestion/react/","title":"React","text":"<p>Core Advanced</p>"},{"location":"career/interviewquestion/react/#1-what-is-reconciliation-in-react","title":"1. What is Reconciliation in React ?","text":"<p>Reconciliation is the process through which React updated the DOM by comparing the newly returned elements with the previously rendered ones.</p> <p>React updates the DOM when a component's state changes.</p>"},{"location":"career/interviewquestion/react/#2-what-is-react-fiber","title":"2. What is React Fiber ?","text":"<p>React Fiber is the reconciliation engine that replaced the core algorithm in React v16.</p> <p>It is a rewrite of the core algorighm, responsible for scheduling what get rendered on screen.</p> <p>It is a set of algorithms for efficiently updating the UI.</p>"},{"location":"career/interviewquestion/react/#3-explain-the-concept-of-error-boundaries-in-react","title":"3. Explain the concept of error boundaries in React.","text":"<p>Error boundaries are special React components that catch JavaScript errors during rendering, in lifecycle methods, and during the constructor of whole tree below them.</p> <p>You can use <code>react-error-boundary</code> package to create error boundaries in your application.</p> <pre><code># Installation\n$ npm i react-error-boundary\n</code></pre> <p>Core Intermediate</p>"},{"location":"career/interviewquestion/react/#1-what-is-the-high-order-components-hocs","title":"1. What is the High-Order Components (HOCs)?","text":"<p>A High-Order Components (HOCs) is a function that takes a component and returns a new component.</p> <p>Basically, it's a pattern that is derived from React Compositional nature.</p> <p>High-order components are not part of the React API. They are the pattern that emerges from React Compositional nature.</p>"},{"location":"career/interviewquestion/react/#2-how-react-virtual-dom-works","title":"2. How React Virtual DOM works?","text":"<p>Virtual DOM works in this steps:</p> <ul> <li>Whenever any underlying data changes, new virtual DOM representation will be created.</li> <li>Then the difference between the previous DOM representation and the new one is calculated.</li> <li>Once the calculations are done, the real DOM will be updated with only the things that have actually changed.</li> </ul>"},{"location":"career/interviewquestion/react/#3-what-is-the-purpose-of-the-useeffect-hook-in-react","title":"3. What is the purpose of the <code>useEffect</code> hook in React?","text":"<p>The useEffect hook in React is used for performing side effects in functional components. Side effects can include data fetching, DOM manipulation, and subscribing to external data sources.</p> <p>Core Beginner</p>"},{"location":"career/interviewquestion/react/#1-what-is-the-naming-convention-for-react-components","title":"1. What is the naming convention for React components?","text":"<p>In React, the naming convention for components is to use PascalCase, meaning the first letter of each word in the component's name should be capitalized. </p> <p>For example, <code>UserProfile</code>, <code>SidebarItem</code>, or <code>NavigationMenu</code>. This convention differentiates custom React components from regular HTML tags in JSX, as React treats elements starting with a lowercase letter as DOM tags and those starting with a capital letter as custom components.</p>"},{"location":"career/interviewquestion/react/#2-what-is-the-difference-between-class-components-and-function-components","title":"2. What is the difference between class components and function components?","text":"<p>Class components let you define your components with the help of classes. You can extend from <code>React.Component</code> class to create a component. Class components also allow you to define component level lifecycle methods. </p> <p>Functional components are the preferred way to write React components. There are no lifecycle methods similar to class components available in functional components; you can use React hooks instead to manage the component lifecycle.</p>"},{"location":"career/interviewquestion/react/#3-can-we-change-the-state-of-the-component-directly","title":"3. Can we change the state of the component directly?","text":"<p>No, we can't change the state of the component directly. State can only be changed by using <code>setState()</code> method. Changing the state variable directly won't re-render the component.</p>"},{"location":"career/interviewquestion/react/#4-what-is-the-purpose-of-key-attribute-in-react","title":"4. What is the purpose of <code>key</code> attribute in React?","text":"<p>The string attribute <code>key</code> is a special attribute you need to include when rendering an array of elements. Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity.</p>"},{"location":"career/interviewquestion/react/#5-how-to-render-html-in-react","title":"5. How to render HTML in React?","text":"<p>You can use <code>dangerouslySetInnerHTML</code> prop to render HTML in React. It is used to set HTML directly from React. You should be careful while using this property as it can cause XSS attacks.</p>"},{"location":"career/interviewquestion/react/#6-how-to-render-a-list-in-react","title":"6. How to render a list in React?","text":"<p>In React, you can render a list by using the JavaScript map function to iterate over an array of items and return a JSX element for each item. It's important to provide a unique key prop to each element in the list for React's diffing algorithm to function efficiently during re-renders. Here's a basic example:</p> <pre><code>const items = ['Apple', 'Banana', 'Cherry'];\n\nfunction FruitList() {\n  return (\n    &lt;ul&gt;\n      {items.map((fruit, index) =&gt; (\n        &lt;li key={index}&gt;{fruit}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Note: While using the index as a key can work in some cases, it's generally not recommended for dynamic lists where items can be added, removed, or reordered.</p>"},{"location":"career/interviewquestion/react/#7-what-is-the-difference-between-stateful-and-stateless-components","title":"7. What is the difference between stateful and stateless components?","text":"<p>The main difference between stateful and stateless components is one has state and the other doesn't. </p> <p>Stateful components keep track of changes to their state and re-render themselves when the state changes. </p> <p>Stateless components, on the other hand, render whatever is passed to them via <code>props</code> or always render the same thing.</p>"},{"location":"career/interviewquestion/react/#8-whats-the-components-lifecycle-in-react","title":"8. What's the component's lifecycle in React?","text":"<p>In React functional components, lifecycle-like behaviors are achieved using hooks:</p> <p>Mounting and Unmounting</p> <p>Utilizing the useEffect hook with an empty dependency array ([]) ensures the hook runs after the component mounts to the DOM.</p> <pre><code>useEffect(() =&gt; {\n  // do something after component mounts\n  return () =&gt; {\n    // do something before component unmounts\n  };\n}, []);\n</code></pre> <p>The <code>cleanup function</code> returned within the useEffect callback offers a mechanism for handling tasks when the component is about to unmount.</p> <p>Updates</p> <p>The useEffect hook, when invoked without a dependency array or with specific dependencies, executes after every render or when specified prop/state changes are detected.</p> <pre><code>useEffect(() =&gt; {\n  // do something after every render\n});\n</code></pre> <pre><code>useEffect(() =&gt; {\n  // do something after specific prop/state changes\n}, [state1, state2]);\n</code></pre> <p>Performance\u00b7Beginner</p>"},{"location":"career/interviewquestion/react/#why-you-shouldnt-use-index-as-a-key-in-react-lists-and-iterators","title":"Why you shouldn't use <code>index</code> as a key in React lists and iterators?","text":"<p>Using <code>index</code> as a key can negatively impact performance and may cause issues with the component state.  When the list items change due to additions, deletions, or reordering, using indexes can lead to unnecessary re-renders or even incorrect UI updates. React uses keys to identify elements in the list, and if the key is just an index, it might reuse component instances and state inappropriately. Especially in cases where the list is dynamic or items can be reordered, it's recommended to use unique and stable identifiers as keys to ensure consistent behavior.</p> <p>Performance\u00b7Intermediate</p>"},{"location":"career/interviewquestion/react/#what-is-the-purpose-of-the-usememo-hook-in-react","title":"What is the purpose of the <code>useMemo</code> hook in React?","text":"<p>The <code>useMemo hook</code> is used to memoize the result of a computationally expensive operation in a functional component. It helps optimize performance by caching the result of the operation and returning the cached result on subsequent renders if the dependencies have not changed. This can prevent unnecessary calculations.</p> <p>State\u00b7Intermediate</p>"},{"location":"career/interviewquestion/react/#what-is-the-purpose-of-the-usecontext-hook-in-react","title":"What is the purpose of the <code>useContext</code> hook in React?","text":"<p>The <code>useContext hook</code> is used to access and consume context values in functional components. It provides a way to access context data without the need for a context consumer. useContext is particularly useful when you want to access context values in nested components without having to pass props through intermediate components.</p>"},{"location":"career/interviewquestion/react/#reference","title":"Reference","text":"<ul> <li>roadmap.sh/questions/react</li> <li>reactjs interview question : github</li> </ul>"},{"location":"career/interviewquestion/terminology/","title":"Terminology","text":""},{"location":"career/interviewquestion/terminology/#reactive-programming","title":"Reactive Programming","text":"<ul> <li>Reactive Programming is a paradigm based on asynchronus data streams that propagate changes during the application lifcycle. [pg-11]</li> <li>Another important concept on Reactive Programming is the way we are communication within objects. [pg-12]</li> <li>Reactive porgarmming is used for handling the propagation of data during the life cycle of an application. []</li> </ul>"},{"location":"career/interviewquestion/terminology/#solid-principle","title":"Solid Principle","text":"<p>SOLID is a set of principles created by Uncle Bob.</p> <p>S - Single-responsibility principle</p> <p>O - open-closed principle</p> <p>L - Liskov Substitution principle</p> <p>I - Interface Segregation principle</p> <p>D - Dependency Inversion principle</p>"},{"location":"career/interviewquestion/terminology/#reference","title":"Reference","text":"<ul> <li>Front End Reactive Architecture</li> </ul>"},{"location":"career/roadmap/developer-plan/","title":"Developer","text":"<p>The Secret to Learning about Technology Quickly and Continuously</p> <p>main topic</p> <ul> <li>Knowledge versus skills</li> <li>Finding focus and priorities</li> <li>Applying just-in-time learning</li> <li>Practicing deliberately to learn a tech</li> <li>Implementing important good habits</li> </ul>"},{"location":"career/roadmap/developer-plan/#knowledge-versus-skills","title":"Knowledge versus skills","text":"Info <p>When you learn a new skill, think about how you will apply that skill. Actively search for a way to incorporate your new skill into your day-to-day coding projects. Using the skills you gain right away will help you to build the muscle memory for the new skill and assimilate it into your library of knowledge.</p> <p>Have you ever spent hours learning something that you are not using in a project right now, and a few months later, when you need it, you remember next to nothing, and have to refresh it? And does that refreshing feel like almost having to relearn everything? There is a reason for that feeling and it is the difference between knowledge and skills.</p> <p>An effective way to think about knowledge is that it is a collection of memories that are disconnected from each other. Because they are disconnected, it takes some time for you to remember those things when you need them. And once you recover one memory, it does not help you recover other memories. This is like learning about the history of bicycles and how they were invented. Although you may love bikes, it is hard to remember the names and dates and who did what. There is a better way.</p> <p>Have you ever heard the popular saying that goes like this: once you learn how to ride a bicycle, you never forget? This is because riding a bicycle is not knowledge; it\u2019s a skill. An effective way to think about skills is that they are collections of memories that are connected to each other. Once you recover one of those memories, they all come together and are accessed in a much faster way by your brain.</p> <p>That is why, once you acquire the skill, you just sit on the bicycle and go. You do not need to remember each fact about riding a bike. It just comes to you, without effort. The most important thing about skills for you to keep in mind is that although you can acquire knowledge by reading or listening, you can only develop skills by doing. There is no amount of reading, listening, watching videos, or following amazing tutorials that will ever get you to ride a bicycle. The only way is to go down to the park and try, fall, try again, and eventually, do it.</p> <p>This is the same for every developer skill that you want to master. To really learn something, you must do things, instead of simply studying to acquire the knowledge.</p> <p>When you write your CV or resume or prepare your LinkedIn profile, do you list in it all the books you read and YouTube videos you watched? Do you list all the knowledge you have? Or do you put more focus on the projects you worked on and the experiences you acquired?</p> <p>Even when just starting, you will clearly be better off including everything you did, even if they were just personal and volunteer projects, because, at the end of the day, it is your experience and skills that really matter.</p> <p></p>"},{"location":"career/roadmap/developer-plan/#reference","title":"Reference","text":"<ul> <li>Developer Career Masterplan by Heather VanCura, Bruno Souza - packt</li> </ul>"},{"location":"career/roadmap/intro/","title":"Intro","text":"<p>Most academic papers (Exposition, Persuasion, and Research Papers) should generally be written in third person, referring to other authors and researchers from credible and academic sources to support your argument rather than stating your own personal experiences.</p> <p>Usually by default you will write an academic assignment in the third person</p> <ul> <li> <p>Master the Perfect ChatGPT Prompt Formula</p> </li> <li> <p>First vs. Third Person</p> </li> <li>Academic Writing PDF</li> <li>Point of View in Academic Writing</li> <li>Writing academically: Personal pronouns</li> </ul>"},{"location":"career/roadmap/tech-stack/","title":"Tech Stack","text":""},{"location":"career/roadmap/tech-stack/#react-and-django-stack","title":"React and Django Stack","text":"Django StackReact Stack <pre><code>Rest stack for Django:\n\n- drf\n- Celery\n- Postgresql\n- redis\n- elastic search\n\n- rabbitmq\n- graphene\n\nDjango + Graphene =&gt; Apollo + React\n</code></pre> <pre><code>- Razzle JS,\n- Apollo,\n- react-loadable,\n- helmet,\n- react-router\n- redux\n</code></pre>"},{"location":"career/roadmap/tech-stack/#testing-framework","title":"Testing Framework","text":"React Testing FrameworksDjango Testing Frameworks <ol> <li> <p>Jest:</p> <p>Jest is a widely-used JavaScript testing framework that works seamlessly with React applications. It provides features like snapshot testing, mocking, and a test runner. Jest is often the default choice for React projects.</p> <pre><code># For Jest\nnpm install --save-dev jest\n</code></pre> </li> <li> <p>React Testing Library:</p> <p>This library is built on top of DOM Testing Library and provides utilities for testing React components. It encourages testing components as users would interact with them, promoting a more user-centric approach to testing.</p> <pre><code># For React Testing Library\nnpm install --save-dev @testing-library/react @testing-library/jest-dom\n</code></pre> </li> <li> <p>Enzyme:</p> <p>Enzyme is a testing utility for React developed by Airbnb. It provides a set of tools to make it easier to test React components' output and behavior. Enzyme is compatible with Jest and other testing frameworks.</p> <pre><code>npm install --save-dev enzyme enzyme-adapter-react-16 enzyme-to-json\n</code></pre> </li> </ol> <ol> <li> <p>Django Test Framework (built-in):</p> <p>Django comes with its built-in testing framework. It includes support for unit tests, functional tests, and integration tests. Tests are usually placed in a tests module within each Django app.</p> </li> <li> <p>pytest-django:</p> <p>pytest-django is a plugin for the popular Python testing framework pytest. It provides additional functionality for testing Django applications and is known for its concise syntax and powerful fixtures.</p> <pre><code>pip install pytest pytest-django\n</code></pre> </li> </ol>"},{"location":"career/roadmap/tech-stack/#integration-testing","title":"Integration Testing:","text":"<ol> <li> <p>Cypress (for React):</p> <p>Cypress is an end-to-end testing framework for web applications. It allows you to write and run integration tests for your React applications. Cypress provides a real-time interactive test runner.</p> <pre><code>npm install --save-dev cypress\n</code></pre> </li> <li> <p>Selenium (for Django):</p> <p>Selenium is a tool for automating web browsers. It can be used for integration testing of Django applications by simulating user interactions with the browser. The Django project itself provides tools like django-selenium to simplify integration with Selenium.</p> <pre><code>pip install selenium\n</code></pre> </li> </ol>"},{"location":"career/roadmap/tech-stack/#testing-django-and-react-together","title":"Testing Django and React Together:","text":"<ol> <li> <p>Django Rest Framework Test (for API testing):</p> <p>If your React frontend communicates with a Django backend through a RESTful API, you can use Django Rest Framework Test for testing your API endpoints.</p> </li> <li> <p>TestCafe (for end-to-end testing):</p> <p>TestCafe is a JavaScript end-to-end testing framework that allows you to test web applications in various browsers. It can be used to test the interaction between your React frontend and Django backend.</p> <pre><code>npm install -g testcafe\n</code></pre> </li> <li> <p>Jest-Django (for Jest and Django integration):</p> <p>Jest-Django is a Jest transformer and utility functions for working with Django. It helps when writing tests for JavaScript code that interacts with Django templates or uses Django's static files.</p> <pre><code>npm install --save-dev jest-django\n</code></pre> </li> </ol>"},{"location":"career/roadmap/tech-stack/#configuration","title":"Configuration","text":"<p>After installation, you may need to configure the testing frameworks according to your project structure. For example, setting up Jest configurations in a jest.<code>config.js</code> file or configuring pytest with <code>pytest.ini</code>.</p> <p>Remember to consult the official documentation for each testing framework for more detailed configuration and usage instructions. Additionally, make sure your project's dependencies and versions are compatible with the chosen testing tools.</p> Jest Configuration (jest.config.js)pytest Configuration (pytest.ini) <p>Create a <code>jest.config.js</code> file in the root of your project. This file is used to configure Jest. Here's a simple example:</p> jest.config.js<pre><code>module.exports = {\n// Set the test environment (browser-like)\ntestEnvironment: \"jsdom\",\n\n// Extend Jest with testing-library assertions\nsetupFilesAfterEnv: [\"@testing-library/jest-dom/extend-expect\"],\n\n// Ignore specific paths during tests\ntestPathIgnorePatterns: [\"/node_modules/\", \"/build/\"],\n\n// Add more configuration options as needed\n};\n</code></pre> <p>Create a <code>pytest.ini</code> file in the root of your project. This file is used to configure pytest. Here's a basic example:</p> <pre><code>[pytest]\n\n# Set the Django settings module\nDJANGO_SETTINGS_MODULE = your_project.settings\n\n# Enable code coverage for your Django app\naddopts = --cov=your_app_name\n\n# Specify the file naming convention for test files\npython_files = tests.py test_*.py *_tests.py\n</code></pre> <p>Make sure to replace <code>your_project</code> and <code>your_app_name</code> with your actual Django project and app names.</p> <p>These configurations are just starting points, and you might need to customize them based on your project structure and specific needs. Consult the official documentation for Jest and pytest for more advanced configuration options and details.</p>"},{"location":"career/roadmap/tech-stack/#additional-tips","title":"Additional Tips:","text":"<p>Jest Configuration for React Projects:</p> <p>If you're working on a React project, you might want to extend Jest to work with Babel for transpiling JSX and ES6 code. Install the necessary packages:</p> <pre><code>npm install --save-dev babel-jest @babel/preset-env @babel/preset-react\n</code></pre> jest.config.jspytest.ini <p>Then, update your <code>jest.config.js</code>:</p> jest.config.js<pre><code>module.exports = {\n// ...other configurations\ntransform: {\n    \"^.+\\\\.jsx?$\": \"babel-jest\", // Transform JSX with Babel\n},\n// ...other configurations\n};\n</code></pre> <p>Pytest Configuration for Django:</p> <p>If you're using pytest with Django, you might want to add additional configurations for Django-related testing:</p> pytest.ini<pre><code>[pytest]\nDJANGO_SETTINGS_MODULE = your_project.settings\n\n# Specify Django settings module during tests\naddopts = --cov=your_app_name --ds=your_project.settings\n\npython_files = tests.py test_*.py *_tests.py\n</code></pre> <p>Adjust the file names and paths according to your project structure.</p> <p>Remember to install the necessary Python packages for pytest and code coverage:</p> <pre><code>pip install pytest pytest-django pytest-cov\n</code></pre> <p>Customize these configurations based on your project's needs, and consult the documentation for Jest and pytest for more in-depth details and options.</p> <p>Notes</p> <p>When setting up testing for a project, it's essential to consider the specific requirements and preferences of your team. The mentioned frameworks and libraries are widely used and well-documented, making them good choices for testing React and Django applications.</p>"},{"location":"career/roadmap/tech-stack/#reference","title":"Reference","text":"<ul> <li>django stack</li> </ul>"},{"location":"career/university/intro/","title":"Intro","text":"<p>quillbot.com/</p>"},{"location":"mobiledev/intro/","title":"Intro","text":"<p>fasdf</p>"},{"location":"mobiledev/react-native/intro/","title":"Intro","text":""},{"location":"mobiledev/react-native/intro/#install-expo-cli-optional-but-recommended-for-beginners","title":"Install Expo CLI (Optional but recommended for beginners)","text":"<p>Expo is a framework and platform for universal React applications. It simplifies the setup and development process, especially for beginners.</p> Example <ul> <li> <p>Install Expo CLI globally:</p> <p>WARNING: The legacy expo-cli does not support Node +17. Migrate to the new local Expo CLI:</p> <pre><code>npm install -g expo-cli\n</code></pre> </li> <li> <p>Create a New Expo Project</p> <pre><code># Create a new project using Expo CLI:\nexpo init my-new-project\n</code></pre> <p>Follow the prompts to choose a template. For a basic setup, the \u201cblank\u201d template is a good choice.</p> </li> <li> <p>Navigate to your project directory:</p> <pre><code>cd my-new-project\n</code></pre> </li> <li> <p>Start the development server:</p> <pre><code>expo start\n</code></pre> <p>This will start the Expo development server and open the Expo DevTools in your browser.</p> </li> </ul> Danger <pre><code>sudo npm install -g expo-cli\n</code></pre> <p>WARNING: The legacy expo-cli does not support Node +17. Migrate to the new local Expo CLI: https://blog.expo.dev/the-new-expo-cli-f4250d8e3421.</p> <p>(node:605277) [DEP0040] DeprecationWarning: The <code>punycode</code> module is deprecated. Please use a userland alternative instead. (Use <code>node --trace-deprecation ...</code> to show where the warning was created) \"help\" is not an expo command. See \"expo --help\" for the full list of commands.</p> Success <p>As of the latest updates, the <code>create-expo-app</code> tool, like other tools in the JavaScript ecosystem, is compatible with a range of Node.js versions. However, it's always a good practice to use a stable and supported Node.js version to avoid compatibility issues.</p> <p>Supported Node.js Versions for <code>create-expo-app</code></p> <ol> <li> <p>LTS (Long-Term Support) Versions:</p> <p><code>create-expo-app</code> generally supports Node.js LTS versions. LTS versions are recommended for stability and compatibility with various tools. As of now, the commonly supported LTS versions are:</p> <ul> <li>Node.js 18.x (Gallium): This is the current LTS release.</li> <li>Node.js 16.x (Fermium): This was the previous LTS version.</li> </ul> </li> <li> <p>Current Stable Version:</p> <p>While LTS versions are preferred, <code>create-expo-app</code> might also support the most recent stable Node.js versions. However, using the latest release (current version) might sometimes lead to unexpected issues if the tool or its dependencies are not yet fully compatible.</p> </li> </ol> <p>Recommendations</p> <ul> <li> <p>Use Node.js LTS Versions:</p> <p>For maximum compatibility and stability, use the current LTS version of Node.js. As of the latest guidance, Node.js 18.x is the recommended version.</p> </li> <li> <p>Verify Compatibility:</p> <p>Always check the Expo documentation or the Expo CLI GitHub repository for any specific version requirements or known issues related to Node.js versions.</p> </li> </ul>"},{"location":"mobiledev/react-native/intro/#how-to-manage-nodejs-versions","title":"How to Manage Node.js Versions","text":"<p>To manage and switch between different Node.js versions, you can use Node Version Manager (nvm):</p> <ol> <li> <p>Install <code>nvm</code> (if not already installed):</p> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash\n</code></pre> <p>Then load <code>nvm</code>:</p> <pre><code>source ~/.nvm/nvm.sh\n</code></pre> </li> <li> <p>Install and Use a Specific Node.js Version:</p> <pre><code>nvm install 18\nnvm use 18\n</code></pre> <p>Replace <code>18</code> with the desired version number.</p> </li> <li> <p>Check Installed Node.js Versions:</p> <pre><code>nvm ls\n</code></pre> </li> </ol>"},{"location":"mobiledev/react-native/intro/#steps-to-create-an-expo-app","title":"Steps to Create an Expo App","text":"<ol> <li> <p>Ensure Node.js Version: Verify you are using a compatible Node.js version:</p> <pre><code>node -v\n</code></pre> </li> <li> <p>Create a New Expo Project using create-expo-app:</p> <pre><code>npx create-expo-app MyNewApp\n</code></pre> </li> </ol>"},{"location":"mobiledev/react-native/intro/#running-an-expo-project","title":"Running an Expo Project","text":"<p>If you used <code>npx</code> to create an Expo project using <code>create-expo-app</code> or a similar command, follow these steps:</p> <ol> <li> <p>Navigate to Your Project Directory</p> <pre><code>cd MyNewApp\n</code></pre> <p>Replace <code>MyNewApp</code> with your project's directory name.</p> </li> <li> <p>Start the Expo Development Server</p> <p>Start the Expo development server by running:</p> <pre><code>npm start\n</code></pre> <p>or</p> <pre><code>npx expo start\n</code></pre> <p>This will start the Expo development server and open the Expo DevTools in your browser. You will see a QR code that you can scan with the Expo Go app to view your project on your mobile device.</p> </li> </ol>"},{"location":"mobiledev/react-native/intro/#set-up-a-development-environment-without-expo-optional","title":"Set Up a Development Environment <code>Without Expo</code> (Optional)","text":"<p>If you prefer not to use Expo and want more control, you can set up a React Native development environment directly:</p> For macOS and Linux: <ul> <li> <p>Install Watchman (a tool used for watching changes in the filesystem):</p> <pre><code>brew install watchman\n</code></pre> </li> </ul> <ul> <li> <p>Install the React Native CLI globally:</p> <pre><code>npm install -g react-native-cli\n</code></pre> </li> <li> <p>Create a New React Native Project</p> <pre><code># Create a new project using React Native CLI:\nnpx react-native init my-react-native-app\n\n# Navigate to the Project Directory\ncd my-react-native-app\n</code></pre> </li> <li> <p>Start the Development Server</p> <pre><code># Start the Metro bundler:\nnpx react-native start\n</code></pre> <p>In a new terminal window, run the app on iOS or Android:</p> <ul> <li> <p>iOS (macOS only):</p> <pre><code>npx react-native run-ios\n</code></pre> </li> <li> <p>Android:</p> <pre><code>npx react-native run-android\n</code></pre> </li> </ul> </li> </ul>"},{"location":"mobiledev/react-native/topic/","title":"Topic","text":""},{"location":"mobiledev/react-native/topic/#introduction","title":"Introduction","text":"<p>For a dating app, Firebase might be a strong choice, but a traditional database also has advantages depending on the features you're planning. Here\u2019s a tailored breakdown:</p> Firebase for a Dating App Pros:Cons: <ul> <li>Real-time Updates: Firebase's real-time database is great for instant messaging and live updates for matches, profile changes, etc.</li> <li>User Authentication: Firebase has built-in support for authentication via email, social logins (Google, Facebook), or phone numbers, which can speed up development.</li> <li>Push Notifications: Firebase Cloud Messaging (FCM) is useful for sending notifications (e.g., when a user receives a match or message).</li> <li>Storage: You can easily store user profile pictures and media using Firebase Storage.</li> <li>Scalability: Firebase can scale automatically with the growth of your user base without you worrying about server maintenance.</li> <li>Serverless Infrastructure: No need to manage your own servers, allowing you to focus on developing app features.</li> </ul> <ul> <li>Data Structure Complexity: A NoSQL database might make handling user relationships, preferences, and complex queries (e.g., search for matches based on criteria) harder to manage than a relational database.</li> <li>Pricing: As your user base grows, Firebase costs can increase, especially for data-heavy features like image storage or messaging.</li> </ul> Traditional Database for a Dating App (e.g., PostgreSQL, MySQL) Pros:Cons: <ul> <li>Relational Data: In a dating app, user profiles, preferences, and match algorithms often involve complex relationships, which are easier to handle in a relational database.</li> <li>Advanced Querying: SQL databases are more suited for sophisticated filtering and sorting (e.g., finding matches based on location, interests, etc.).</li> <li>Control: You have full control over the data structure, which might be better for implementing features like custom match algorithms, recommendation engines, and complex user data storage.</li> <li>Cost Control: Depending on your hosting, traditional databases may offer more predictable pricing as your app scales.</li> </ul> <ul> <li>More Work: You\u2019ll need to set up and maintain your backend infrastructure (user authentication, real-time messaging, etc.).</li> <li>Slower Initial Development: While Firebase allows for faster development, traditional setups require you to build more of the infrastructure yourself.</li> </ul>"},{"location":"mobiledev/react-native/topic/#recommendation","title":"Recommendation:","text":"<ul> <li>Firebase: If you want a faster initial setup, plan to implement basic real-time features like chat, and prefer a managed backend, Firebase is a solid choice for the MVP of your dating app.</li> <li>Traditional Database: If your app\u2019s focus will involve complex search/matching logic, or you expect to scale rapidly with a large user base requiring advanced querying, a traditional database (like PostgreSQL) might be a better fit long-term.</li> </ul> <p>You could even use a hybrid approach: Firebase for real-time chat and notifications, and a traditional database for managing user profiles and relationships.</p> <p>Let me know if you need more insights based on specific features you\u2019re planning!</p>"},{"location":"mobiledev/react-native/topic/#topic","title":"Topic","text":"<p>To become proficient in React Native, you'll need to master a range of topics, from the fundamentals to advanced features. Here\u2019s a roadmap of key areas to focus on:</p> <ol> <li> <p>Core React Native Concepts</p> <ul> <li>JSX: Learn how to write components using JSX syntax.</li> <li>Components (Functional and Class): Understand how to create and use components.</li> <li>State and Props: Master passing data between components using props and managing state within components.</li> <li>Lifecycle Methods: Familiarize yourself with lifecycle hooks (e.g., <code>useEffect</code>, <code>componentDidMount</code>).</li> <li>Hooks: Use React hooks like useState, useEffect, and advanced hooks (<code>useContext</code>, <code>useReducer</code>).</li> <li>Styling: Learn the StyleSheet and inline styling methods for designing UI components.</li> </ul> </li> <li> <p>Navigation</p> <ul> <li>React Navigation: Learn how to implement navigation using libraries like <code>react-navigation</code> for stacks, tabs, and drawer navigation.</li> <li>Deep Linking: Understand how to handle deep linking to route users to specific screens within the app.</li> </ul> </li> <li> <p>State Management</p> <ul> <li>Context API: Start with the built-in Context API for simple state management.</li> <li>Redux: Learn Redux for managing global state, actions, reducers, and how to integrate it with React Native.</li> <li>Redux Toolkit: Explore Redux Toolkit to simplify Redux setup.</li> <li>MobX: As an alternative to Redux, learn MobX for reactive state management.</li> </ul> </li> <li> <p>Networking &amp; API Integration</p> <ul> <li>Fetch &amp; Axios: Learn how to use <code>fetch()</code> or <code>Axios</code> for making API requests.</li> <li>REST API Integration: Understand how to connect React Native with REST APIs.</li> <li>GraphQL: Learn GraphQL if you\u2019re using GraphQL-based APIs.</li> <li>Handling Authentication: Implement login/signup flows using token-based authentication (JWT, OAuth, etc.).</li> </ul> </li> <li> <p>Handling Forms</p> <ul> <li>Form Handling: Learn to handle forms using controlled components and libraries like <code>formik</code> or <code>react-hook-form</code>.</li> <li>Validation: Implement form validation using <code>Yup</code> or custom validators.</li> </ul> </li> <li> <p>Storage &amp; Offline Capabilities</p> <ul> <li>AsyncStorage: Learn how to use AsyncStorage for local data storage.</li> <li>SQLite/Realm: Use local databases like SQLite or Realm for persistent data storage.</li> <li>Caching Data: Implement caching for API data to improve performance and offline capabilities.</li> </ul> </li> <li> <p>User Interface (UI)</p> <ul> <li>React Native UI Components: Learn how to use core components like <code>View</code>, <code>Text</code>, <code>Image</code>, <code>ScrollView</code>, <code>FlatList</code>, etc.</li> <li>Flexbox Layout: Master Flexbox for positioning and layout.</li> <li>Animations: Use Animated API and libraries like <code>react-native-reanimated</code> or <code>react-native-animatable</code> to create smooth animations.</li> <li>Gesture Handling: Understand gesture handling using <code>react-native-gesture-handler</code>.</li> </ul> </li> <li> <p>Third-Party Libraries</p> <ul> <li>UI Libraries: Familiarize yourself with UI libraries like React Native Paper, NativeBase, or Ant Design.</li> <li>Native Device Integration: Learn to integrate with native features using libraries like <code>react-native-camera</code>, <code>react-native-maps</code>, and <code>react-native-firebase</code>.</li> </ul> </li> <li> <p>Platform-Specific Features</p> <ul> <li>Platform-Specific Code: Understand how to write platform-specific code for iOS and Android using <code>Platform</code> and <code>Platform-specific extensions</code> (like <code>.ios.js</code> or <code>.android.js</code>).</li> <li>Permissions: Handle permissions for accessing the device's camera, location, etc., using libraries like <code>react-native-permissions</code>.</li> <li>Push Notifications: Set up push notifications using services like Firebase Cloud Messaging (FCM) or OneSignal.</li> </ul> </li> <li> <p>Performance Optimization</p> <ul> <li>Optimizing Rendering: Learn techniques to avoid unnecessary re-renders using <code>React.memo()</code>, <code>useCallback()</code>, <code>useMemo()</code>, etc.</li> <li>Lazy Loading &amp; Code Splitting: Implement lazy loading to split your code for faster initial load times.</li> <li>Image Optimization: Optimize images for performance, using tools like <code>react-native-fast-image</code>.</li> <li>Memory Management: Understand how to manage memory leaks, especially with asynchronous tasks.</li> </ul> </li> <li> <p>Debugging &amp; Testing</p> <ul> <li>Debugging Tools: Learn how to debug with React Native Debugger, Flipper, and Chrome Developer Tools.</li> <li>Unit Testing: Use testing frameworks like Jest and React Native Testing Library to write unit and integration tests.</li> <li>End-to-End Testing: Learn how to write E2E tests using tools like Detox.</li> </ul> </li> <li> <p>Versioning &amp; Deployment</p> <ul> <li>Version Control: Use Git for version control and learn how to manage branches, commits, and pull requests.</li> <li>Continuous Integration (CI): Set up CI/CD pipelines for automated testing and deployment using tools like GitHub Actions, CircleCI, or Bitrise.</li> <li>App Store Deployment: Learn the process of deploying your app to the Apple App Store (iOS) and Google Play Store (Android).</li> <li>Code Signing: Understand how to handle code signing for Android and iOS.</li> </ul> </li> <li> <p>TypeScript (Optional but Recommended)</p> <ul> <li>TypeScript: Learn TypeScript for type safety, which is becoming increasingly popular in React Native projects.</li> <li>Typed Components: Use TypeScript for better code maintenance and fewer runtime errors.</li> </ul> </li> <li> <p>Native Code (Optional for Advanced Development)</p> <ul> <li>Native Modules: Learn how to bridge native code (Java/Kotlin for Android and Swift/Objective-C for iOS) with React Native when needed.</li> <li>Custom Native Modules: Create custom native modules if your app needs functionality that isn't covered by existing React Native libraries.</li> </ul> </li> <li> <p>Building &amp; Packaging (for iOS &amp; Android)</p> <ul> <li>Android Studio/Xcode: Learn how to use Android Studio for Android development and Xcode for iOS development.</li> <li>Building APKs/IPAs: Understand how to build and package your app for release on both platforms.</li> <li>Code Signing and Profiles: Set up signing keys and profiles for iOS and Android to prepare for app distribution.</li> </ul> </li> </ol> Key Resources: <ul> <li>Official Docs: React Native Documentation</li> <li>React Navigation Docs: React Navigation</li> <li>React Native Testing Library: Testing Library</li> <li>GitHub Repos: Study open-source React Native projects to learn best practices.</li> </ul> Focus Areas for a Dating App: <p>Given that you're developing a dating app, you should pay special attention to:</p> <ul> <li>Real-time features (like messaging).</li> <li>Push notifications for alerts and messages.</li> <li>Efficient state management for handling user profiles and matches.</li> <li>Media handling (image uploads, profile pictures, etc.).</li> </ul> <p>Mastering these topics will help you build a solid, efficient, and scalable React Native app!</p>"},{"location":"mobiledev/react-native/topic/#chat-functionality","title":"Chat Functionality","text":"<p>For real-time chat messaging in your React Native app, you have two main options to consider: Firebase and Django with WebSockets (using Django Channels). Each has its own advantages depending on your specific needs. Here's a breakdown to help you decide:</p> 1. Firebase (Firestore + Firebase Realtime Database)2. Django + WebSockets (Django Channels) <p>Firebase is a real-time, scalable, and managed backend solution that provides out-of-the-box real-time database functionality, which makes it a popular choice for chat apps.</p> <p>Advantages of Firebase:</p> <ul> <li>Real-time Database: Firebase Realtime Database and Firestore are built for real-time synchronization, which is ideal for chat features.</li> <li>Built-in Authentication: Firebase has easy-to-use authentication (Google, Facebook, Twitter, email, etc.), which is a huge plus for user management in a chat app.</li> <li>Push Notifications: Firebase Cloud Messaging (FCM) provides push notifications for new messages when the app is in the background.</li> <li>Scalability: Firebase scales easily without you needing to manage servers.</li> <li>Cross-Platform Support: You can use Firebase across iOS, Android, and the web seamlessly.</li> </ul> <p>Disadvantages of Firebase:</p> <ul> <li>Vendor Lock-in: You\u2019re tied to Firebase\u2019s ecosystem.</li> <li>Pricing: Firebase has a free tier, but real-time databases and scaling can become costly as your app grows.</li> <li>Limited Backend Customization: Firebase provides limited server-side logic customization compared to traditional backends.</li> </ul> <p>Best for:</p> <ul> <li>Fast, easy setup for real-time chat.</li> <li>When you don\u2019t want to manage a custom backend or server infrastructure.</li> <li>Small to medium-sized apps, especially if you plan on scaling quickly.</li> </ul> How to Implement Chat in Firebase: <ol> <li> <p>Set up Firebase in React Native: Install Firebase SDK and configure your app:</p> <pre><code>npm install --save @react-native-firebase/app @react-native-firebase/firestore\n</code></pre> </li> <li> <p>Real-time Chat Messaging using Firestore:</p> <p>You can use Firestore's real-time updates feature to listen for new messages and update the UI instantly.</p> <pre><code>import firestore from '@react-native-firebase/firestore';\n\n// To send a message:\nconst sendMessage = async (chatRoomId, message) =&gt; {\nawait firestore()\n    .collection('ChatRooms')\n    .doc(chatRoomId)\n    .collection('Messages')\n    .add({\n    text: message,\n    createdAt: firestore.FieldValue.serverTimestamp(),\n    userId: 'user123', // Replace with actual user id\n    });\n};\n\n// To listen for new messages in real-time:\nconst listenForMessages = (chatRoomId) =&gt; {\nreturn firestore()\n    .collection('ChatRooms')\n    .doc(chatRoomId)\n    .collection('Messages')\n    .orderBy('createdAt')\n    .onSnapshot((querySnapshot) =&gt; {\n    const messages = querySnapshot.docs.map((doc) =&gt; doc.data());\n    console.log(messages); // Update your UI with new messages\n    });\n};\n</code></pre> </li> </ol> <p>If you're already using Django for your backend, implementing real-time chat with WebSockets via Django Channels can be a powerful solution.</p> <p>Advantages of Django with WebSockets:</p> <ul> <li>Full Control: You control the backend and can customize your chat features as much as needed.</li> <li>Existing API: If you already have a Django API for your app, it's easier to extend your existing setup to include real-time messaging.</li> <li>Cost Control: You host and manage your server, which can be more cost-effective for larger-scale apps.</li> <li>Custom Logic: You can implement more advanced custom logic server-side for chat, including AI features like message filters, moderation, and chat analytics.</li> <li>Security: Easier to control the security of the system, especially if you need to comply with specific regulations (GDPR, etc.).</li> </ul> <p>Disadvantages of Django with WebSockets:</p> <ul> <li>More Setup: It\u2019s more complex to set up compared to Firebase.</li> <li>Server Management: You need to manage your servers, including scaling WebSocket connections.</li> <li>No Push Notifications Built-in: You would need a separate service (e.g., Firebase or OneSignal) to handle push notifications.</li> </ul> <p>Best for:</p> <ul> <li>When you already have a Django backend and want full control over your messaging system.</li> <li>When you need more advanced, customizable real-time features.</li> <li>If you plan on implementing complex server-side logic.</li> </ul> How to Implement Chat Using Django + WebSockets: <ol> <li> <p>Set up Django Channels:</p> <p>As mentioned earlier, Django Channels enables WebSockets for real-time communication in Django.</p> </li> <li> <p>Create WebSocket Endpoints:</p> <p>Use Django Channels to handle WebSocket connections for each chat room and manage sending and receiving messages in real-time.</p> </li> <li> <p>Connect WebSockets in React Native:</p> <p>Use the WebSocket API in React Native to connect to your Django Channels WebSocket endpoint.</p> <pre><code>const ws = new WebSocket('ws://your-backend-url/ws/chat/chatroom123/');\n\nws.onopen = () =&gt; {\nconsole.log('WebSocket connected');\n};\n\nws.onmessage = (e) =&gt; {\nconst message = JSON.parse(e.data);\nconsole.log(message); // Update the chat UI with the new message\n};\n\nconst sendMessage = (message) =&gt; {\nws.send(JSON.stringify({\n    message: message,\n}));\n};\n</code></pre> </li> <li> <p>Push Notifications:</p> <p>Implement push notifications (e.g., Firebase Cloud Messaging) for notifying users about new messages.</p> </li> </ol> Key Considerations: <ul> <li> <p>Real-Time Updates: Both Firebase and Django Channels can handle real-time updates. Firebase provides this out-of-the-box, while Django Channels requires setting up WebSocket connections.</p> </li> <li> <p>Scalability: If you\u2019re building a large-scale app that needs to scale quickly, Firebase can handle scaling automatically. With Django, you\u2019ll need to manage server scaling manually.</p> </li> <li> <p>Cost: Firebase offers a free tier, but costs can rise quickly as your user base grows. Django hosting can be cheaper in the long run, but it requires more management.</p> </li> <li> <p>Ease of Use: Firebase is easier to set up for real-time features, especially if you're starting from scratch. Django Channels gives you more flexibility but comes with more complexity.</p> </li> </ul> Recommendation: <ul> <li> <p>For Fast Setup &amp; Scalability: If you want to quickly add real-time chat functionality and don\u2019t want to manage server infrastructure, Firebase is a great choice. It will help you scale easily as your app grows.</p> </li> <li> <p>For Full Control &amp; Flexibility: If you\u2019re already using Django and want full control over the backend logic, Django with Channels is ideal, especially for more complex chat features that require custom server-side handling.</p> </li> </ul> <p>Let me know which direction you're leaning toward, and I can provide more detailed steps based on your choice!</p>"},{"location":"mobiledev/react-native/websocket/","title":"Websocket","text":""},{"location":"mobiledev/react-native/websocket/#introduction","title":"Introduction","text":"<p>WebSockets provide a solution to the limitations of HTTP when it comes to real-time, bidirectional communication. To understand why WebSockets are necessary and how they differ from HTTP, we need to explore both protocols in depth.</p>"},{"location":"mobiledev/react-native/websocket/#1-what-is-http","title":"1. What is HTTP?","text":"<p>HTTP (Hypertext Transfer Protocol) is the foundation of communication on the web. It is a request-response protocol, which means that a client (like a web browser or mobile app) makes a request to the server, and the server responds with the data.</p> How HTTP Works: <ul> <li>Client-initiated: The client sends an HTTP request to the server, and the server responds with the requested data (e.g., HTML, JSON).</li> <li>One-way communication: Once the server responds, the connection is closed.</li> <li>Stateless: Each request is independent. The server does not retain any memory of previous requests.</li> </ul> Limitations of HTTP: <ul> <li>No real-time updates: If the client needs updated information (like new chat messages), it has to keep asking the server by sending new requests.</li> <li>Polling required for real-time applications: To achieve a \"real-time\" effect, HTTP often relies on polling, which involves sending frequent requests to the server (e.g., every second). This is inefficient because most of the time, the server responds with nothing new, wasting resources.</li> <li>Latency: Even with techniques like polling or long polling, there's often a noticeable delay between sending and receiving data.</li> </ul>"},{"location":"mobiledev/react-native/websocket/#2-the-theory-behind-websockets","title":"2. The Theory Behind WebSockets","text":"<p>WebSockets were designed to overcome the limitations of HTTP by enabling full-duplex communication between a client and a server over a single, long-lived connection. They allow the server to push data to the client as soon as it's available, without the client needing to ask for updates repeatedly.</p> Key Concepts of WebSockets: <ul> <li>Full-duplex: WebSockets allow both the client and server to send messages to each other at any time. This is what \"bidirectional\" means: either side can initiate communication.</li> <li>Persistent connection: Unlike HTTP, WebSockets keep the connection open after the initial handshake, allowing continuous communication without the overhead of re-establishing a new connection.</li> <li>Low-latency communication: Because the connection is kept open, messages are sent and received almost instantly, making it suitable for real-time applications.</li> </ul> How WebSockets Work: <ol> <li> <p>Initial Handshake: WebSockets start as an HTTP connection. The client sends an HTTP request to initiate the WebSocket protocol, using a special header:</p> <pre><code>GET /chat HTTP/1.1\nHost: example.com\nUpgrade: websocket\nConnection: Upgrade\n</code></pre> <p>The <code>Upgrade: websocket</code> header tells the server that the client wants to switch from HTTP to WebSockets. If the server supports WebSockets, it responds with:</p> <pre><code>HTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\n</code></pre> <p>Once this handshake is complete, the connection switches from HTTP to WebSocket, and the connection remains open.</p> </li> <li> <p>Message Frames: After the handshake, data is sent over the WebSocket in small units called frames. These frames can carry text, binary data, or control information.</p> <ul> <li>Text Frames: For sending messages in a text format (e.g., JSON).</li> <li>Binary Frames: For sending binary data (e.g., images, files).</li> <li>Ping/Pong Frames: Keep the connection alive by checking whether the other side is still connected.</li> </ul> </li> <li> <p>Real-Time Communication: Once the connection is established, both the client and server can send messages to each other without needing to re-establish a connection. This makes WebSockets ideal for real-time applications like chat, live notifications, stock updates, gaming, etc.</p> </li> </ol>"},{"location":"mobiledev/react-native/websocket/#3-why-http-alone-cant-do-bidirectional-communication","title":"3. Why HTTP Alone Can't Do Bidirectional Communication","text":"<p>HTTP was designed for a request-response pattern. The inherent problem with HTTP for bidirectional communication is that it is unidirectional by nature:</p> <ul> <li>Client-driven: The client always initiates the request, and the server can only respond to the client\u2019s request. This means the server can't push data to the client unless the client asks for it.</li> <li>Connection overhead: Each time the client makes a request, it needs to establish a new connection, which is slow and inefficient for real-time communication.</li> <li>No event-driven communication: Since HTTP doesn't keep the connection open, there's no way for the server to notify the client of new events (e.g., new messages in a chat) without the client asking for updates.</li> </ul> <p>To simulate real-time communication over HTTP, developers use techniques like:</p> <ul> <li>Polling: The client repeatedly sends requests at regular intervals to check if there's new data (e.g., every second). This is inefficient and puts a heavy load on the server.</li> <li>Long Polling: The client sends a request, and the server holds the connection open until new data is available. The server responds once new data arrives, and the client immediately sends another request. This reduces the number of requests but still has latency issues.</li> <li>Server-Sent Events (SSE): This allows the server to push updates to the client over a single, one-way HTTP connection. While it solves some problems, it's still only one-way (server to client), not truly bidirectional.</li> </ul>"},{"location":"mobiledev/react-native/websocket/#4-advantages-of-websockets-over-http-for-real-time-communication","title":"4. Advantages of WebSockets Over HTTP for Real-Time Communication","text":"<ul> <li>Bidirectional communication: Both client and server can send and receive data simultaneously, which makes WebSockets perfect for real-time applications like chat systems, live feeds, and multiplayer games.</li> <li>Reduced latency: WebSockets eliminate the need for repeated HTTP requests, reducing latency and improving the responsiveness of the app.</li> <li>Less overhead: After the initial WebSocket handshake, the connection remains open, so there's no need to establish new connections for each message, reducing the overhead associated with HTTP.</li> <li>Scalability: WebSockets can handle many open connections without overwhelming the server, making them scalable for real-time applications.</li> </ul>"},{"location":"mobiledev/react-native/websocket/#5-when-to-use-websockets","title":"5. When to Use WebSockets","text":"<p>WebSockets are ideal when you need low-latency, real-time, bidirectional communication. Some common use cases include:</p> <ul> <li>Chat applications: Real-time messaging between users where both parties need to send and receive data instantly.</li> <li>Real-time notifications: Apps where the server needs to push updates to the client immediately (e.g., stock trading, sports scores).</li> <li>Collaborative apps: Real-time collaboration tools like Google Docs or whiteboard apps where multiple users work together in real time.</li> <li>Online multiplayer games: Games that require instant communication between players and the server.</li> <li>Live video/audio streaming: Where real-time feedback is essential.</li> </ul>"},{"location":"mobiledev/react-native/websocket/#6-comparison-between-websockets-and-http-techniques","title":"6. Comparison Between WebSockets and HTTP Techniques","text":"Feature HTTP Polling/Long Polling Server-Sent Events (SSE) WebSockets Connection Type Multiple short-lived connections Single one-way connection Single bidirectional connection Communication Client to server Server to client only Full-duplex (both directions) Latency High latency Medium latency Low latency Overhead High (many requests) Medium (fewer requests) Low (persistent connection) Scalability Limited Limited Scalable (many open connections) Use Cases Simple polling needs Push notifications, updates Real-time chat, gaming, etc."},{"location":"mobiledev/react-native/websocket/#7-potential-challenges-with-websockets","title":"7. Potential Challenges with WebSockets","text":"<ul> <li>Connection Management: You need to manage open WebSocket connections carefully, especially in large-scale applications.</li> <li>Load Balancing: WebSocket connections are long-lived, so load balancing WebSocket traffic can be more challenging than HTTP requests.</li> <li>Security: WebSockets require careful attention to security, such as handling authentication, protecting against attacks like cross-site WebSocket hijacking, and ensuring SSL/TLS encryption.</li> </ul>"},{"location":"mobiledev/react-native/websocket/#conclusion","title":"Conclusion:","text":"<ul> <li>HTTP is great for traditional web communication where the client initiates requests and the server responds with the requested data. But it is inefficient for real-time, bidirectional communication.</li> <li>WebSockets solve this problem by providing a persistent, full-duplex connection that allows both the server and the client to communicate in real-time without the need for constant reconnections.</li> </ul> <p>For applications like real-time chat, notifications, or collaborative apps, WebSockets are the most efficient and performant solution compared to using HTTP with polling or other techniques.</p>"},{"location":"mobiledev/react-native/websocket/#who-developed-web-socket","title":"Who developed web socket?","text":"<p>WebSockets were developed by Ian Hickson, a former member of the Google Chrome team and a key contributor to many web standards, including HTML5. WebSockets were initially proposed as part of the HTML5 specification and were later separated into their own specification by the Internet Engineering Task Force (IETF) and the World Wide Web Consortium (W3C).</p> <p>Timeline of WebSocket Development:</p> <ol> <li> <p>Initial Proposal (2008-2009): WebSockets were first proposed by Ian Hickson as part of the HTML5 specification, recognizing the need for a real-time, bidirectional communication protocol to overcome the limitations of HTTP.</p> </li> <li> <p>Standardization:</p> <ul> <li>The IETF (Internet Engineering Task Force) took over the protocol's development and defined it in RFC 6455 in 2011. This document officially specifies the WebSocket protocol.</li> <li>Meanwhile, the W3C (World Wide Web Consortium) developed the API specification for WebSockets, which is now part of the broader HTML5 specification.</li> </ul> </li> <li> <p>Adoption: Major web browsers like Google Chrome, Mozilla Firefox, and Safari began supporting WebSockets around 2010-2011, making it a widely accepted standard for real-time web applications.</p> </li> </ol> <p>Since then, WebSockets have become a fundamental tool for building modern, real-time web applications such as chat systems, live updates, and multiplayer games.</p>"},{"location":"mobiledev/react-native/websocket/#websockets-usage","title":"WebSockets Usage:","text":"<p>Yes, WebSockets are available in most modern programming languages and frameworks, thanks to their standardized protocol (RFC 6455). Since WebSockets are a protocol for bidirectional communication, language-specific libraries or frameworks handle the implementation, making it easy to use WebSockets across different platforms.</p> JavaScriptNode.js2. Python3. PHP <ul> <li>Client-side: WebSocket support is built into all modern browsers. You can directly use the <code>WebSocket</code> API.</li> </ul> <pre><code>const socket = new WebSocket('ws://example.com/socket');\nsocket.onmessage = (event) =&gt; console.log(event.data);\n</code></pre> <ul> <li>Server-side: In Node.js, WebSocket support is provided by libraries like <code>ws</code>, <code>Socket.IO</code>, and <code>uWebSockets.js</code>.</li> </ul> <pre><code>const WebSocket = require('ws');\nconst server = new WebSocket.Server({ port: 8080 });\nserver.on('connection', (ws) =&gt; {\n    ws.on('message', (message) =&gt; console.log(message));\n});\n</code></pre> <ul> <li> <p>Libraries: WebSocket libraries like <code>websockets</code>, <code>Socket.IO</code> (via <code>python-socketio</code>), and <code>FastAPI</code> (with native WebSocket support) are commonly used.</p> <pre><code>import asyncio\nimport websockets\n\nasync def echo(websocket, path):\n    async for message in websocket:\n        await websocket.send(message)\n\nstart_server = websockets.serve(echo, \"localhost\", 8765)\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()\n</code></pre> </li> </ul> <ul> <li> <p>Libraries: <code>Ratchet</code>, <code>Socket.IO</code> PHP, and <code>Workerman</code> provide WebSocket functionality.\"</p> <pre><code>use Ratchet\\MessageComponentInterface;\nuse Ratchet\\ConnectionInterface;\n\nclass WebSocketServer implements MessageComponentInterface {\n    public function onMessage(ConnectionInterface $from, $msg) {\n        foreach ($this-&gt;clients as $client) {\n            $client-&gt;send($msg);\n        }\n    }\n}\n</code></pre> </li> </ul> <p>WebSockets are widely supported across nearly all programming languages. Each language offers its own set of libraries or frameworks to handle WebSocket connections, making it easy to implement real-time, bidirectional communication in a variety of environments.</p>"},{"location":"research/ai/","title":"AI","text":""},{"location":"research/ai/#the-relation-between-ai-ml-and-dl","title":"The relation between AI, ML, and DL","text":""},{"location":"research/ai/#types-of-ai","title":"Types of AI","text":"<p>There are actually several types of AI. The popular ones are the following:</p> <ol> <li>Fuzzy systems</li> <li>Expert systems</li> <li>ML systems</li> </ol>"},{"location":"research/ai/#factors-responsible-for-ai-propulsion","title":"Factors responsible for AI propulsion","text":"<p>The major factors that are driving the AI force are the following:</p> <ul> <li>Data</li> <li>Algorithmic advancements</li> <li>Computer hardware advancements</li> <li>The democratization of high-performance computing</li> </ul>"},{"location":"research/ai/#ml-the-most-popular-form-of-ai","title":"ML \u2013 the most popular form of AI","text":""},{"location":"research/ai/#types-of-ml","title":"Types of ML","text":"<ul> <li>Supervised learning</li> <li>Unsupervised learning</li> <li>Reinforcement learning</li> <li>Semi-supervised learning</li> </ul>"},{"location":"research/ai/#defination","title":"Defination","text":""},{"location":"research/ai/#monte-carlo-simulation","title":"Monte Carlo simulation","text":"<p>Monte Carlo simulation is a technique used to approximate the probability of an event by running the same simulation multiple times and averaging the results.</p>"},{"location":"research/css-bootstrap/","title":"CSS & Bootstrap","text":""},{"location":"research/css-bootstrap/#css","title":"CSS","text":"<pre><code>.truncate {\n  text-overflow: ellipsis;\n\n  /* Needed to make it work */\n  overflow: hidden;\n  white-space: nowrap;\n}\n</code></pre> <p>Nice nice, that\u2019s a good start. But what if we want to introduce the ellipsis not on the first line but somewhere, say, the third line of text?</p> <p>That\u2019s where line-clamp comes into play. Just note that a combination of three properties are used to make it happen:</p> <pre><code>.line-clamp {\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;  \n  overflow: hidden;\n}\n</code></pre>"},{"location":"research/css-bootstrap/#reference","title":"Reference","text":"<ul> <li>line-clamp</li> <li> <p>-webkit-line-clamp</p> </li> <li> <p>redis - outdated</p> </li> <li> <p>redis</p> </li> <li> <p>metro.co.uk</p> </li> </ul>"},{"location":"research/css-bootstrap/#css_1","title":"CSS","text":"<p>bootstrap order</p> <pre><code>&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md-12\"&gt;\n            &lt;h1&gt;{{ abouts.title }}&lt;/h1&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-md-6 order-2 order-md-1\"&gt;\n            &lt;p&gt;{{ abouts.description }}&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-md-6 order-1 order-md-2\"&gt;\n            {% if abouts.image %}\n                &lt;img src=\"{{ abouts.image.url }}\" alt=\"{{ abouts.title }}\"&gt;\n            {% endif %}\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"research/css-bootstrap/#css-variables","title":"CSS Variables","text":"<p>The <code>var()</code> function is used to insert the value of a CSS variable.</p>"},{"location":"research/js-prevent-default/","title":"prevent default","text":"<p>The <code>e.preventDefault()</code> method is a common practice in JavaScript when handling events, especially form submissions. It is used to prevent the default behavior associated with an event.</p> <p>In the context of a form submission:</p> <ul> <li> <p>Without e.preventDefault(): If you don't prevent the default behavior of a form submission, the browser will perform its default action, which usually involves sending a request to the server, causing a page reload or navigation.</p> </li> <li> <p>With e.preventDefault(): By calling <code>e.preventDefault()</code> within an event handler, you stop the default action associated with that event. In the case of a form submission, it prevents the browser from navigating away from the current page or triggering a full page reload.</p> </li> </ul> <pre><code>const handleSubmit = (e) =&gt; {\n  e.preventDefault(); // Prevent the default form submission behavior\n\n  // Your custom logic for handling the form submission goes here\n};\n</code></pre>"},{"location":"research/micro-frontend/","title":"Micro-Frontend","text":""},{"location":"research/micro-frontend/#installation","title":"Installation","text":"<pre><code>npm install --global create-single-spa\n\n# or\n\nyarn global add create-single-spa\n</code></pre> <p>Then run the following:</p> <p>create-single-spa</p> <pre><code>npm init single-spa\n\n# \nnpm init single-spa\n\n# or\n\nnpx create-single-spa\n\n# or\n\nyarn create single-spa\n</code></pre>"},{"location":"research/micro-frontend/#decision-framework","title":"Decision Framework","text":"<p>To summarize, the micro-frontends decisions framework is composed of four key decisions: </p> <ol> <li>identifying,</li> <li>composing,</li> <li>routing, &amp;</li> <li>communicating. </li> </ol> <p></p>"},{"location":"research/micro-frontend/#routing-micro-frontends","title":"Routing Micro-Frontends","text":"<p>We won\u2019t have any scalability issue in either case. The client-side routing is highly recommended when your teams have stronger frontend skills so that it becomes natural having a client-side routing over a backend configuration.</p>"},{"location":"research/micro-frontend/#reference","title":"Reference","text":"<ul> <li>create-single-spa</li> <li>Building Micro-Frontends by Luca Mezzalira</li> </ul>"},{"location":"research/rabbitmq-celery/","title":"Rabbitmq & Celery","text":""},{"location":"research/rabbitmq-celery/#rabbitmq","title":"RabbitMQ","text":""},{"location":"research/rabbitmq-celery/#introduction","title":"Introduction","text":"<p>\u201cRabbitMQ is a message broker: it accepts and forwards messages. You can think about it as a post office: when you put the mail that you want posting in a post box, you can be sure that the letter carrier will eventually deliver the mail to your recipient. In this analogy, RabbitMQ is a post box, a post office, and a letter carrier.\u201d (1)</p> <p>It has developed by Erlang open source langua</p> <p></p> <p>Why we need to use RabbitMQ?</p> <p>Now that you know what RabbitMQ is, the next question is: why should you use a queue instead of directly sending data from one microservice to the other one. There are a couple of reasons why using a queue instead of directly sending data is better (2)</p> <ul> <li>Higher availability and better error handling</li> <li>Better scalability</li> <li>Share data with whoever wants/needs it</li> <li>Better user experience due to asynchronous processing</li> </ul> <p>As for usage areas, it will make our job much easier to perform tasks that do not need to be synchronized, such as sending mail, basket operations after adding an order on our e-commerce page, and export (excel, csv) data. (Generally \u201cMessage brokers\u201d).</p> <p></p> <p>The main parts of the rabbitmq:</p> <ul> <li>A <code>producer</code> is a user application that sends messages.</li> <li>A <code>queue</code> is a buffer that stores messages.</li> <li>A <code>consumer</code> is a user application that receives message</li> </ul>"},{"location":"research/rabbitmq-celery/#setup","title":"Setup","text":"<pre><code>// Installation\n$ choco install rabbitmq\n\n// install without any\n$ choco install rabbitmq --yes\n\n// rabbitmqctl \u2014 tool for managing RabbitMQ nodes\n# rabbitmqctl status\n</code></pre> <pre><code>// Windows \u2013 RabbitMQ has Nodedown Error (Solved)\n\n1. Run RabbitMQ sbin command prompt as administrator.\n2. Run \"rabbitmq-service remove\"\n3. Run \"rabbitmq-service install\"\n</code></pre>"},{"location":"research/rabbitmq-celery/#rabbitmq-enable-web-management-plugin","title":"RabbitMQ Enable Web Management Plugin","text":"<p>To enable a rabbitmq web management plugin on windows, we need to start <code>RabbitMQ</code> Command Prompt with administrator privilege, enter the command \u201c<code>rabbitmq-plugins enable rabbitmq_management</code>\u201d and execute it.</p> <pre><code>$ rabbitmq-plugins enable rabbitmq_management\n\n// open a url\nhttp://localhost:15672\n\n\n// To access rabbitmq web management dashboard, the default Username and password of  is \u201cguest\u201d (Username: \u201cguest\u201d | Password: \u201cguest\u201d).\nUsername: guest\nPassword: guest\n</code></pre>"},{"location":"research/rabbitmq-celery/#reference","title":"Reference","text":"<ul> <li>rabbitmq install using choco</li> <li>RabbitMQ Installation on Windows</li> <li>RabbitMQ - Installation: Tutorial</li> <li>Rabbit MQ - Publish/Subscribe</li> <li>RabbitMQ Producer and Consumer Solution with Docker in .net Core</li> <li>Part 1: RabbitMQ for beginners - What is RabbitMQ?</li> <li>rabbitmqctl - guide</li> <li>How to Use RabbitMQ in ASP.NET Core</li> <li>How do I verify my version of RabbitMQ?</li> </ul>"},{"location":"research/rabbitmq-celery/#solved","title":"Solved","text":"<ul> <li>Unable to perform an operation on node rabbitmq</li> </ul>"},{"location":"research/rabbitmq-celery/#celery","title":"Celery","text":"<p>Yes, you can definitely use RabbitMQ and Celery together without Redis or any other additional message broker. RabbitMQ is a powerful message broker that works seamlessly with Celery.</p> <p>What is pyamqp. Do i need to install it ?</p> <p>The pyamqp in the Celery configuration URL (pyamqp://...) refers to the protocol used by Celery to communicate with message brokers that support the Advanced Message Queuing Protocol (AMQP). AMQP is a messaging standard that allows applications to communicate with each other via message queues.</p> <p>pyamqp is actually a library that Celery uses to handle the AMQP protocol. It's part of the Celery dependencies, and you don't need to install it separately. When you install Celery using pip install celery, it automatically installs the required dependencies, including pyamqp.</p> <p>So, in your Celery configuration, when you see pyamqp://..., it specifies the use of the AMQP protocol for communication between Celery and the RabbitMQ message broker. The pyamqp library is included with Celery, and you don't need to explicitly install it.</p> <p>Here are the steps to use RabbitMQ and Celery:</p>"},{"location":"research/rabbitmq-celery/#step-1-install-celery-and-rabbitmq","title":"Step 1: Install Celery and RabbitMQ","text":"<pre><code>pip install celery\n</code></pre> <p>Install RabbitMQ by following the instructions on the official RabbitMQ website: RabbitMQ Installation Guide</p>"},{"location":"research/rabbitmq-celery/#step-2-configure-django-settings","title":"Step 2: Configure Django Settings","text":"<p>In your Django project's settings.py, configure Celery to use RabbitMQ:</p> <pre><code># settings.py\n\n# Celery configuration\n# CELERY_BROKER_URL = 'pyamqp://guest:guest@localhost//'  # Replace with your RabbitMQ URL\n# using rabbit mq URL\nCELERY_BROKER_URL = 'pyamqp://guest:guest@localhost:5672/#/'\nCELERY_RESULT_BACKEND = 'rpc://'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'\n</code></pre> <p>Replace the <code>CELERY_BROKER_URL</code> with your RabbitMQ connection details.</p>"},{"location":"research/rabbitmq-celery/#step-3-create-a-celery-instance","title":"Step 3: Create a Celery Instance","text":"<p>Create a file named <code>celery.py</code> in your Django project directory:</p> <pre><code># celery.py\n\nfrom __future__ import absolute_import, unicode_literals\nimport os\nfrom celery import Celery\n\n# Set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')\n\n# Create a Celery instance and configure it using the settings from Django.\napp = Celery('your_project')\n\n# Load task modules from all registered Django app configs.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n# Auto-discover tasks in all installed apps\napp.autodiscover_tasks()\n</code></pre>"},{"location":"research/rabbitmq-celery/#step-4-create-celery-tasks","title":"Step 4: Create Celery Tasks","text":"<p>Create a <code>tasks.py</code> file in one of your Django apps and define the tasks you want to execute asynchronously.</p> <pre><code># your_app/tasks.py\n\nfrom celery import shared_task\nfrom time import sleep\n\n@shared_task\ndef example_task(seconds):\n    sleep(seconds)\n    return f'Task completed after {seconds} seconds'\n</code></pre>"},{"location":"research/rabbitmq-celery/#step-5-use-celery-in-django-views-or-models-additional","title":"Step 5: Use Celery in Django Views or Models (ADDITIONAL)","text":"<p>Now, you can use the Celery task in your Django views, models, or other parts of your application</p> <pre><code># views.py\n\nfrom django.shortcuts import render\nfrom your_app.tasks import example_task\n\ndef my_view(request):\n    # Trigger the Celery task\n    result = example_task.delay(10)  # Run the task asynchronously\n\n    return render(request, 'your_template.html', {'result_id': result.id})\n</code></pre>"},{"location":"research/rabbitmq-celery/#step-6-run-celery-worker","title":"Step 6: Run Celery Worker","text":"<p>Open a terminal and run the Celery worker:</p> <pre><code>celery -A your_project worker -l info\n</code></pre>"},{"location":"research/rabbitmq-celery/#step-7-start-django-development-server-additional","title":"Step 7: Start Django Development Server (ADDITIONAL)","text":"<p>Run your Django development server:</p> <pre><code>python manage.py runserver\n</code></pre> <p>Now, when you access the view that triggers the Celery task, the task will be processed by the Celery worker in the background.</p> <p>Remember to refer to the official documentation for Celery (https://docs.celeryproject.org/) for more advanced configurations and options.</p> <p>NOTES</p> <p>Replace <code>your_project</code> with the actual name of your Django project.</p> <p>Now, you can use Celery as described in your Django views, models, or other parts of your application. Tasks will be processed by the Celery worker, and messages will be exchanged through RabbitMQ.</p> <p>Remember to refer to the official documentation for Celery and RabbitMQ for more advanced configurations and options:</p> <ul> <li>Celery Documentation</li> <li>RabbitMQ Documentation</li> </ul> <ul> <li>Building Scalable Applications with Django, Celery, and RabbitMQ</li> </ul>"},{"location":"research/reference/","title":"Reference","text":"<p>Reference</p>"},{"location":"research/reference/#npm-packages","title":"npm packages","text":"<ul> <li>react-number-format - npm</li> <li>emoji-picker-react - npm</li> <li>react-scroll-up -npm</li> <li>react-accessible-treeview</li> <li>react-social-login-buttons</li> <li>react-use-is-online</li> <li>react-youtube</li> <li>react-infinite-scroll-component: github</li> <li>react-input-emoji: github</li> </ul>"},{"location":"research/reference/#docs","title":"Docs","text":"<ul> <li>devdocs.io</li> <li>Design system repo</li> <li>tinymce.Editor</li> <li>react component library</li> </ul>"},{"location":"research/reference/#guide","title":"Guide","text":"<ul> <li>How to setup Infinite Scroll in your react component? </li> <li>Math.sign() - JavaScript | MDN</li> <li>Check if Value is Negative or Positive Number in JavaScript</li> <li>Javascript Program to Check if a number is Positive, Negative, or Zero</li> <li>How to Create Register and Login API using Django Rest Framework and Token Authentication</li> <li>Login and Register User \u2014 Django Rest Framework</li> <li>User Registration, Login, Logout API using Django Rest Framework</li> <li>Django REST Framework Basics</li> <li>Official Django REST Framework Tutorial - A Beginners Guide</li> <li>beautiful-react-hooks - github</li> <li>How to Make Ant Design Table (AntD) in React JS</li> <li>How To Debug React Apps With VS Code</li> <li>15 Useful Lodash Methods for Everyday Coding (Part-1)</li> <li>How do i get rid of the yesterday, today stuff in folders </li> <li>7 Best Steps For Writing Good Software Technical Documentation</li> <li> create-mf-app</li> <li>Micro Frontend Architecture Approach Selection Framework</li> <li>Micro Frontend by Module Federation with react-router-dom v6 - stackoverflow</li> <li>Why React Router is excellent for Micro-Frontends </li> <li>Micro Frontend Architecture and Challenges: Decision Framework</li> <li>The State of Micro Frontends</li> <li>Breaking down the last Monolith - Micro Frontends</li> <li>Reverse Chat Messages List Infinite Scroll - sandbox</li> <li>inverse infinite scroll react: sandbox</li> <li>25+ Slack slash commands every power user needs to know</li> <li>25+ Slash Commands to Help You be More Productive on Slack</li> <li>How to Develop Microfrontends Using React: Step-by-Step Guide</li> </ul>"},{"location":"research/reference/#microfrontend","title":"Microfrontend","text":"<ul> <li> react-micro-frontend: github repo</li> <li>Microfrontends using React: The Complete Guide</li> <li>single-spa</li> <li>Building Micro Frontends With React</li> <li>Mastering Microfrontends: Routing and Communication</li> <li>Micro-Frontends With React &amp; Vite Module Federation</li> <li>Module Federation in Production</li> </ul>"},{"location":"research/reference/#best","title":"BEST","text":"<ul> <li>How to Implement Tokenization using JWT and Django Rest Framework</li> <li>How to Use JWT Authentication with Django REST Framework</li> <li>How to use different git emails for personal and work repositories on the same machine</li> <li>How to configure Git with multiple emails?</li> <li>The React Handbook</li> </ul>"},{"location":"research/reference/#short-book","title":"Short Book","text":"<ul> <li>useEffect By Exampl by Max Rozen</li> <li>Building Micro-Frontends by Luca Mezzalira</li> </ul>"},{"location":"research/reference/#issue-solved","title":"Issue Solved","text":"<ul> <li>How to disable git gpg signing</li> <li>How To Debug React Apps With VS Code</li> </ul>"},{"location":"research/reference/#youtube","title":"Youtube","text":"<ul> <li>How To NOT Get Screwed As A Software Engineer</li> <li>We Sold Our Startup &amp; Filmed Everything!</li> <li>Micro Frontends - Routing between remotes - youtube</li> </ul>"},{"location":"research/reference/#best-notes","title":"BEST NOTES","text":"<ul> <li>How to Implement Tokenization using JWT and Django Rest Framework</li> <li>How to Use JWT Authentication with Django REST Framework</li> <li>How to use different git emails for personal and work repositories on the same machine</li> <li> <p>How to configure Git with multiple emails?</p> </li> <li> <p>How to Develop Microfrontends Using React: Step-by-Step Guide</p> </li> </ul>"},{"location":"research/repositories/","title":"Repositories","text":"<ul> <li>awesome-css-frameworks</li> <li>Top GitHub repositories which everyone should look</li> </ul>"},{"location":"research/tricks/","title":"Tips & Tricks","text":""},{"location":"research/tricks/#on-linux","title":"On Linux","text":"<p>python3 -m venv venv &amp;&amp; source venv/bin/activate</p>"},{"location":"research/tricks/#on-windows","title":"On Windows","text":"<p>.\\venv\\Scripts\\activate</p>"},{"location":"research/tricks/#python","title":"Python","text":"<pre><code>$ python manage.py shell\n\n# create the object using the model\n\n&gt; from geeks.models import GeeksModel\n&gt; GeeksModel.objects.create(title=\"title1\",description=\"description1\").save()\n&gt; GeeksModel.objects.create(title=\"title2\",description=\"description2\").save()\n</code></pre>"},{"location":"research/tricks/#_1","title":"Tips & Tricks","text":"<p>https://semver.org/</p>"},{"location":"research/tricks/#youtube","title":"Youtube","text":""},{"location":"research/tricks/#learning-and-growing","title":"Learning and Growing","text":"<p>You should be reading (or watching or listening to) technical content every single weekday.</p> <ol> <li>Read Every Day: The Practice of Study</li> </ol>"},{"location":"research/tricks/#javascript-methods-categorized-based-on-their-purpose","title":"JavaScript methods categorized based on their purpose:","text":"<ol> <li> <p>Manipulation Methods:</p> <ul> <li>Array Manipulation: Methods that modify arrays, like <code>push()</code>, <code>pop()</code>, <code>shift()</code>, <code>unshift()</code>, <code>splice()</code>, <code>sort()</code>, <code>reverse()</code>, <code>fill()</code>, <code>copyWithin()</code>.</li> <li>String Manipulation: Methods that modify strings, like <code>concat()</code>, <code>slice()</code>, <code>substring()</code>, <code>replace()</code>, <code>trim()</code>, <code>toUpperCase()</code>, <code>toLowerCase()</code>.</li> </ul> </li> <li> <p>Access Methods:</p> <ul> <li>Array Access: Methods to access array elements, like <code>indexOf()</code>, <code>lastIndexOf()</code>, <code>includes()</code>, <code>find()</code>, <code>findIndex()</code>.</li> <li>String Access: Methods to access string properties, like <code>charAt()</code>, <code>charCodeAt()</code>, <code>substring()</code>.</li> </ul> </li> <li> <p>Iteration Methods:</p> <ul> <li>Array Iteration: Methods to iterate over arrays, like <code>forEach()</code>, <code>map()</code>, <code>filter()</code>, <code>reduce()</code>, <code>some()</code>, <code>every()</code>.</li> <li>String Iteration: Methods to iterate over strings, like <code>charAt()</code>, <code>charCodeAt()</code>, <code>substring()</code>.</li> </ul> </li> <li> <p>Comparison Methods:</p> <ul> <li>Equality Comparison: Methods to compare values, like <code>===</code>, <code>!==</code>.</li> <li>Sorting Comparison: Methods to define sorting order, like <code>sort()</code>.</li> </ul> </li> <li> <p>Conversion Methods:</p> <ul> <li>Type Conversion: Methods to convert between different data types, like <code>toString()</code>, <code>parseInt()</code>, <code>parseFloat()</code>.</li> <li>Format Conversion: Methods to convert data format, like <code>JSON.stringify()</code>, <code>JSON.parse()</code>.</li> </ul> </li> <li> <p>Validation Methods:</p> <ul> <li>Data Validation: Methods to validate data, like <code>isNaN()</code>, <code>isFinite()</code>.</li> <li>String Validation: Methods to validate strings, like <code>startsWith()</code>, <code>endsWith()</code>, <code>includes()</code>.</li> </ul> </li> <li> <p>Utility Methods:</p> <ul> <li>Math Utility: Methods for mathematical operations, like <code>Math.abs()</code>, <code>Math.max()</code>, <code>Math.min()</code>, <code>Math.round()</code>.</li> <li>Time Utility: Methods for time-related operations, like <code>setTimeout()</code>, <code>setInterval()</code>, <code>Date.now()</code>.</li> </ul> </li> </ol> <p>These categories help in understanding the purpose of different methods in JavaScript and how they can be used to achieve specific tasks in programming.</p>"},{"location":"research/wordpress/","title":"Wordpress","text":"<ul> <li>How to install WordPress: Official</li> <li>How to install WordPress with Ubuntu 20.04 and a LAMP Stack</li> <li>Installing WordPress: 6 Easy Steps</li> <li>WordPress - Theme Management : tutorial</li> </ul>"},{"location":"tools/cronjob/","title":"CronJob","text":"<p>cronjob</p>"},{"location":"tools/intro/","title":"Intro","text":""},{"location":"tools/intro/#top-tier-programmer","title":"Top-tier Programmer","text":"<p>To become a top-tier or \"god-level\" programmer, mastering a combination of tools, languages, and concepts is essential. Here's a comprehensive list:</p>"},{"location":"tools/intro/#languages-and-frameworks","title":"Languages and Frameworks","text":"Abstract <ol> <li> <p>Programming Languages:</p> <ul> <li>JavaScript/TypeScript: Essential for web development.</li> <li>Python: Versatile and widely used in web development, data science, and automation.</li> <li>Java: Crucial for enterprise applications.</li> <li>C/C++: Important for system-level programming and performance-critical applications.</li> <li>Rust: Growing in popularity for system-level and performance-critical applications.</li> <li>Go: Excellent for backend development and microservices.</li> </ul> </li> <li> <p>Web Development:</p> <ul> <li>React/Vue/Angular: Leading front-end frameworks.</li> <li>Node.js: Server-side JavaScript.</li> <li>Django/Flask: Python web frameworks.</li> <li>Spring: Java web framework.</li> </ul> </li> <li> <p>Mobile Development:</p> <ul> <li>Flutter: Cross-platform mobile development.</li> <li>React Native: JavaScript framework for mobile apps.</li> </ul> </li> </ol>"},{"location":"tools/intro/#tools-and-technologies","title":"Tools and Technologies","text":"Abstract <ol> <li> <p>Version Control:</p> <ul> <li>Git: Mastering Git is non-negotiable.</li> <li>GitHub/GitLab/Bitbucket: Platforms for Git repositories and collaboration.</li> </ul> </li> <li> <p>Development Environments:</p> <ul> <li>VSCode: A versatile code editor with a vast ecosystem of extensions.</li> <li>IntelliJ IDEA: Excellent for Java and other JVM languages.</li> <li>PyCharm: Great for Python development.</li> </ul> </li> <li> <p>Containerization and Orchestration:</p> <ul> <li>Docker: Containerization platform.</li> <li>Kubernetes: Container orchestration.</li> </ul> </li> <li> <p>CI/CD:</p> <ul> <li>Jenkins: Automation server.</li> <li>CircleCI/Travis CI/GitHub Actions: Continuous integration and deployment tools.</li> </ul> </li> <li> <p>Database Management:</p> <ul> <li>SQL: MySQL, PostgreSQL.</li> <li>NoSQL: MongoDB, Redis.</li> </ul> </li> <li> <p>Cloud Platforms:</p> <ul> <li>AWS: Leading cloud service provider.</li> <li>Google Cloud Platform (GCP).</li> <li>Microsoft Azure.</li> </ul> </li> <li> <p>Monitoring and Logging:</p> <ul> <li>Prometheus/Grafana: Monitoring and alerting toolkit.</li> <li>ELK Stack (Elasticsearch, Logstash, Kibana): Logging and analytics.</li> </ul> </li> </ol>"},{"location":"tools/intro/#concepts-and-practices","title":"Concepts and Practices","text":"Abstract <ol> <li> <p>Design Patterns:</p> <ul> <li>Understanding and applying common design patterns.</li> </ul> </li> <li> <p>Algorithms and Data Structures:</p> <ul> <li>Essential for problem-solving and coding interviews.</li> </ul> </li> <li> <p>Software Architecture:</p> <ul> <li>Microservices, monolithic architecture, serverless architecture.</li> </ul> </li> <li> <p>Testing:</p> <ul> <li>Unit testing, integration testing, end-to-end testing.</li> <li>Tools: Jest, Mocha, JUnit, Selenium.</li> </ul> </li> <li> <p>Security:</p> <ul> <li>Secure coding practices.</li> <li>Understanding common vulnerabilities (e.g., OWASP Top Ten).</li> </ul> </li> <li> <p>Performance Optimization:</p> <ul> <li>Profiling and optimizing code.</li> </ul> </li> <li> <p>DevOps:</p> <ul> <li>Infrastructure as code.</li> <li>CI/CD pipelines.</li> </ul> </li> </ol>"},{"location":"tools/intro/#soft-skills","title":"Soft Skills","text":"Abstract <ol> <li> <p>Problem-Solving:</p> <ul> <li>Critical thinking and analytical skills.</li> </ul> </li> <li> <p>Collaboration:</p> <ul> <li>Teamwork and communication.</li> </ul> </li> <li> <p>Continuous Learning:</p> <ul> <li>Staying updated with the latest trends and technologies.</li> </ul> </li> </ol>"},{"location":"tools/intro/#specialized-areas","title":"Specialized Areas","text":"Abstract <ol> <li> <p>Data Science and Machine Learning:</p> <ul> <li>Libraries: TensorFlow, PyTorch, Scikit-learn.</li> <li>Tools: Jupyter, Pandas.</li> </ul> </li> <li> <p>Blockchain Development:</p> <ul> <li>Understanding blockchain technology.</li> <li>Smart contracts: Solidity.</li> </ul> </li> <li> <p>AR/VR Development:</p> <ul> <li>Unity, Unreal Engine.</li> </ul> </li> </ol> <p>Mastering these tools, languages, and concepts will significantly enhance your programming skills and help you reach an advanced level in your career.</p>"},{"location":"tools/intro/#programming-paradigms","title":"Programming Paradigms","text":"<p>Becoming a top-tier developer and mastering different programming paradigms involves a combination of strategic learning and practical experience. Here\u2019s a step-by-step guide to help you achieve this:</p> 1. Understand Core Paradigms <ul> <li> <p>Imperative Programming: </p> <p>Focuses on how to perform tasks using statements that change a program\u2019s state. Languages: C, Python.</p> </li> <li> <p>Object-Oriented Programming (OOP):</p> <p>Organizes code into objects that combine data and behavior. Languages: Java, C++, Python.</p> </li> <li> <p>Functional Programming:</p> <p>Emphasizes immutability and functions as first-class citizens. Languages: Haskell, Scala, JavaScript.</p> </li> <li> <p>Declarative Programming:</p> <p>Focuses on what the program should accomplish rather than how. Languages: SQL, HTML.</p> </li> <li> <p>Procedural Programming:</p> <p>A subset of imperative programming that structures code into procedures. Languages: C, Pascal.</p> </li> </ul> 2. Learn the Basics <p>Read Books and Documentation: Start with classic books and online documentation that cover different paradigms.</p> <ul> <li>\"Design Patterns: Elements of Reusable Object-Oriented Software\" by Gamma et al. for OOP.</li> <li>\"Functional Programming in Scala\" by Paul Chiusano and R\u00fanar Bjarnason.</li> <li>\"The Pragmatic Programmer\" by Andrew Hunt and David Thomas for general software practices.</li> </ul> 3. Hands-On Practice <ul> <li>Build Projects: Start with small projects and gradually tackle more complex ones. Implement features using different paradigms to understand their advantages and trade-offs.</li> <li>Contribute to Open Source: Engage with projects that use various paradigms. This will expose you to different coding styles and architectural patterns.</li> </ul> 4. Explore Different Languages <ul> <li>For OOP: Java, C++, Python.</li> <li>For Functional Programming: Haskell, Elm, Scala.</li> <li>For Declarative Programming: SQL for databases, HTML/CSS for web design.</li> </ul> 5. Online Courses and Tutorials <ul> <li>Functional Programming: Coursera\u2019s Functional Programming in Scala or Haskell.</li> <li>OOP: Udemy courses on Java or C++.</li> <li>Declarative Programming: Codecademy\u2019s SQL and HTML/CSS courses.</li> </ul> 6. Join Communities and Forums <ul> <li>Participate in online communities such as Stack Overflow, Reddit, or specialized - forums for languages and paradigms.</li> <li>Attend meetups or conferences related to different paradigms.</li> </ul> 7. Review and Refactor Code <p>Regularly review and refactor your code to apply different paradigms effectively.Refactoring helps solidify your understanding and improve your coding practices.</p> 8. Mentorship and Peer Learning <p>Seek mentors who are proficient in different paradigms. Learning from experienced developers can provide valuable insights and guidance.</p> 9. Stay Updated with Trends <p>Follow industry blogs, podcasts, and news to keep up with the latest developments in different programming paradigms.</p> 10. Build a Diverse Portfolio <p>Showcase your skills in different paradigms through a diverse portfolio. This not only demonstrates your expertise but also provides practical examples of your work.</p> <p>By combining these approaches, you\u2019ll gain a broad and deep understanding of various programming paradigms, which is essential for becoming a top-tier developer.</p>"},{"location":"tools/intro/#react-vue-and-angular","title":"React, Vue, and Angular","text":"<p>React, Vue, and Angular primarily follow the declarative programming paradigm, with elements of component-based and functional programming. Here's how they fit into these paradigms:</p> <ol> <li> <p>Declarative Programming</p> <ul> <li>React, Vue, and Angular allow you to describe what the UI should look like based on the application's state, rather than providing step-by-step instructions on how to update the UI.</li> <li>For example, in React, you declare what the UI should render based on the state, and React takes care of updating the DOM to match that state.</li> </ul> </li> <li> <p>Component-Based Architecture</p> <ul> <li>All three frameworks/libraries use a component-based architecture, where the UI is divided into reusable components. Each component is a self-contained unit that manages its own state and logic.</li> <li>React: Components can be functional or class-based.</li> <li>Vue: Components are usually defined in .vue files with templates, scripts, and styles.</li> <li>Angular: Components are classes annotated with decorators like <code>@Component</code>.</li> </ul> </li> <li> <p>Functional Programming (FP) Elements</p> <ul> <li>React: Especially promotes functional programming principles. With the introduction of hooks (e.g., <code>useState</code>, <code>useEffect</code>), React encourages writing components as pure functions that return UI based on input props.</li> <li>Vue: While not as strongly functional as React, Vue 3 introduced the Composition API, which allows for more functional programming practices.</li> <li>Angular: Angular is more class-based and relies on OOP principles, but you can still incorporate functional programming principles, especially in state management and services.</li> </ul> </li> </ol> <p>Summary</p> <ul> <li>React: Declarative, component-based, and functional.</li> <li>Vue: Declarative, component-based, with some functional programming aspects.</li> <li>Angular: Declarative and component-based, with a strong focus on object-oriented programming but also supporting functional programming.</li> </ul> <p>These frameworks/libraries allow developers to write UI code declaratively, focusing on the \"what\" rather than the \"how,\" which simplifies the process of creating and maintaining complex user interfaces.</p>"},{"location":"tools/intro/#purely-functional-and-purely-declarative-paradigms","title":"Purely Functional and Purely Declarative Paradigms","text":""},{"location":"tools/intro/#purely-functional-programming","title":"Purely Functional Programming","text":"<ul> <li> <p>Languages: Haskell, Elm, PureScript.</p> </li> <li> <p>Characteristics:</p> <ul> <li>Immutability: Data cannot be modified after it's created.</li> <li>First-Class Functions: Functions are treated as values and can be passed as arguments, returned from other functions, and assigned to variables.</li> <li>No Side Effects: Functions always produce the same output for the same input and do not alter the state of the system.</li> <li>Pure Functions: Functions do not depend on external state or cause any observable effects beyond returning a value.</li> </ul> </li> </ul>"},{"location":"tools/intro/#purely-declarative-programming","title":"Purely Declarative Programming","text":"<ul> <li> <p>Languages: SQL, HTML, CSS, XAML.</p> </li> <li> <p>Characteristics:</p> <ul> <li>What Over How: You specify what you want the program to accomplish, and the language/framework determines how to achieve it.</li> <li>No Control Flow: Declarative code does not describe the flow of execution (e.g., loops or conditionals) but instead declares the desired outcome.</li> </ul> </li> </ul>"},{"location":"tools/intro/#question","title":"Question","text":""},{"location":"tools/intro/#question-1","title":"Question 1","text":"Why is React Called Declarative if It Has Functional Aspects? Declarative Programming in React: <ul> <li> <p>Declarative UI: In React, you describe the UI as a function of the application's state. You define what the UI should look like for a given state, and React handles the process of updating the DOM to match this state. This contrasts with imperative programming, where you would manually manipulate the DOM to achieve the desired UI.</p> </li> <li> <p>Example: In React, you write something like <code>return &lt;div&gt;{count}&lt;/div&gt;</code> to declare that the UI should display the value of <code>count</code>, and React automatically updates the DOM when <code>count</code> changes.</p> </li> </ul> Functional Programming in React: <ul> <li> <p>Pure Functions: React components, especially functional components, are encouraged to be pure functions\u2014taking props as input and returning UI as output without side effects.</p> </li> <li> <p>Hooks: React hooks like <code>useState</code> and <code>useEffect</code> introduce functional programming concepts into React components, enabling you to manage state and side effects in a functional style.</p> </li> </ul> <p>Why React is Both Declarative and Functional:</p> <ul> <li> <p>Declarative: React\u2019s declarative nature comes from how you define the UI. You describe what the UI should look like based on the state, without worrying about how React will update the DOM to match.</p> </li> <li> <p>Functional: React's functional aspects allow you to structure components as pure functions, making your code more predictable, testable, and easier to reason about.</p> </li> </ul> <p>Summary:</p> <ul> <li> <p>Pure Functional: Haskell, Elm\u2014strictly follow functional programming principles with no room for imperative code.</p> </li> <li> <p>Pure Declarative: SQL, HTML\u2014strictly focus on declaring the desired outcome without describing the process.</p> </li> <li> <p>React: Declarative in UI definition and functional in component structure, making it both declarative and functional but not purely one or the other.</p> </li> </ul>"},{"location":"tools/intro/#question-2","title":"Question 2","text":"Here\u2019s a pure declarative example using SQL, which is a purely declarative language. <p>Example: SQL Query</p> <pre><code>SELECT name, age\nFROM Users\nWHERE age &gt; 30\nORDER BY name ASC;\n</code></pre> <p>Explanation:</p> <ul> <li>What: This SQL query specifies what data to retrieve from the database\u2014namely, the name and age of users who are older than 30.</li> <li>Not How: The query does not specify how the database should retrieve, filter, or sort the data. The SQL engine decides the optimal way to execute the query.</li> </ul> <p>Characteristics of Pure Declarative Code in This Example:</p> <ul> <li>No Control Flow: The query doesn't contain loops, conditionals, or instructions on how to traverse the data. It simply declares the desired outcome.</li> <li>Focus on Outcome: You express the result you want, and the system handles the underlying process.</li> </ul> <p>Another Example: HTML</p> <pre><code>&lt;h1&gt;Welcome to My Website&lt;/h1&gt;\n&lt;p&gt;This is a simple paragraph.&lt;/p&gt;\n</code></pre> Explanation: <ul> <li>What: The HTML code declares what the structure of the webpage should be\u2014a heading followed by a paragraph.</li> <li>Not How: It doesn\u2019t specify how the browser should render the text, only what should be rendered.</li> </ul> Characteristics of Pure Declarative Code in This Example: <ul> <li>Structure Definition: The HTML only defines the structure and content of the page.</li> <li>No Behavior Control: There\u2019s no control over how the rendering process happens; that\u2019s handled by the browser.</li> </ul> <p>These examples illustrate how purely declarative code focuses entirely on what the desired outcome should be, leaving the underlying system or engine to figure out how to achieve it.</p>"},{"location":"tools/intro/#question-3","title":"Question 3","text":"then how react control flow <p>React, while declarative in nature, does allow for controlling flow within components through JavaScript logic. However, this control flow happens within the functional or class-based components, not at the level of the UI declaration itself. Here\u2019s how React handles control flow:</p> 1. Conditional Rendering <ul> <li> <p>If Statements:</p> <pre><code>function MyComponent({ isLoggedIn }) {\n    if (isLoggedIn) {\n        return &lt;h1&gt;Welcome back!&lt;/h1&gt;;\n    } else {\n        return &lt;h1&gt;Please sign in.&lt;/h1&gt;;\n    }\n}\n</code></pre> <ul> <li> <p>Explanation:</p> <p>You use an if statement to control which part of the UI should be rendered based on the isLoggedIn prop. This is imperative logic within a declarative UI structure.</p> </li> </ul> </li> <li> <p>Ternary Operator:</p> <pre><code>function MyComponent({ isLoggedIn }) {\n    return (\n        &lt;div&gt;\n            {isLoggedIn ? &lt;h1&gt;Welcome back!&lt;/h1&gt; : &lt;h1&gt;Please sign in.&lt;/h1&gt;}\n        &lt;/div&gt;\n    );\n}\n</code></pre> <ul> <li> <p>Explanation:</p> <p>The ternary operator is another way to control flow within a React component. It\u2019s a more concise way to handle conditional rendering.</p> </li> </ul> </li> </ul> 2. Looping Constructs <ul> <li> <p>Array.map():</p> <pre><code>function ItemList({ items }) {\n    return (\n        &lt;ul&gt;\n        {items.map(item =&gt; (\n            &lt;li key={item.id}&gt;{item.name}&lt;/li&gt;\n        ))}\n        &lt;/ul&gt;\n    );\n}\n</code></pre> <ul> <li> <p>Explanation:</p> <p>React uses JavaScript\u2019s array methods like <code>.map()</code> to iterate over items and render a list. This is a form of control flow that determines how many <code>&lt;li&gt;</code> elements will be rendered based on the <code>items</code> array.</p> </li> </ul> </li> </ul> 3. Event Handling <ul> <li> <p>onClick Events:</p> <pre><code>function MyButton() {\n    function handleClick() {\n        alert('Button clicked!');\n    }\n    return &lt;button onClick={handleClick}&gt;Click me&lt;/button&gt;;\n}\n</code></pre> <ul> <li> <p>Explanation:</p> <p>React controls what happens when a user interacts with the UI using event handlers. Here, the <code>handleClick</code> function runs when the button is clicked, introducing a controlled response to user interaction.</p> </li> </ul> </li> </ul> <p>How This Fits into Declarative Paradigm:</p> <ul> <li> <p>Declarative UI Definition: The core of React is still declarative\u2014you're describing what the UI should look like for a given state. When state changes, React automatically updates the UI.</p> </li> <li> <p>Control Flow Inside Components: React allows you to embed imperative control flow (like <code>if</code>, <code>else</code>, <code>loops</code>, etc.) within the component functions to determine how the UI should be constructed. This is where the functional programming aspects of React come into play.</p> </li> </ul> <p>Summary:</p> <ul> <li>React provides a declarative way to define UI components but allows for controlled, imperative logic within those components to manage control flow, event handling, and conditional rendering. This combination of declarative UI with embedded control logic is what makes React both powerful and flexible.</li> </ul>"},{"location":"tools/intro/#question-4","title":"Question 4","text":"so basically react is not pure, it is mix of everything <p>Yes, that's correct! React is not purely declarative or purely functional\u2014it\u2019s a hybrid that combines elements from various paradigms, making it both versatile and practical for modern web development. Here's a breakdown:</p> Mixed Paradigms in React <ol> <li> <p>Declarative UI:</p> <ul> <li>Declarative Nature: React allows you to describe what the UI should look like based on the current state. This is the core of React's declarative approach.</li> <li>Example: JSX syntax, where you declare what the UI should render.</li> </ul> </li> <li> <p>Functional Programming:</p> <ul> <li>Functional Components: React encourages writing components as functions, especially with the introduction of hooks, promoting immutability and pure functions.</li> <li>Example: Functional components with hooks like <code>useState</code> and <code>useEffect</code>.</li> </ul> </li> <li> <p>Imperative Logic:</p> <ul> <li>Control Flow: Within components, you can use traditional imperative logic, such as if-else statements, loops, and event handlers, to control the flow and behavior of the application.</li> <li>Example: Conditional rendering, event handling, and side effects within components.</li> </ul> </li> <li> <p>Component-Based Architecture:</p> <ul> <li>Reusability: React's component-based model allows for encapsulating behavior and UI into reusable, self-contained units.</li> <li>Example: Creating reusable components like buttons, forms, or complex UIs.</li> </ul> </li> <li> <p>Object-Oriented Programming (OOP):</p> <ul> <li>Class Components: While React is moving towards functional components, class-based components are still used and rely on OOP principles like inheritance and methods.</li> <li>Example: <code>class MyComponent extends React.Component {}</code>.</li> </ul> </li> </ol> Why This Mix is Beneficial: <ul> <li> <p>Flexibility: By mixing paradigms, React gives developers the flexibility to use the right tool for the job. You can use declarative UI definitions with functional or imperative logic depending on what makes the most sense for a particular task.</p> </li> <li> <p>Ease of Learning: React's declarative approach makes it easier to understand and reason about UI, while its support for imperative logic and functional components allows for powerful and flexible coding patterns.</p> </li> <li> <p>Performance: The combination of paradigms allows React to be both performant and developer-friendly, enabling optimizations like virtual DOM diffing while maintaining a straightforward development model.</p> </li> </ul> <p>Conclusion:</p> <p>React\u2019s strength lies in its ability to blend different programming paradigms \u2014 declarative, functional, imperative, and component-based \u2014 into a cohesive framework. This mix makes it adaptable to a wide range of use cases, from simple UI components to complex, interactive web applications.</p>"},{"location":"tools/intro/#question-5","title":"Question 5","text":"so all the language have imperative pardigm <p>Yes, almost all programming languages support the imperative paradigm because it forms the foundational model of how computers execute code. The imperative paradigm is deeply embedded in the way processors work\u2014executing instructions sequentially, manipulating memory, and using control structures to determine the flow of execution.</p> <p>Key Points:</p> <ul> <li> <p>Imperative Core: At a low level, all programming languages boil down to imperative instructions, as this is how hardware operates\u2014executing one instruction after another.</p> </li> <li> <p>Versatility: Most languages, even those that primarily support other paradigms (like functional or object-oriented), still allow imperative programming because it's versatile and essential for many tasks.</p> </li> </ul> <p>Examples of Languages Supporting Imperative Paradigm:</p> <ul> <li> <p>C/C++: Primarily imperative, with direct control over memory and hardware.</p> </li> <li> <p>Python: While Python supports multiple paradigms (imperative, object-oriented, and functional), it's often used imperatively, with loops, conditionals, and mutable state.</p> </li> <li> <p>Java: Object-oriented at its core, but imperative in how methods and loops are structured.</p> </li> <li> <p>JavaScript: Often used imperatively, especially in scripts manipulating the DOM or handling events.</p> </li> <li> <p>Ruby: Supports multiple paradigms but often used imperatively for scripting and procedural tasks.</p> </li> <li> <p>Assembly Language: The most direct form of imperative programming, where every instruction corresponds to a specific machine operation.</p> </li> </ul> <p>Hybrid Nature of Modern Languages:</p> <ul> <li> <p>Multi-Paradigm Languages: Most modern languages are multi-paradigm, meaning they support imperative programming alongside other paradigms like functional, object-oriented, or declarative. This makes them flexible and powerful, allowing developers to choose the best approach for a given problem.</p> </li> <li> <p>Example: JavaScript is a good example. You can write imperative code with loops and conditionals, use functional programming with first-class functions and higher-order functions, or even take a declarative approach with libraries like React.</p> </li> </ul> <p>Why Imperative is Universal:</p> <ul> <li> <p>Historical Roots: Imperative programming is one of the oldest paradigms, closely aligned with the von Neumann architecture that underpins most computer systems.</p> </li> <li> <p>Ease of Understanding: It's intuitive because it mirrors how we think about processes\u2014do this, then do that.</p> </li> <li> <p>Control: It provides fine-grained control over what the computer is doing at each step, which is essential for performance-critical applications like system programming, real-time processing, and game development.</p> </li> </ul> <p>Summary:</p> <p>While languages may prioritize different paradigms (e.g., <code>functional</code> in Haskell, object-oriented in <code>Java</code>), they almost always include support for imperative programming because it aligns closely with how computers execute tasks. This makes imperative programming a fundamental part of nearly all programming languages.</p>"},{"location":"tools/git/git/","title":"Git","text":""},{"location":"tools/git/git/#git","title":"Git","text":"bash<pre><code>$ mkdir ~/my_website\n$ cd ~/my_website\n\n# the option -b followed by a default branch named main\n$ git init -b main\n\n# or you can intialize empty repo and add files later\n$ git init -b main ~/my_website\n$ cd ~/my_website\n$ echo 'My awesome website!' &gt; index.html\n</code></pre> <p>The <code>git init</code> command creates a hidden directory called .git at the root level of your project. All revision information along with supporting metadata and Git extensions are stored in this top-level, hidden .git folder.</p>"},{"location":"tools/git/git/#configuration-files","title":"Configuration Files","text":"<p>Git configuration files are all simple text files in the style of .ini files. The configuration files are used to store preferences and settings used by multiple git commands.</p> <p>Hierarchy of configuration files</p> <ul> <li><code>.git/config</code></li> </ul> <p>Repository-specific configuration settings manipulated with the <code>--file</code> option or by default. You can also write to this file with the <code>--local</code> option. These settings have the highest precedence.</p> <ul> <li><code>~/.gitconfig</code></li> </ul> <p>User-specific configuration settings manipulated with the <code>--global</code> option.</p> <ul> <li><code>/etc/gitconfig</code></li> </ul> <p>System-wide configuration settings manipulated with the <code>--system</code> option if you have proper Unix file write permissions on the gitconfig file. These settings have the lowest precedence. Depending on your installation, the system settings file might be somewhere else (perhaps in <code>/usr/local/etc</code> gitconfig) or may be absent entirely.</p>"},{"location":"tools/git/git/#notes","title":"Notes","text":"<pre><code># opens a git .config file\n\n$ git config --global -e\n</code></pre>"},{"location":"tools/git/git/#git-divergent-branches-issue","title":"git divergent branches issue","text":"<pre><code>git pull origin main --rebase\n</code></pre>"},{"location":"tools/git/git/#git-blame-command","title":"git blame <code>command</code>","text":""},{"location":"tools/git/git/#git-grep-command","title":"git grep <code>command</code>","text":"<p>To delete a branch on both your local repository and GitHub, you can follow these steps:</p>"},{"location":"tools/git/git/#deleting-locally","title":"Deleting Locally:","text":"<ol> <li> <p>Checkout a Different Branch:</p> <p>Before deleting the branch, ensure you're not currently on the branch you intend to delete. You can switch to another branch using:</p> <pre><code>git checkout &lt;different_branch&gt;\n</code></pre> </li> <li> <p>Delete the Branch: Use the following command to delete the branch locally:</p> <pre><code>git branch -d &lt;branch_name&gt;\n</code></pre> <p>If the branch has not been merged yet, you might need to use -D instead of -d to force delete.</p> </li> </ol>"},{"location":"tools/git/git/#deleting-on-github","title":"Deleting on GitHub:","text":"<ol> <li> <p>Push the Deletion: To delete the branch on GitHub, you need to push the deletion to the remote repository:</p> <pre><code>git push origin --delete &lt;branch_name&gt;\n</code></pre> <p>This command will delete the branch on GitHub (the origin remote).</p> </li> </ol> <p>To delete a branch on both your <code>local</code> repository and <code>GitHub</code>, you can follow these steps:</p>"},{"location":"tools/git/git/#images","title":"Images","text":"<ul> <li>Understanding the Git &amp; Github Workflow </li> <li>Git workflow diagram: reddit</li> </ul> <p>Workflow</p> <p></p>"},{"location":"tools/git/git/#reference","title":"Reference","text":"<ul> <li>Version Control with Git 3rd edition by Prem Kumar Ponuthorai &amp; Jon Loeliger</li> <li>Solved</li> <li>git divergent branches and need to specify how to reconcile them</li> <li>Git Error: You have divergent branches and need to specify how to reconcile them.</li> <li>Pulling without specifying how to reconcile divergent branches is discouraged</li> </ul>"},{"location":"tools/git/intro/","title":"Intro","text":"<p>git</p> <p></p> <p>Lorem ipsum dolor sit amet, </p> <p>consectetur adipiscing elit. Aliquam rutrum mauris urna, nec condimentum neque venenatis at. Fusce ornare, lorem non laoreet viverra, urna nibh dapibus metus, vel pellentesque leo sapien a arcu. Phasellus lacinia bibendum leo at efficitur. Suspendisse at luctus nisi. Etiam id sapien sollicitudin purus scelerisque faucibus eget id nunc. Sed tempus commodo lacinia. Aliquam eget leo quam. Fusce id nunc vitae nisl molestie lobortis nec vel quam. Nunc ac elit in dolor mollis ultrices. Etiam pharetra sagittis euismod. In varius nisi et consequat vulputate. Curabitur euismod a risus non gravida. </p> <p>Subscribe to our newsletter</p>"},{"location":"tools/git/resource/","title":"resource","text":"<ul> <li>15 github repos you need to bookmark asap</li> </ul>"},{"location":"tools/git/resource/#specific-links","title":"Specific Links","text":"<ul> <li>javascript utility function</li> </ul>"},{"location":"tools/git/resource/#github","title":"Github","text":"<ul> <li>every programmer should know</li> <li>Path to Senior Engineer handbook</li> </ul>"},{"location":"tools/git/resource/#blog-to-read","title":"Blog to Read","text":"<ul> <li>Do programming certifications still matter?</li> <li>Ten Rules for Negotiating a Job Offer</li> </ul>"},{"location":"tools/git/resource/#best-frontend-libraries","title":"BEST FRONTEND LIBRARIES","text":"<ul> <li> <p>cdnjs</p> </li> <li> <p>Responsive Mega Menu In JavaScript</p> </li> <li> <p>jquery mega menu list</p> </li> <li> <p>mega menu source</p> </li> </ul> <p>Hero Section</p> <ul> <li>what is hero image</li> <li> <p>choosing hero image</p> </li> <li> <p>Free Frontend Resources</p> </li> </ul> <p>Bootstrap</p> <ul> <li>Dark offcanvas navbar</li> <li>Offcanvas Bootstrap 5</li> </ul> <p>Completeting Frontend Website Resources</p> <p>Jquery library</p> <p>JS Text Animation Library</p> <p>SVG Pattern</p> <ul> <li>https://www.svgbackgrounds.com/set/free-svg-backgrounds-and-patterns/</li> <li>https://pattern.monster/</li> <li>https://heropatterns.com/</li> <li>https://fffuel.co/</li> </ul> BLOG reference <ul> <li>search svg pattern </li> <li>https://www.lapa.ninja/blog/the-best-free-svg-patterns/</li> <li>https://superdesigner.co/tools/svg-backgrounds</li> </ul> <p>JS SLIDER</p> <ul> <li>https://fancyapps.com/fancybox/plugins/images/</li> </ul> slider reference <ul> <li>https://ckeditor.com/</li> </ul>"},{"location":"tools/git/resource/#draft","title":"Draft","text":""},{"location":"tools/git/resource/#visual-studio","title":"Visual Studio","text":"<p>shorcuts</p> <ul> <li> <p>Quickly open files: Ctrl+P or Ctrl+e</p> </li> <li> <p>Zen Mode: </p> </li> <li>Exit Zen Mode: Press <code>Esc</code> twice</li> </ul> <p>ubunbtu shortct</p> <ul> <li>screenshot in ubuntu: Ctrl+Fn+Print Screen or Ctrl+Print Screen</li> </ul>"},{"location":"tools/git/resource/#web-design","title":"Web Design","text":"Hero Section <p>Types of hero section</p> <p>The hero section of a website is typically the large, prominently placed section at the top of a webpage, often spanning the full width of the screen. It's one of the most critical parts of web design as it's the first thing visitors see and sets the tone for the rest of the site. There are several types of hero sections commonly used in web design:</p> <p>1. Image Background Hero Section: This type of hero section features a large, visually striking image as the background. It can be a static image or a slideshow/carousel of images. This type of hero section is popular because it immediately captures the visitor's attention.</p> <p>2. Video Background Hero Section: Similar to the image background hero section, but instead of a static image, it features a video playing in the background. This can be a full-screen video or a smaller video contained within the hero section. Video backgrounds can be particularly engaging and can help convey a brand's message effectively.</p> <p>3. Text-Centric Hero Section: In this type of hero section, the focus is on the text rather than the background image or video. The text may include a catchy headline, a brief description, and a call-to-action button. The background could be a solid color, a gradient, or a subtle pattern.</p> <p>4. Product Showcase Hero Section: If the website is focused on showcasing products or services, the hero section might feature a carousel or grid of images displaying the featured products or services. This type of hero section is common in e-commerce websites.</p> <p>5. Interactive Hero Section: An interactive hero section encourages user engagement through elements like sliders, interactive maps, or animations triggered by user actions. It's a more dynamic approach to the hero section, providing an immersive experience for visitors.</p> <p>6. Minimalist Hero Section: This type of hero section uses simple design elements, such as a single background image with minimal text and no distractions. It's clean, elegant, and allows the content to speak for itself.</p> <p>7. Illustrated Hero Section: Instead of using photographs or videos, this hero section features illustrations or graphics as the main visual element. It's a creative and unique approach that can help establish a brand's personality.</p> <p>8. Split-Screen Hero Section: In a split-screen hero section, the screen is divided into two sections, often with contrasting colors or images on each side. This design technique can be used to showcase two different aspects of a brand or to provide a visual comparison.</p> <p>These are just a few examples of the types of hero sections used in web design. The choice of hero section depends on factors such as the website's purpose, target audience, branding guidelines, and design preferences.</p> <p>Reference</p> <ul> <li>Impress your visitors: 6 tips for a perfect hero section</li> <li>The 4 types of hero images</li> <li>Landing Page Hero Shots</li> <li>What should a hero section have?</li> <li>8 creative ways to design your hero section</li> <li>What is a hero image?</li> </ul> <ul> <li>smashing magazine</li> <li>svg doodle arrow</li> </ul> <p>Abstract</p> <p>https://help.ubuntu.com/stable/ubuntu-help/shell-windows-switching.html.en</p> <p>https://code.visualstudio.com/docs/getstarted/userinterface</p>"},{"location":"tools/git/resource/#react","title":"react","text":"<p>The Ultimate Guide to Implementing React Debounce Effectively</p> <p>Implement Debouncing in React in 3 Different Ways</p> <p>Debouncing in React \u2013 How to Delay a JS Function</p> <p>Tip</p> <pre><code>from django.conf import settings\nfrom django.db import models\nfrom django.urls import reverse\n</code></pre> <ul> <li>django context preprocessor</li> <li>How to create and use custom context processors in django?</li> <li>How To Create Custom Context Processors in Django </li> <li>Writing a Custom Template Context Processor in Django</li> <li>Context Processors in Django </li> </ul>"},{"location":"tools/git/resource/#reference","title":"Reference","text":"<ul> <li>How To Save And Restore Tmux Environments Across Reboots In Linux</li> <li>Restore tmux session after reboot</li> </ul>"},{"location":"tools/git/resource/#bem","title":"BEM","text":"<p>CSS Naming Conventions</p> <p>BEM, which stands for Block, Element, Modifier, is a popular CSS naming convention that helps developers write more maintainable and modular CSS. It provides a structured way of naming CSS classes to make styles more predictable and easier to understand.</p> <pre><code>&lt;div class=\"block\"&gt;\n  &lt;div class=\"block__element\"&gt;\n    &lt;div class=\"block__element--modifier\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.block { /* block styles */ }\n.block__element { /* element styles */ }\n.block__element--modifier { /* modifier styles */ }\n</code></pre> <p>Here's a brief overview of BEM:</p> <ul> <li> <p>Block:</p> <p>A standalone component that is meaningful on its own. It represents a higher-level component or a module on the page.</p> <p>Blocks represent standalone entities or components on a web page. They are the top-level abstraction and should be independent, reusable pieces of UI. Examples could be headers, footers, navigation bars, cards, etc.</p> </li> <li> <p>Element:</p> <p>A part of a block that has no standalone meaning and is semantically tied to its block. Elements are typically children of blocks and are named with double underscores (<code>__</code>) following the block name.</p> <p>Elements are parts of blocks and cannot exist outside of a block. They are semantically tied to the block they belong to and represent smaller components within that block. For example, within a card block, elements could include the card title, card content, card footer, etc.</p> </li> <li> <p>Modifier:</p> <p>A flag on a block or element that changes its appearance or behavior. Modifiers are named with double hyphens (<code>--</code>) following the block or element name.</p> <p>Modifiers are flags on blocks or elements that alter their appearance or behavior. They allow for variations of a block or element without duplicating code. For example, a modifier could change the color, size, or state (such as active, inactive, etc.) of a block or element.</p> </li> </ul> <p> </p> <p>The philosophy behind BEM (Block, Element, Modifier) styling is to create a modular and reusable structure for CSS classes, enhancing maintainability, and reducing the risk of style conflicts in larger projects.</p> <pre><code>&lt;section class=\"main-section\"&gt;\n  &lt;div class=\"block1\"&gt;\n    &lt;h2 class=\"block1__title\"&gt;Block 1 Title&lt;/h2&gt;\n    &lt;p class=\"block1__description\"&gt;Description for Block 1&lt;/p&gt;\n    &lt;button class=\"block1__button\"&gt;Button 1&lt;/button&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"block2\"&gt;\n    &lt;h2 class=\"block2__title\"&gt;Block 2 Title&lt;/h2&gt;\n    &lt;p class=\"block2__description\"&gt;Description for Block 2&lt;/p&gt;\n    &lt;button class=\"block2__button\"&gt;Button 2&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"tools/git/resource/#reference_1","title":"Reference","text":"<ul> <li>What is BEM? What are some examples?</li> <li> <p>Use BEM for scalable and maintainable CSS</p> </li> <li> <p>Choosing the Right CSS Naming Convention for Your Project </p> </li> </ul>"},{"location":"tools/git/tricks/","title":"tricks","text":"<p>Deployment</p> <pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\n$ cd ../orgname.github.io/\n$ mkdocs gh-deploy --config-file ../&lt;project-name&gt;/mkdocs.yml --remote-branch &lt;branch-name&gt;\n</code></pre> <p>Note</p> <p>To Preview markdown in <code>vs code</code></p> <p>Ctrl+Shift+V</p>"},{"location":"tools/git/tricks/#python","title":"Python","text":""},{"location":"tools/git/tricks/#shell","title":"shell","text":"<p>Example</p> <pre><code># ~=4.2 allows installing any version of Django that is in the 4.2 series, \n# but it prevents installing versions from Django 4.3 or higher.\n$ pip install django~=4.2\n\n# Install djagno, drf, dotenv, mysqlclient at once\n$ pip install django djangorestframework python-dotenv mysqlclient\n\n# open python shell\n$ python manage.py shell\n\n# create the object using the model\n$ from geeks.models import GeeksModel\n$ GeeksModel.objects.create(title=\"title1\",description=\"description1\").save()\n$ GeeksModel.objects.create(title=\"title2\",description=\"description2\").save()\n</code></pre>"},{"location":"tools/git/tricks/#venv","title":"venv","text":"<pre><code># On Linux\npython3 -m venv venv &amp;&amp; source venv/bin/activate\n\n# On Windows\n.\\venv\\Scripts\\activate\n</code></pre>"},{"location":"tools/git/tricks/#git","title":"git","text":"<p><code>Global Information Tracker</code></p>"},{"location":"tools/git/tricks/#basic","title":"Basic","text":"<pre><code># used to make changes to the last commit\n$ git commit --amend -m \"Add\"\n\n# restore all files to the state of the last commit.\n$ git restore *\n\n# Managing remote repositories\n$ git remote -v\n\n# showing each commit as a single line\n$ git log --oneline\n\n# The primary difference is that --pretty=oneline explicitly specifies the format to be \"oneline.\"\n$ git log --pretty=oneline\n\n# if you want to delete a remote branch named feature-branch, you would use:\n$ git push origin --delete feature-branch\n</code></pre>"},{"location":"tools/git/tricks/#configuration","title":"configuration","text":"<pre><code># opens the global configuration file\ngit config --global --edit\n\n# opens the repository-specific configuration file\ngit config --edit\n</code></pre>"},{"location":"tools/git/tricks/#git-branch","title":"git branch","text":"<pre><code># displaying very-verbose information\n$ git branch -vv\n\n# used to list all branches in a Git repository, both local and remote branches.\n$ git branch -a\n\n# To see only remote branches\n$ git branch -r\n\n# To see only local branches\n$ git branch\n</code></pre>"},{"location":"tools/git/tricks/#git-diff","title":"git diff","text":"<pre><code># To see the changes made to a specific file in Git\ngit diff path/to/your/file\n\n# To see the changes for a file that has already been staged (but not committed yet)\ngit diff --staged path/to/your/file\n\n# If you want to display only the names of the files that have changed\ngit diff --name-only\n\n# If you just want a summary of changes:\ngit diff --stat\n</code></pre>"},{"location":"tools/git/tricks/#git-stash","title":"git stash","text":"<pre><code># Stashing is helpful when you want to save changes in your working directory without committing them\n# This is useful when you need to switch branches or perform other operations without committing incomplete work.\n$ git stash save \"your message\"\n\n# Lists all stashes\n$ git stash list\n\n# Removes all stashes.\n$ git stash clear\n\n# Applies the changes from the most recent stash and removes it from the stash list.\n$ git stash pop\n\n# Applies the changes from the most recent stash to your working directory.\n$ git stash apply\n\n# Creates a new branch and applies the changes from the most recent stash to it.\n$ git stash branch feature-branch\n</code></pre>"},{"location":"tools/git/tricks/#git-cherry-pick","title":"git cherry-pick","text":"<pre><code># allows you to apply a specific commit from one branch onto another. \n# This is useful when you want to selectively bring changes from \n# one branch to another without merging the entire branch.\n\n$ git cherry-pick &lt;commit&gt;\n</code></pre>"},{"location":"tools/git/tricks/#git-tag","title":"git tag","text":"git tags <p>To add a tag in Git, you have two main options: lightweight tags and annotated tags.</p> <p>1. Lightweight Tags:</p> <p>Lightweight tags are simply pointers to a specific commit. They are created with the git tag command followed by the tag name. Here's how you can add a lightweight tag:</p> <pre><code>git tag &lt;tag_name&gt;\n</code></pre> <p>For example, if you want to tag the current commit with the tag \"v1.0.0\", you would run:</p> <pre><code>git tag v1.0.0\n</code></pre> <p>2. Annotated Tags:</p> <p>Annotated tags, on the other hand, are stored as full objects in the Git database. They include a tagger name, email, date, and a tagging message. You create an annotated tag using the -a option with the git tag command, like so:</p> <pre><code>git tag -a &lt;tag_name&gt; -m \"Tagging message\"\n</code></pre> <pre><code>git tag -a v1.0.0 -m \"Version 1.0.0 release\"\n</code></pre> <p>Pushing Tags to Remote Repository:</p> <p>After creating the tag locally, you might want to push it to a remote repository like GitHub. You can do this using the git push command with the --tags option to push all tags:</p> <pre><code>git push origin --tags\n</code></pre> <p>If you only want to push a specific tag, you can specify it like this:</p> <pre><code>git push origin &lt;tag_name&gt;\n</code></pre> <p>For example:</p> <pre><code>git push origin v1.0.0\n</code></pre> <p>Example Workflow:</p> <p>Here's a complete example workflow to add a tag and push it to a remote repository:</p> <ol> <li>Create a lightweight tag:</li> </ol> <pre><code>git tag v1.0.0\n</code></pre> <ol> <li>Push the tag to the remote repository:</li> </ol> <pre><code>git push origin v1.0.0\n</code></pre> <p>Alternatively, if you want to create an annotated tag:</p> <ol> <li>Create an annotated tag with a message:</li> </ol> <pre><code>git tag -a v1.0.0 -m \"Version 1.0.0 release\"\n</code></pre> <ol> <li>Push the annotated tag to the remote repository:</li> </ol> <pre><code>git push origin v1.0.0\n</code></pre> <p>Remember to replace <code>&lt;tag_name&gt;</code> with the name of your tag and <code>&lt;tagging_message&gt;</code> with a descriptive message for annotated tags.</p>"},{"location":"tools/git/tricks/#git-log","title":"git log","text":"<p>Note</p> <pre><code>## Oneline\ngit log \u2014oneline\n\n## Decorating \ngit log --oneline --decorate\n\n##  Filtering the commit history\n\n# 1. By date \ngit log --after=\"2020-15-05\"\ngit log --after=\"2020-15-05\" --before=\"2020-25-05\"\ngit log --before=\"10 day ago\"\n\n# 2. By author\ngit log --author=\"Srebalaji\"\n\n## diff between branches\ngit log master..develop\n</code></pre> <p>Reference</p> <ul> <li>Ten Useful Git Log Tricks </li> <li>5 Git Tricks Every Developer Should Know </li> <li>Advanced Git log </li> <li>Git Log Tricks You Might Not Know</li> </ul> <p>shortcuts</p> <pre><code>git log --after=\"yesterday\" --oneline\n</code></pre>"},{"location":"tools/git/tricks/#git-directives","title":"Git Directives","text":"<p>In Git, \"directives\" typically refer to commands or instructions used to perform various operations within the version control system. Here are some common Git directives:</p> <ul> <li> <p>git init: Initializes a new Git repository in the current directory or in a specified directory.</p> </li> <li> <p>git clone: Creates a local copy of a remote repository.</p> </li> <li> <p>git add: Adds changes in the working directory to the staging area.</p> </li> <li> <p>git commit: Records changes in the staging area to the repository.</p> </li> <li> <p>git push: Uploads local repository content to a remote repository.</p> </li> <li> <p>git pull: Fetches changes from a remote repository and merges them into the current branch.</p> </li> <li> <p>git fetch: Downloads objects and references from another repository.</p> </li> <li> <p>git merge: Combines multiple sequences of commits into one unified history.</p> </li> <li> <p>git branch: Lists, creates, or deletes branches.</p> </li> <li> <p>git checkout: Switches branches or restores working tree files.</p> </li> <li> <p>git status: Displays the state of the working directory and the staging area.</p> </li> <li> <p>git log: Shows the commit logs.</p> </li> <li> <p>git remote: Manages connections to remote repositories.</p> </li> <li> <p>git reset: Resets the current HEAD to the specified state.</p> </li> <li> <p>git rebase: Reapplies commits on top of another base tip.</p> </li> <li> <p>git tag: Creates, lists, deletes, or verifies a tag object signed with GPG.</p> </li> </ul>"},{"location":"tools/git/tricks/#git-categorywise","title":"Git Categorywise","text":"<p>Initialization and Configuration</p> <ul> <li>git init: Initializes a new Git repository.</li> <li>git config: Configures settings for Git, such as user name and email.</li> </ul> <p>Managing Changes</p> Staging ChangesCommitting Changes <ul> <li>git add: Adds changes from the working directory to the staging area.</li> <li>git rm: Removes files from both the working directory and the index.</li> <li>git mv: Moves or renames files, updating the index accordingly.</li> </ul> <ul> <li>git commit: Records changes from the staging area to the repository.</li> <li>git commit --amend: Amends the last commit by adding changes or modifying the commit message.</li> </ul> <p>Branching and Merging</p> BranchingMerging <ul> <li>git branch: Lists, creates, renames, or deletes branches.</li> <li>git checkout: Switches branches or restores working tree files.</li> <li>git switch: Switches branches or restores working tree files (Git 2.23+).</li> <li>git restore: Restores working tree files (Git 2.23+).</li> </ul> <ul> <li>git merge: Combines changes from different branches into the current branch.</li> <li>git rebase: Reapplies commits from one branch onto another, often used for cleaner history.</li> </ul> <p>Remote Repository Interaction</p> Remote Repositories: <ul> <li>git clone: Clones a repository into a new directory.</li> <li>git remote: Manages connections to remote repositories.</li> <li>git fetch: Downloads objects and references from another repository.</li> <li>git pull: Fetches changes from a remote repository and merges them into the current branch.</li> <li>git push: Uploads local repository content to a remote repository.</li> </ul> <p>Inspection and Comparison</p> Viewing ChangesTagging <ul> <li>git status: Shows the status of the working directory and the staging area.</li> <li>git diff: Shows changes between commits, commit and working tree, etc.</li> <li>git log: Displays commit history.</li> <li>git show: Shows information about a specific commit.</li> </ul> <ul> <li>git tag: Creates, lists, deletes, or verifies tags in the repository.</li> </ul> <p>Undoing Changes</p> Reverting Changes <ul> <li>git reset: Resets the current HEAD to the specified state.</li> <li>git revert: Creates a new commit that undoes changes made by a previous commit.</li> </ul> <p>Collaboration</p> Submodules <ul> <li>git submodule: Manages project submodules.</li> </ul> <p>Miscellaneous</p> Utilities <ul> <li>git clean: Removes untracked files from the working directory.</li> <li>git stash: Temporarily shelves changes so you can work on something else.</li> <li>git grep: Searches through the contents of files in your Git repository.</li> <li>git bisect: Helps to find the commit that introduced a bug by binary search.</li> </ul> <p>These categories cover the major functionalities of Git and provide a structured overview of its directives.</p>"},{"location":"tools/git/tricks/#ssh-directives","title":"SSH Directives","text":"<p>SSH (Secure Shell) directives, like Git directives, are commands or instructions used to perform various operations related to SSH connections and configuration. Here are some common SSH directives:</p> <ul> <li> <p>ssh: The basic command to initiate an SSH connection to a remote server. For example, ssh username@hostname.</p> </li> <li> <p>ssh-keygen: Generates a new SSH key pair (public and private keys) for authentication.</p> </li> <li> <p>ssh-copy-id: Copies the public SSH key to a remote server's authorized_keys file, allowing passwordless SSH authentication.</p> </li> <li> <p>ssh-add: Adds private keys to the SSH authentication agent, enabling seamless authentication without entering passphrases repeatedly.</p> </li> <li> <p>ssh-agent: Starts the SSH authentication agent, which manages private keys used for authentication.</p> </li> <li> <p>ssh-keyscan: Gathers SSH server host keys and adds them to the local known_hosts file.</p> </li> <li> <p>ssh-config: Configures SSH client behavior, allowing customization of connection parameters and aliases for hosts.</p> </li> <li> <p>scp: Securely copies files between hosts over an SSH connection.</p> </li> <li> <p>sftp: Interactive file transfer over an SSH connection, providing a secure alternative to FTP.</p> </li> <li> <p>sshfs: Mounts a remote filesystem over SSH, allowing access to remote files as if they were local.</p> </li> </ul> <p>These directives are essential for managing SSH connections, keys, and configurations, ensuring secure and efficient communication between client and server systems.</p>"},{"location":"tools/git/tricks/#ssh-directives-categorywise","title":"SSH Directives Categorywise","text":"<p>Certainly! SSH directives can be categorized based on their functions and the aspects of SSH configuration they control. Here's a categorization of SSH directives:</p> <p>Connection Configuration</p> <ul> <li>Host: Specifies the host(s) to which the following directives apply.</li> <li>HostName: Specifies the actual hostname or IP address of the remote server.</li> <li>User: Specifies the username to use when connecting to the remote host.</li> <li>Port: Specifies the port number to use for SSH connections.</li> </ul> <p>Authentication and Authorization</p> <ul> <li>IdentityFile: Specifies the path to the private key file for authentication.</li> <li>IdentityAgent: Specifies the path to the SSH authentication agent socket.</li> <li>ForwardAgent: Enables SSH agent forwarding, allowing authentication credentials to be forwarded to remote hosts.</li> <li>ProxyJump: Specifies one or more jump hosts to use as intermediaries for reaching the destination host.</li> <li>ProxyCommand: Specifies the command to use for establishing a connection to the destination host through a proxy.</li> </ul>"},{"location":"tools/git/tricks/#ssh-configuration-directives","title":"SSH configuration directives","text":"<p>The SSH configuration file, often located at <code>~/.ssh/config</code> or <code>/etc/ssh/ssh_config</code>, allows users to customize SSH client behavior by defining various directives. Here are some common directives found in the SSH configuration file:</p> <ol> <li> <p>Host: Specifies the host(s) to which the following directives apply. This can be a hostname, IP address, or wildcard pattern.</p> Example<pre><code>Host example.com\nHostName 192.0.2.1\nUser john\n</code></pre> </li> <li> <p>HostName: Specifies the actual hostname or IP address of the remote server.</p> </li> <li> <p>User: Specifies the username to use when connecting to the remote host.</p> </li> <li> <p>Port: Specifies the port number to use for SSH connections.</p> </li> <li> <p>IdentityFile: Specifies the path to the private key file for authentication.</p> </li> <li> <p>IdentityAgent: Specifies the path to the SSH authentication agent socket.</p> </li> <li> <p>ProxyJump: Specifies one or more jump hosts to use as intermediaries for reaching the destination host.</p> </li> <li> <p>ProxyCommand: Specifies the command to use for establishing a connection to the destination host through a proxy.</p> </li> <li> <p>ForwardAgent: Enables SSH agent forwarding, allowing authentication credentials to be forwarded to remote hosts.</p> </li> <li> <p>LogLevel: Specifies the verbosity level for logging SSH client activity.</p> </li> <li> <p>Compression: Enables compression of SSH data to reduce bandwidth usage.</p> </li> <li> <p>ServerAliveInterval / ServerAliveCountMax: Specifies the interval and maximum number of server-alive messages sent to prevent connection timeouts.</p> </li> <li> <p>BatchMode: Disables password authentication and forces SSH to exit if public key authentication fails.</p> </li> <li> <p>StrictHostKeyChecking: Controls how SSH handles unknown or changed host keys.</p> </li> <li> <p>UserKnownHostsFile: Specifies the path to the file containing known host keys.</p> </li> <li> <p>TCPKeepAlive: Enables TCP keep-alive messages to prevent connections from being closed due to inactivity.</p> </li> </ol> <p>These directives allow users to customize their SSH client behavior for specific hosts or globally. By configuring SSH options in the SSH configuration file, users can streamline their SSH connections and enhance security and convenience.</p>"},{"location":"tools/git/tricks/#note-to-self","title":"Note to Self","text":"<p>git push branch to remote</p> <p>To push only a specific branch to a remote repository in Git, you would use the following command:</p> bash<pre><code>git push &lt;remote_name&gt; &lt;branch_name&gt;\n</code></pre> <p>Here's a breakdown:</p> <ul> <li><code>&lt;remote_name&gt;:</code> This is the name of the <code>remote</code> repository you want to push the branch to. For example, <code>origin</code> is the default name given to the remote repository you cloned from.</li> <li><code>&lt;branch_name&gt;:</code> This is the name of the branch you want to push to the <code>remote</code> repository.</li> </ul> <p>For example, if you want to push the branch named <code>my_branch</code> to the origin remote, you would use:</p> bash<pre><code>git push origin my_branch\n</code></pre> <p>This command pushes only the <code>my_branch branch</code> to the origin remote repository.</p> <p>Make sure you have committed your changes to the branch before pushing it to the remote repository. If the branch doesn't exist on the remote repository, this command will create the branch on the remote repository and push the changes to it.</p>"},{"location":"tools/git/tricks/#reference","title":"Reference","text":"<ul> <li>git log graph</li> <li>pretty graph dog</li> <li> <p>Git Bisect | How to use Git Bisect: video</p> </li> <li> <p>mkdocs plugins</p> </li> <li> <p>git tags? how to use them</p> </li> </ul>"},{"location":"tools/github-actions/intro/","title":"Intro","text":"<p>GitHub Actions is a powerful feature provided by GitHub that enables you to automate workflows directly in your GitHub repository.</p> <p>Here's a breakdown of what it is, why you might need it, the problems it solves, and when to use or avoid it.</p>"},{"location":"tools/github-actions/intro/#what-is-github-actions","title":"What is GitHub Actions?","text":"<p>GitHub Actions allows you to automate tasks within your GitHub repository. You define workflows using YAML files that describe a series of steps to be executed on certain events, such as code pushes, pull requests, or other triggers. These workflows can include steps like running tests, building applications, deploying code, and more.</p> Why Do We Need GitHub Actions? <p>GitHub Actions helps streamline the development process by automating repetitive tasks, which can improve efficiency and reduce the likelihood of errors. Here\u2019s why it\u2019s valuable:</p> <ol> <li>Continuous Integration/Continuous Deployment (CI/CD): Automate testing and deployment processes to ensure code changes are automatically tested and deployed without manual intervention.</li> <li>Consistency: Ensure that all developers follow the same processes, reducing variability in how code is built, tested, and deployed.</li> <li>Efficiency: Save time by automating routine tasks like code linting, formatting, or even generating documentation.</li> <li>Integration: Easily integrate with other services and tools within the GitHub ecosystem, such as code reviews and issue tracking.</li> </ol> Problems GitHub Actions Solves <ol> <li>Manual Errors: By automating processes, you reduce the risk of human error that can occur with manual deployments or testing.</li> <li>Time Consumption: Automation speeds up repetitive tasks, such as running test suites or building projects, which can otherwise be time-consuming.</li> <li>Consistency in Workflows: Ensures that every code push or pull request goes through the same automated processes, which improves the reliability and quality of your code.</li> </ol> When to Use GitHub Actions <ol> <li>Automating Tests: Automatically run unit tests, integration tests, and other types of tests when code changes are pushed or pull requests are made.</li> <li>Building Projects: Automate the build process for different environments or configurations, ensuring that your application can be built correctly.</li> <li>Deployment: Automatically deploy code to production, staging, or other environments upon successful builds or other criteria.</li> <li>Code Quality: Implement code quality checks, such as linting or style checking, to ensure that code adheres to predefined standards.</li> <li>Documentation: Automatically generate or update documentation as part of your workflow.</li> </ol> When Not to Use GitHub Actions <ol> <li>Simple Repositories: If your repository is small and doesn\u2019t require automated workflows, setting up GitHub Actions might be overkill.</li> <li>Highly Sensitive Data: For workflows that involve sensitive data or require highly secure environments, additional considerations might be needed to ensure that secrets and sensitive information are managed securely.</li> <li>Performance Concerns: For extremely resource-intensive tasks, you might need to evaluate if GitHub Actions\u2019 performance meets your needs or if other CI/CD tools are more appropriate.</li> <li>Complex Configuration: If you have very complex or specialized workflows, it might require a steep learning curve or might be better suited for other CI/CD tools with more advanced capabilities.</li> </ol> <p>In summary, GitHub Actions is a versatile tool for automating tasks and workflows within your GitHub projects, making it easier to maintain code quality and streamline development processes. It\u2019s best used when you need to automate repetitive tasks, enforce consistency, or integrate with other services.</p>"},{"location":"tools/github-actions/intro/#maximizing-github-actions-automating-more-than-just-builds-and-deployments","title":"Maximizing GitHub Actions: Automating More Than Just Builds and Deployments","text":"<p>Yes, you can use GitHub Actions without involving CI/CD workflows. GitHub Actions is a flexible tool that can automate a wide variety of tasks beyond the traditional continuous integration and continuous deployment (CI/CD) scenarios. Here are some alternative uses for GitHub Actions:</p> <ol> <li> <p>Code Quality Checks</p> <p>You can use GitHub Actions to automate tasks related to code quality, such as:</p> <ul> <li>Linting: Automatically run linters to ensure code adheres to style guidelines.</li> <li>Static Analysis: Perform static code analysis to detect potential issues.</li> </ul> </li> <li> <p>Automated Issue Management</p> <p>You can automate tasks related to GitHub issues, such as:</p> <ul> <li>Labeling: Automatically apply labels to issues or pull requests based on certain conditions.</li> <li>Triaging: Move issues to different milestones or close stale issues.</li> </ul> </li> <li> <p>Code Formatting</p> <p>Automate the formatting of code on push or pull request events to ensure consistent code style across the repository.</p> </li> <li> <p>Documentation Generation</p> <p>You can use GitHub Actions to automatically generate or update documentation, such as:</p> <ul> <li>API Documentation: Generate API documentation from code comments.</li> <li>Markdown Files: Update or generate Markdown files based on certain triggers.</li> </ul> </li> <li> <p>Custom Notifications</p> <p>Set up custom notifications or alerts based on repository events. For example, send a message to a Slack channel when a new issue is created.</p> </li> <li> <p>Dependency Management</p> <p>Automate dependency updates by using actions that check for outdated dependencies and create pull requests with updates.</p> </li> <li> <p>Scheduled Tasks</p> <p>Use scheduled triggers to perform tasks on a regular basis, such as:</p> <ul> <li>Data Collection: Collect data from your application or service periodically.</li> <li>Maintenance Tasks: Perform routine maintenance tasks or cleanups.</li> </ul> </li> <li> <p>Release Management</p> <p>Automate release-related tasks, such as:</p> <ul> <li>Version Bumping: Automatically update version numbers based on tags or commits.</li> <li>Changelog Generation: Generate and update changelogs for new releases.</li> </ul> </li> <li> <p>Custom Workflows</p> <p>Create custom workflows for unique scenarios specific to your project, such as:</p> <ul> <li>Onboarding New Contributors: Automatically assign tasks or send welcome messages to new contributors.</li> <li>Integration with External Tools: Trigger actions or scripts that interact with external systems or services.</li> </ul> </li> </ol>"},{"location":"tools/github-actions/intro/#example-workflow-without-cicd","title":"Example Workflow Without CI/CD","text":"<p>Here\u2019s a simple example of a GitHub Actions workflow that formats code using Prettier whenever code is pushed to the repository:</p> yaml<pre><code>name: Code Formatting\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  format:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Run Prettier\n      run: npx prettier --write .\n</code></pre> <p>In this example, the workflow runs Prettier to format code whenever changes are pushed to the <code>main</code> branch, but it doesn't involve any traditional CI/CD tasks.</p>"},{"location":"tools/github-actions/intro/#summary","title":"Summary","text":"<p>GitHub Actions is highly versatile and can be used for a wide range of automation tasks beyond CI/CD. Whether you\u2019re managing code quality, automating documentation, or performing custom workflows, GitHub Actions can help streamline these processes.</p>"},{"location":"tools/github-actions/workflow/","title":"Workflow","text":"Structure of a GitHub Actions Workflow <p>A GitHub Actions workflow YAML file consists of several key components:</p> <ul> <li>Name: The name of the workflow.</li> <li>On: Specifies the events that trigger the workflow.</li> <li>Jobs: Defines one or more jobs that the workflow will run.</li> <li>Steps: Specifies the individual steps to be executed within each job.</li> </ul> <p>Create a New Workflow:</p> <ul> <li>In the <code>.github/workflows</code> directory of your repository, create a new file (e.g., <code>ci.yml</code>, <code>test.yml</code>, or <code>build.yml</code>). If the <code>.github/workflows</code> directory does not exist, create it.</li> </ul> <p>Understanding the structure of a GitHub Actions workflow is key to effectively automating your software development processes. Here\u2019s a detailed breakdown of each component in a GitHub Actions workflow YAML file:</p> <ol> <li> <p>Workflow Name</p> yaml<pre><code>name: CI\n</code></pre> <ul> <li>Purpose: Provides a name for the workflow. This name will be visible in the GitHub Actions tab.</li> <li>Example: <code>CI</code> stands for Continuous Integration, but you can name it based on its function (e.g., <code>Deploy</code>, <code>Test Suite</code>).</li> </ul> </li> <li> <p>Trigger Events</p> yaml<pre><code>on:\n    push:\n        branches:\n            - main\n    pull_request:\n        branches:\n            - main\n</code></pre> <ul> <li>Purpose: Defines the events that trigger the workflow to run.</li> <li>Example: The workflow is triggered on <code>push</code> or <code>pull_request</code> events targeting the <code>main</code> branch.</li> </ul> </li> <li> <p>Jobs</p> yaml<pre><code>jobs:\n    build:\n        runs-on: ubuntu-latest\n</code></pre> <ul> <li>Purpose: Defines a collection of steps to be executed. Each job runs independently and can run in parallel or sequentially based on dependencies.</li> <li>Example: The job named <code>build</code> runs on the latest version of Ubuntu.</li> </ul> </li> <li> <p>Steps</p> yaml<pre><code>steps:\n    -   name: Checkout code\n        uses: actions/checkout@v3\n    -   name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n            node-version: '14'\n    -   name: Install dependencies\n        run: npm install\n    -   name: Run tests\n        run: npm test\n</code></pre> <ul> <li>Purpose: Specifies the individual actions or commands to execute within a job.</li> </ul> </li> <li> <p>Job Dependencies</p> yaml<pre><code>jobs:\n    build:\n        runs-on: ubuntu-latest\n\n    deploy:\n        runs-on: ubuntu-latest\n        needs: build\n</code></pre> <ul> <li>Purpose: Specifies dependencies between jobs, ensuring certain jobs run only after others have completed.</li> <li><code>needs</code>: Lists jobs that must complete before this job starts.</li> <li>Example: The <code>deploy</code> job depends on the successful completion of the <code>build</code> job.</li> </ul> </li> <li> <p>Secrets and Environment Variables</p> yaml<pre><code>jobs:\n    deploy:\n        runs-on: ubuntu-latest\n        env:\n            NODE_ENV: production\n        steps:\n            - name: Deploy\n            run: ./deploy.sh\n            env:\n                DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}\n</code></pre> <ul> <li>Purpose: Manage sensitive information and configuration settings.</li> <li>Secrets: Accessed via <code>${{ secrets.SECRET_NAME }}</code>. They are stored securely and not exposed in logs.</li> <li>Environment Variables: Set using the <code>env</code> keyword at the job or step level.</li> <li>Example:         -   Environment Variable: Sets <code>NODE_ENV</code> to <code>production</code>.         -   Secret: Uses a deployment token stored as a secret.</li> </ul> </li> <li> <p>Matrix Builds</p> yaml<pre><code>jobs:\n    test:\n        runs-on: ubuntu-latest\n        strategy:\n            matrix:\n                node-version: [12, 14, 16]\n        steps:\n            -   name: Checkout code\n                uses: actions/checkout@v3\n            -   name: Set up Node.js\n                uses: actions/setup-node@v3\n                with:\n                    node-version: ${{ matrix.node-version }}\n            -   name: Run tests\n                run: npm test\n</code></pre> <ul> <li>Purpose: Run multiple configurations of a job, such as different versions of Node.js.</li> <li>Example: Runs the tests with Node.js versions 12, 14, and 16.</li> </ul> </li> <li> <p>Artifacts and Caching</p> yaml<pre><code>jobs:\n    build:\n        runs-on: ubuntu-latest\n        steps:\n        -   name: Cache Node.js modules\n            uses: actions/cache@v3\n            with:\n                path: ~/.npm\n                key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n                restore-keys: |\n                ${{ runner.os }}-node-\n        -   name: Build\n            run: npm run build\n</code></pre> <ul> <li>Purpose: Manage build artifacts and cache dependencies to speed up workflows.</li> <li>Caching: Saves and restores dependencies to reduce build times.</li> <li>Example: Caches Node.js modules to speed up dependency installation.</li> </ul> </li> </ol> <pre><code># .github/workflows/python-app.yml\nname: Python application\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Add deadsnakes PPA and install Python 3.8\n        run: |\n          sudo add-apt-repository ppa:deadsnakes/ppa\n          sudo apt-get update\n          sudo apt-get install -y python3.8 python3.8-venv python3.8-dev\n          python3.8 -m pip install --upgrade pip\n          python3.8 -m pip install pipenv\n\n      - name: Verify Python and Pipenv installation\n        run: |\n          python3.8 --version\n          pipenv --version\n\n      - name: Install dependencies\n        run: |\n          pipenv --python python3.8 install --dev\n\n      - name: Run tests\n        run: |\n          pipenv run pytest\n</code></pre>"},{"location":"tools/gitlab/intro/","title":"Intro","text":"<p>gitlab</p> <p>Containerization is an OS-level virtualization method used to deploy and run distributed applications without launching an entire Virtual Machine (VM) for each application.</p> <p>It is a kind of OS virtualization where we run our applications in a separate <code>user space</code> called containers.</p>"},{"location":"tools/gitlab/intro/#docker-networking","title":"Docker Networking","text":"<p>By default, during installation, the Docker Engine creates three networks for you:</p> bash<pre><code>$ docker network ls\n</code></pre> <p>When Docker spins up a new container, by default, it creates a network stack for the container and attaches to the default bridge network. However, optionally, you could attach the container to the host or none network.</p> <p>Docker provides a <code>docker inspect</code> subcommand, which is as handy as a Swiss Army knife, to dive deep into the low-level details of the Docker <code>container</code> or <code>image</code>.</p>"},{"location":"tools/gitlab/intro/#reference","title":"Reference","text":""},{"location":"tools/ssh/ssh/","title":"SSH","text":""},{"location":"tools/ssh/ssh/#ssh","title":"SSH","text":"<p>Success</p> <p>GitHub typically uses the username git for SSH connections, regardless of your GitHub account username. This is because GitHub's SSH server recognizes you based on your SSH key, not your GitHub username.</p>"},{"location":"tools/ssh/ssh/#how-is-ssh-implemented-in-windows","title":"How is SSH implemented in Windows?","text":"<p>There are two separate components of OpenSSH in Windows.</p> <ul> <li>an SSH client &amp;</li> <li>an SSH server.</li> </ul> <p>Microsoft implemented both in Windows using <code>OpenSSH Client</code> and <code>OpenSSH Server</code> respectively. And there are also two main methods to install and uninstall these components in Windows. The OpenSSH Client feature is installed by default in higher-end versions of Windows. The Client is like the functionality of Putty. It allows you to make \u2018client\u2019 connections to other servers and devices using various secure protocols.</p> <p>You can confirm if you have the client installed by opening a command prompt or PowerShell prompt and typing \u2018ssh\u2019 and hitting Enter.</p> <p></p> <p>for more information about ssh &amp; OpenSSH using PowerShell...</p> <p>If you dont find the optional feature, then go to</p> <pre><code>1. Setting\n2. App\n3. App &amp; Feature\n3. search for optional feature\n</code></pre>"},{"location":"tools/ssh/ssh/#login-remote-with-ssh-key-based-authentication","title":"Login remote with SSH key-based authentication","text":"<p>To log in to an SSH remote server without entering a password, you can set up SSH key-based authentication. Here's a step-by-step guide to do that:</p> <p>1. Generate SSH Key Pair: (if you don't have one already)</p> bash<pre><code>ssh-keygen -t rsa\n</code></pre> <p>This command will generate a new SSH key pair (<code>public</code> and <code>private</code>)</p> <p>2. Copy the Public Key to the Remote Server:</p> <p>Use the ssh-copy-id command to copy your public key to the remote server. Replace <code>username</code> and <code>remote_host</code> with your username and the hostname or IP address of the remote server.</p> bash<pre><code>ssh-copy-id username@remote_host\n</code></pre> <p>You'll be prompted to enter your password for the remote server. After that, your public key will be added to the <code>~/.ssh/authorized_keys</code> file on the remote server.</p> <p>3. Test SSH Connection:</p> <p>Try to SSH into the remote server again. You should be able to log in without being prompted for a password:</p> bash<pre><code>ssh username@remote_host\n</code></pre> <p>With SSH key-based authentication set up, you can now log in to your remote server <code>without entering a password</code>, provided you have the corresponding private key stored on your local machine.</p> <p></p>"},{"location":"tools/ssh/ssh/#reference","title":"Reference","text":"<ul> <li>What is a Git SSH Key? </li> <li>SSH Essentials: Working with SSH Servers, Clients, and Keys</li> <li>Connecting to GitHub with SSH</li> <li>The Ultimate Guide to Installing OpenSSH on Windows</li> <li> <p>jenkins guide</p> </li> <li> <p>19 Common SSH Commands in Linux With Examples</p> </li> <li>SSH Commands Cheat Sheet</li> <li>13 must-know SSH Commands</li> </ul>"},{"location":"tools/terminal/pass-command-line/","title":"Pass Command Line","text":""},{"location":"tools/terminal/pass-command-line/#using-pass-password-store","title":"Using <code>pass</code> (Password Store)","text":"<p>The <code>pass</code> utility is a password manager for Unix systems. It uses GPG for encryption.</p>"},{"location":"tools/terminal/pass-command-line/#installation","title":"Installation","text":"<ul> <li> <p>Install <code>pass</code>:</p> <pre><code>$ sudo apt install pass\n</code></pre> </li> </ul>"},{"location":"tools/terminal/pass-command-line/#setup","title":"Setup","text":"Tips <ul> <li> <p>Initialize the password store:</p> <p>You need to initialize <code>pass</code> with a GPG key. If you don't have a GPG key, you can generate one:</p> <pre><code>gpg --full-generate-key\n</code></pre> <p>Follow the prompts to generate your key. Once you have a GPG key, initialize the password store with the key ID (replace <code>GPG_ID</code> with your actual key ID, which you can find using <code>gpg --list-keys</code>):</p> <pre><code>pass init \"GPG_ID\"\n</code></pre> </li> </ul>"},{"location":"tools/terminal/pass-command-line/#storing-a-password","title":"Storing a Password","text":"Example <ul> <li> <p>Store a password:</p> <pre><code>pass insert path/to/your/password\n</code></pre> <p>For example:</p> <pre><code>pass insert email/github\n</code></pre> <p>You will be prompted to enter and confirm the password.</p> </li> </ul>"},{"location":"tools/terminal/pass-command-line/#retrieving-a-password","title":"Retrieving a Password","text":"Abstract <ul> <li> <p>Retrieve a password:</p> <pre><code>pass path/to/your/password\n</code></pre> <p>For example:</p> <pre><code>pass email/github\n</code></pre> <p>This command will display the stored password.</p> </li> </ul>"},{"location":"tools/terminal/pass-command-line/#managing-passwords","title":"Managing Passwords","text":"Tip <ul> <li> <p>List all stored passwords:</p> <pre><code>pass\n</code></pre> </li> <li> <p>Edit an existing password::</p> <pre><code>pass edit path/to/your/password\n</code></pre> <p>For example:</p> <pre><code>pass edit email/github\n</code></pre> </li> <li> <p>Remove a stored password::</p> <pre><code>pass rm path/to/your/password\n</code></pre> <p>For example:</p> <pre><code>pass rm email/github\n</code></pre> </li> </ul>"},{"location":"tools/terminal/pass-command-line/#reference","title":"Reference","text":"<ul> <li>manage-passwords-from-command-line</li> <li>Manage your passwords in the Linux terminal</li> <li>Terminal Based Password Manager</li> </ul>"},{"location":"tools/terminal/zsh/","title":"Zsh","text":"<p>Oh My Zsh is an open source, community-driven framework for managing your zsh configuration.</p> <pre><code>sudo apt update\nsudo apt install zsh\n</code></pre> Shell in Linux <p>Linux supports a variety of shells, each with its own features and use cases. Some of the most common shells include:</p> <ol> <li> <p>Bash (Bourne Again Shell):</p> <ul> <li>Codename: <code>bash</code></li> <li>Description: A widely used shell that is the default on many Linux distributions. It offers powerful scripting capabilities and is an enhanced version of the original Bourne Shell (<code>sh</code>).</li> </ul> </li> <li> <p>Zsh (Z Shell):</p> <ul> <li>Codename: <code>zsh</code></li> <li>Description: An extended shell with advanced features like improved auto-completion, customizable prompts, and plugin support.</li> </ul> </li> <li> <p>Dash (Debian Almquist Shell):</p> <ul> <li>Codename: <code>dash</code></li> <li>Description: A lightweight shell known for its speed and POSIX compliance. It is often used for script execution in Debian-based systems.</li> </ul> </li> <li> <p>Ksh (Korn Shell):</p> <ul> <li>Codename: <code>ksh</code></li> <li>Description: A shell with features that combine aspects of the Bourne Shell (<code>sh</code>) and C Shell (<code>csh</code>). Known for its programming capabilities.</li> </ul> </li> <li> <p>Tcsh (TENEX C Shell):</p> <ul> <li>Codename: <code>tcsh</code></li> <li>Description: An enhanced version of the C Shell (<code>csh</code>) with additional features like command-line editing and history.</li> </ul> </li> <li> <p>Fish (Friendly Interactive Shell):</p> <ul> <li>Codename: <code>fish</code></li> <li>Description: Designed to be user-friendly and interactive, featuring syntax highlighting, autosuggestions, and a more intuitive command-line interface.</li> </ul> </li> <li> <p>Sh (Bourne Shell):</p> <ul> <li>Codename: <code>sh</code></li> <li>Description: The original Unix shell, which provides basic scripting capabilities. It is often used for simple scripts and is the basis for many other shells.</li> </ul> </li> </ol> Why Use zsh? <p>Here are some reasons why users might prefer zsh over other shells:</p> <ol> <li> <p>Advanced Auto-Completion: <code>zsh</code> offers more robust and customizable auto-completion than many other shells, making it easier to complete commands and file names.</p> </li> <li> <p>Customization: <code>zsh</code> allows extensive customization of the command prompt and behavior, with support for various themes and plugins.</p> </li> <li> <p>Improved History Management: Features like shared history across sessions and better history search make it easier to manage and reuse previous commands.</p> </li> <li> <p>Plugin Support: With frameworks like <code>Oh My Zsh</code>, users can easily extend <code>zsh</code> with plugins for productivity, version control, and more.</p> </li> <li> <p>Powerful Scripting: <code>zsh</code> includes advanced scripting capabilities that go beyond those found in bash, making it suitable for complex tasks.</p> </li> <li> <p>User-Friendly Features: <code>zsh</code> has built-in features like spell correction, improved globbing (wildcard matching), and more, which can enhance the user experience.</p> </li> </ol> <p>Overall, the choice of shell often comes down to personal preference and the specific features that a user finds most useful for their workflow.</p> which shells are installed on your Linux <p>To determine which shells are installed on your Linux system, you can use the following methods:</p> <ol> <li> <p>Check Installed Shells from <code>/etc/shells</code>:</p> <p>The file <code>/etc/shells</code> lists all the shells that are available on the system. You can view its contents with:</p> <pre><code>cat /etc/shells\n</code></pre> <p>This file typically includes paths to various shells, such as <code>/bin/bash</code>, <code>/bin/zsh</code>, and <code>/bin/dash</code>.</p> </li> <li> <p>Check Available Shells Using <code>which</code> Command:</p> <p>You can use the which command to see if a specific shell is installed. For example:</p> <pre><code>which bash\nwhich zsh\nwhich fish\n</code></pre> <p>If the command returns a path, the shell is installed. If it returns nothing, the shell is not installed.</p> </li> <li> <p>List All Installed Shells:</p> <p>You can also search for all installed shells by listing the available executables in common shell directories:</p> <pre><code>ls /bin /usr/bin | grep -E 'bash|zsh|sh|ksh|tcsh|fish'\n</code></pre> <p>This will list the installed shells if they are located in <code>/bin</code> or <code>/usr/bin</code>.</p> </li> <li> <p>Check the Default Shell for Your User:</p> <p>To see which shell your user is currently using as the default, you can use:</p> <pre><code>echo $SHELL\n</code></pre> <p>This will output the path to your current default shell.</p> </li> </ol> <p>This will output the path to your current default shell.</p>"},{"location":"tools/terminal/zsh/#reference","title":"Reference","text":"<ul> <li>ohmyzsh: github</li> </ul>"},{"location":"tools/terminal/tmux/tmux/","title":"Tmux","text":"<p>tmux is short for [t]erminal [mu]ltiple[x]er. A multiplexer is simply a fancy way of describing an application that lets you easily manage multiple terminal windows within one screen.</p> <p>tmux runs a server/client architecture.</p> bash<pre><code># tmux prefix command\n&lt;Ctrl&gt; and b\n</code></pre> <p>Success</p> <p>If you haven't specified a session name explicitly, Tmux will assign a <code>default name</code> to the session.</p> <p>The default session name typically consists of a numerical value, starting from <code>0</code> and incrementing for each new session</p> bash<pre><code>tmux\n</code></pre> <p>Getting Help with tmux by Reviewing Keyboard Shortcuts</p> <pre><code>Prefix + ?\n\n# listing all tmux session\n$ tmux list-sessions\n\n# shorcurt\n$ tmux ls\n\n# To resize the pane\n&lt;Prefix&gt;, arrow down (hold)\n</code></pre> <p></p>"},{"location":"tools/terminal/tmux/tmux/#installation","title":"Installation","text":"<p>Example</p> bash<pre><code>$ sudo apt install tmux\n</code></pre>"},{"location":"tools/terminal/tmux/tmux/#sessions-windows-panes","title":"Sessions, Windows, Panes","text":"<p>Info</p> SessionsWindowsPanes bash<pre><code># To list all sessions (from outside tmux)\n$ tmux ls\n\n# To create new session\n$ tmux new-session -s work\n\n# To detach the session: (d for detach)\n&lt;Prefix&gt;, d\n\n# To rename a session\n$ tmux rename-session -t  old_name  new_name\n\n# To select a session\n:choose-session\n\n# Move to next session\n&lt;P&gt;, (\n\n# Move to previous session\n&lt;P&gt;, )\n\n# To kill a session\n# You can type exit within a session to destroy the session\nexit\n#or\n\u200btmux\u200b \u200bkill-session \u200b \u200b-t\u200b \u200b basic \u200b\ntmux\u200b \u200bkill-session \u200b \u200b-t\u200b \u200b second_session\n\n# Kill the tmux server and, as a result, every session\n$ tmux kill-server\u200b\n</code></pre> bash<pre><code># To create new window: (c for create)\n&lt;Prefix&gt;, c\n\n# To rename a window\n&lt;Prefix&gt; ,\n\n# To move between windows\n# By default, windows in tmux each have a number, starting at 0\n&lt;Prefix&gt;, 0\n&lt;Prefix&gt;, 1\n\n# To find a window \n&lt;Prefix&gt;, f\n\n# To display a visual menu of your windows \n&lt;Prefix&gt;, w\n\n# To close a window\ntype exit\n# or\n&lt;Prefix&gt;, &amp;\n</code></pre> bash<pre><code># To split the window vertically\n&lt;Prefix&gt;, %\n\n# To split the pane horizontally\n# &lt;Prefix&gt;, \"\n\n# To kill pane\n&lt;Prefix&gt;, x\n\n# To zoom the pane\n&lt;Prefix&gt;, z\n\n# To move the cursor to the pane to the right, left, down, or up\n&lt;Prefix&gt; and the right arrow key,\n&lt;Prefix&gt; and the left arrow key,\n&lt;Prefix&gt; and the down arrow key,\n&lt;Prefix&gt; and the up arrow key\n\n# Pane Layouts\n# To cycle through these layouts by pressing &lt;PREFIX&gt; SPACEBAR \n&lt;PREFIX&gt; SPACEBAR \n</code></pre>"},{"location":"tools/terminal/tmux/tmux/#manipulating-text","title":"Manipulating Text","text":"<p>Note</p> <p>There are two important components of tmux</p> <ul> <li>Copy mode</li> <li>paste buffers</li> </ul> Explaining the Window historypaste buffer <p>In order to work its magic and keep everything in a single terminal window, tmux has to hide all of the text that won't fit in the currently viewed pane. It keeps all of this text stored in something called Window history.</p> <pre><code># copy mode\n# To enter copy mode\n&lt;Prefix&gt;, [\n\n# To copy text into the paste buffer. \n# This sets the start point of the selection.\n\npress Ctrl + Space bar (Space bar)\n\n# When you are satisfied with your selection,\nsimply press Meta + w (Enter) \n# to copythe text and you will leave Copy mode immediately\n</code></pre> <p>Interacting with the paste buffer</p> <p>The paste buffer is a holding bucket for all of the text you will copy. It is actually a stack, so each item copied from Copy mode is added at the top of the stack.</p> <pre><code># Pasting text from the paste buffer\n&lt;Prefix&gt;, ]\n\n# Choosing items from the paste buffer\n&lt;Prefix&gt;, =\n</code></pre>"},{"location":"tools/terminal/tmux/tmux/#tmux-modes","title":"Tmux Modes","text":"<p>Explaining the different tmux modes</p> <ol> <li> <p>Default mode:</p> <p>You are in <code>Default mode</code> by default, and if you go into any other mode and then exit it, you'll end up back in Default mode.</p> </li> <li> <p>Copy mode:</p> <p>This allows us to access the Window history and <code>copy/paste</code> contents from that history.</p> </li> <li> <p>Command mode:</p> <p>This mode is used to enter arbitrary tmux commands. It is similar to the vi mode of the same name and can be accessed by <code>&lt;Prefix&gt;, :</code>.</p> </li> <li> <p>Clock mode:</p> <p>This mode shows the current time and is more of a novelty utility than an actual mode, like the rest. It can be accessed by <code>&lt;Prefix&gt;, t</code>.</p> </li> <li> <p>Control mode:</p> <p>This mode allows third-party applications to interact with tmux through a text-only protocol.</p> </li> </ol>"},{"location":"tools/terminal/tmux/tmux/#tmux-source-file","title":"tmux <code>source-file</code>","text":"<p>Example</p> UsageTheory <p><code>source-file</code>: Loads and executes commands from a file within the current Tmux session.</p> bash<pre><code>tmux source-file &lt;file_path&gt;\n</code></pre> <p>When you run <code>tmux source-file &lt;file_path&gt;</code>, Tmux reads the commands from the specified file and executes them as if they were entered directly into the Tmux command prompt.</p> <p>The <code>tmux</code> command is used to interact with a running Tmux session. source-file is an argument you can pass to tmux to execute commands from a specified file within the context of the current Tmux session.</p> <p>You might use tmux source-file in the following scenarios:</p> <ul> <li> <p>Reloading Tmux configuration: If you've made changes to your Tmux configuration file (<code>~/.tmux.conf</code> by default) and want to apply those changes to the current Tmux session without restarting it, you can use <code>tmux source-file ~/.tmux.conf</code>.</p> </li> <li> <p>Executing a series of commands: If you have a set of Tmux commands stored in a file and want to execute them together, you can use <code>tmux source-file &lt;file_path&gt;</code> to run them in sequence.</p> </li> <li> <p>Automating tasks: You can use <code>tmux source-file</code> within scripts or automation tools to apply Tmux configurations or perform actions programmatically.</p> </li> </ul> <p>Remember, <code>tmux source-file</code> is used to execute Tmux commands stored in a file, and it's typically used to apply configurations or perform actions within an existing Tmux session.</p>"},{"location":"tools/terminal/tmux/tmux/#-shorcuts-alias","title":"- Shorcuts <code>alias</code>","text":"<p>Question</p> bash<pre><code>\u200b$ tmux\u200b \u200blist-sessions\n# alias\n$ \u200btmux\u200b \u200bls \n\n\u200b$ tmux\u200b \u200bnew-session \u200b \u200b-s \u200b \u200bbasic\u200b\n# alias\n$ \u200btmux\u200b \u200bnew\u200b \u200b-s \u200b \u200bbasic\n\n# By using the -n flag, we tell tmux to name the first window so we can identify it easily.\n\u200b$ tmux\u200b \u200bnew\u200b \u200b-s \u200b \u200bwindows \u200b \u200b-n \u200b \u200bshell \n\n$ tmux rename-session -t old_name new_name\n# alias\n$ tmux rename -t old_name new_name.\u200b\n</code></pre>"},{"location":"tools/terminal/tmux/tmux/#-easter-eggs","title":"- Easter Eggs","text":"<p>Question</p> bash<pre><code># To display clock on the screen.\n&lt;Prefix&gt;, t\n\n\n# list of sessions and select any of them.\n&lt;Prefix&gt;, s \n\n# To attach last session, after you detach session\n$ tmux attach\n\n# display tmux keyboard shortcuts\n&lt;Prefix&gt;, ?\n</code></pre>"},{"location":"tools/terminal/tmux/tmux/#-commands","title":"- Commands","text":"<p>Default Commands for <code>Sessions</code>, <code>Windows</code>, and <code>Panes</code></p> <p>Abstract</p> Sessions CommandsWindows Commands <pre><code>Prefix + (  Switch to the previous session\nPrefix + )  Switch to the next session\nPrefix + s  Display an interactive session list\nPrefix + d  detach from the current session\nPrefix + $  rename a session in tmux\nPrefix + L  Select the most recently used session (or the last session).\n\n# List all available sessions\ntmux ls\n\n# Destroy all sessions and kill all processes\ntmux kill-server\n</code></pre> <pre><code>Prefix + c  Create a new window\nPrefix + p  Switch to the previous window\nPrefix + n  Switch to the next window\n\nPrefix + 0-9    Switch to a window using it\u2019s index number\n\nPrefix + w  Choose a window from an interactive list\n\nPrefix + &amp;  Force kill-all processes in an unresponsive window\nPrefix + %  Split windows horizontally\nPrefix + \u201c  Split windows vertically\n\nexit    Close a window\n\n---\n\n&lt;Prefix&gt;, n: Moves to the next window.\n&lt;Prefix&gt;, p: Moves to the previous window.\n\n&lt;Prefix&gt;, 0 ... 9:Selects windows by number.\n\n&lt;Prefix&gt;, w: Displays a selectable list of windows in the current session.\n&lt;Prefix&gt;, &amp;: Closes the current window after prompting for confirmation.\n\n&lt;Prefix&gt;, q: Momentarily displays pane numbers in each pane.\n&lt;Preix&gt;, x: Closes the current pane after prompting for confirmation.\n\n&lt;Prefix&gt;, space: Cycles through the various pane layouts.\n</code></pre> <p></p>"},{"location":"tools/terminal/tmux/tmux/#-tmux-command-mode","title":"- tmux command mode","text":"<p>Note</p> <p>tmux <code>command</code> mode:</p> <p>In tmux, command mode allows you to interact with tmux commands without prefixing them with the tmux prefix key (by default, it's <code>Ctrl+b</code>). This can be convenient for executing a series of tmux commands quickly.</p> <p>To enter command mode in tmux, you can use the tmux prompt key, which is <code>:</code> (colon) by default. Pressing this key will bring up the tmux command prompt at the bottom of the terminal window.</p> <p>Here's how you can use command mode:</p> <ul> <li>Press Ctrl+b (default prefix key) to enter tmux command mode.</li> <li>Type : (colon). This will bring up the tmux command prompt at the bottom of the terminal window.</li> <li>Enter the tmux command you want to execute, for example, <code>split-window</code> to split the current window.</li> <li>Press Enter to execute the command.</li> </ul> <pre><code># Create a new window\n:new-window\n\n# Split the current window into multiple panes.\n:split-window\n\n# Split the current window into panes horizontally.\n:split-window -h\n\n# Detach from the tmux session.\n:detach-client\n\n# List all tmux sessions.\n:list-sessions\n\n# Reload the tmux configuration file.\n:source-file ~/.tmux.confS\n</code></pre>"},{"location":"tools/terminal/tmux/tmux/#plugins","title":"Plugins","text":"<p>tmux plugin manager: <code>tpm</code></p> <p>Installing: Tmux Plugin Manager - <code>TPM</code></p> bash<pre><code>git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n</code></pre> <pre><code># Here's how you can create a .tmux directory if you need it:\nmkdir ~/.tmux\n\n# To create a basic configuration file, you can do the following:\ntouch ~/.tmux.conf\n</code></pre> <ul> <li> <p>One way</p> <p>While in tmux session, press <code>prefix</code> + <code>I</code> (capital <code>i</code>, as in Install) to fetch the plugin.</p> <p><code>Notes</code>: The default prefix to tmux is <code>Ctrl+b</code>.</p> </li> <li> <p>Other way</p> <p>You can also reload the Tmux configuration file by running the following command to add the plugin.</p> bash<pre><code>tmux source ~/.tmux.conf\n</code></pre> </li> </ul>"},{"location":"tools/terminal/tmux/tmux/#tmux-resurrect","title":"tmux-resurrect","text":"<p>a plugin that allows to easily save and restore tmux environment after system restarts.</p> <p>Tip</p> UsageInstallation <p>Default key bindings: </p> <ul> <li>prefix+Ctrl-s :  save</li> <li>prefix+Ctrl-r :  restore</li> </ul> <p>Add plugin to the list of TPM plugins in <code>.tmux.conf</code>:</p> <pre><code>set -g @plugin 'tmux-plugins/tmux-resurrect'\n</code></pre> <p>Hit <code>prefix + I</code> to fetch the plugin and source it. You should now be able to use the plugin.</p>"},{"location":"tools/terminal/tmux/tmux/#tmux-continuum","title":"tmux-continuum","text":"<p>a plugin that automates the saving and restoring of the tmux environment.</p> <p>Tip</p> UsageInstallation <p>Continuous saving</p> <p>Tmux environment will be saved at the interval of 15 minutes. All the saving happens in the background without the impact to your workflow. This action starts automatically when the plugin is installed.</p> <p>Automatic tmux start</p> <p>Tmux is automatically started after the computer/server is turned on.</p> <p>Automatic restore</p> <p>Last saved environment is automatically restored when tmux is started. To enable this, put the following in the <code>.tmux.conf</code>:</p> tmux.conf<pre><code>set -g @continuum-restore 'on'\n</code></pre> <p>Installation with Tmux Plugin Manager (recommended)</p> <p>Please make sure you have <code>tmux-resurrect</code> installed.</p> <p>Add plugin to the list of TPM plugins in <code>.tmux.conf</code>:</p> tmux.conf<pre><code>set -g @plugin 'tmux-plugins/tmux-resurrect'\nset -g @plugin 'tmux-plugins/tmux-continuum'\n</code></pre> <p>Hit <code>prefix + I</code> to fetch the plugin and source it. The plugin will automatically start \"working\" in the background, no action required.</p>"},{"location":"tools/terminal/tmux/tmux/#reference","title":"Reference","text":"<ul> <li>Site Reference</li> <li> <p>tmux</p> </li> <li> <p>Books</p> </li> <li>Getting Started with tmux by Victor Quinn, J.D.</li> <li>tmux Taster by Mark McDonnell</li> <li> <p>tmux 2: Productive Mouse-Free Development by Brian P. Hogan</p> </li> <li> <p>Blog</p> </li> <li>Installing TPM</li> <li>usefull tmux configuration</li> <li>customizing tmux configuration</li> <li>tmux config</li> <li>Useful Tmux Configuration</li> <li>Terminal Setup with Zsh + Tmux + Dracula Theme</li> <li> <p>Replicate My Tmux Setup in Less Than 5 Minutes [Beginner Friendly!]</p> </li> <li> <p>Github</p> </li> <li>tmux plugins: github</li> <li>list of awesome tmux: github</li> <li>dracula tmux plugins: github</li> <li>draculatheme offical site</li> <li>EVERYTHING YOU NEED TO KNOW ABOUT TMUX \u2013 Reconstructing Tmux Sessions After Restarts</li> <li>Tmux/plugins/resurrect</li> <li> <p>tmux-continuum: github</p> </li> <li> <p>Stackoverflow</p> </li> <li>How to press Ctrl + b + capital I (trying to install plugins in tmux)?</li> </ul>"},{"location":"video/health/","title":"Health","text":"<p>health</p> <p> </p>"},{"location":"video/productivity/","title":"Productivity","text":"<p>description</p> <p></p> <p></p> <p></p>"},{"location":"video/vid/","title":"Intro","text":"<p>James Lim</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/page/2/","title":"Index","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""},{"location":"tags/","title":"Tools","text":""},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>Tmux</li> </ul>"},{"location":"tags/#github","title":"Github","text":"<ul> <li>Managing Multiple SSH Keys for Secure and Efficient Remote Access</li> </ul>"},{"location":"tags/#linux","title":"Linux","text":"<ul> <li>gThumb lightweight image editor in ubuntu</li> </ul>"},{"location":"tags/#postman","title":"Postman","text":"<ul> <li>Automatically set Bearer Token in global variable postman after Login api</li> </ul>"},{"location":"tags/#programming","title":"Programming","text":"<ul> <li>A Guide to Secure Your Commits with GPG Keys</li> <li>Mastering Collaboration: A Guide to Git Branching Strategies</li> <li>How to pull all branches from a remote repository in GitHub ?</li> <li>Mastering Git: Understanding --track and --set-upstream</li> <li>Managing Multiple SSH Keys for Secure and Efficient Remote Access</li> <li>How to Add SSH Keys to Your GitHub Account</li> <li>Understanding the SSH Agent: Why It Matters in Managing SSH Keys</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Env variable in ubuntu</li> </ul>"},{"location":"tags/#ssh","title":"SSH","text":"<ul> <li>Managing Multiple SSH Keys for Secure and Efficient Remote Access</li> <li>Understanding the SSH Agent: Why It Matters in Managing SSH Keys</li> </ul>"},{"location":"tags/#tmux","title":"Tmux","text":"<ul> <li>Navigating Tmux: A Quick Guide to Swapping Windows</li> </ul>"},{"location":"tags/#ubuntu","title":"Ubuntu","text":"<ul> <li>Env variable in ubuntu</li> </ul>"},{"location":"tags/#api","title":"api","text":"<ul> <li>Postmen Advanced Topics</li> </ul>"},{"location":"tags/#base64","title":"base64","text":"<ul> <li>Encoding and Decoding</li> </ul>"},{"location":"tags/#css","title":"css","text":"<ul> <li>CSS Media Queries</li> </ul>"},{"location":"tags/#doc","title":"doc","text":"<ul> <li>Mkdoc</li> </ul>"},{"location":"tags/#git","title":"git","text":"<ul> <li>Removing Tracked Files and Directories in Git</li> </ul>"},{"location":"tags/#html","title":"html","text":"<ul> <li>CSS Media Queries</li> </ul>"},{"location":"tags/#mkdocs","title":"mkdocs","text":"<ul> <li>Mkdoc</li> </ul>"},{"location":"tags/#postment","title":"postment","text":"<ul> <li>Postmen Advanced Topics</li> </ul>"},{"location":"tags/#react","title":"react","text":"<ul> <li>Encoding and Decoding</li> </ul>"},{"location":"tags/#tracking","title":"tracking","text":"<ul> <li>Removing Tracked Files and Directories in Git</li> </ul>"}]}